/* eslint-disable import/no-extraneous-dependencies */

import { TSESLint } from "@typescript-eslint/utils";
import fs from "fs";
import path from "path";
import { PROJECT_NAME } from "./constants";
import {
  formatWithPrettier,
  getAlphabeticalRuleEntries,
  getFullRuleName,
  isRecommendedRule,
  RuleDefinition,
} from "./utils";

interface LinterConfigRules {
  [name: string]:
    | TSESLint.Linter.RuleLevel
    | TSESLint.Linter.RuleLevelAndOptions;
}

interface LinterConfig extends TSESLint.Linter.Config {
  extends?: string | string[];
  plugins?: string[];
}

const DEFAULT_RULE_LEVEL = "error";
const RULE_ENTRIES = getAlphabeticalRuleEntries();

const BASE_CONFIG: LinterConfig = {
  plugins: [PROJECT_NAME],
  rules: {
    eqeqeq: "off", // This will conflict with the "eqeqeq-fix" rule
  },
};

generateConfigs();

function generateConfigs() {
  all();
  recommended();
}

function all() {
  const allRules = RULE_ENTRIES.reduce<LinterConfigRules>(
    (config, entry) => reducer(config, entry),
    {},
  );
  const allConfig: LinterConfig = {
    ...BASE_CONFIG,
    rules: {
      ...BASE_CONFIG.rules,
      ...allRules,
    },
  };
  writeConfig("all", allConfig);
}

function recommended() {
  const recommendedRules = RULE_ENTRIES.filter((entry) =>
    isRecommendedRule(entry[1]),
  ).reduce<LinterConfigRules>((config, entry) => reducer(config, entry), {});
  const recommendedConfig: LinterConfig = {
    ...BASE_CONFIG,
    rules: {
      ...BASE_CONFIG.rules,
      ...recommendedRules,
    },
  };
  writeConfig("recommended", recommendedConfig);
}

function writeConfig(name: string, config: LinterConfig): void {
  const code = `export const ${name} = ${JSON.stringify(config)};`;
  const codeWithComment = addAutoGeneratedComment(code);
  const content = formatWithPrettier(codeWithComment, "typescript");

  const filePath = path.resolve(__dirname, `../src/configs/${name}.ts`);
  fs.writeFileSync(filePath, content);
}

function addAutoGeneratedComment(code: string): string {
  return [
    "// THIS CODE WAS AUTOMATICALLY GENERATED",
    "// DO NOT EDIT THIS CODE BY HAND",
    "// YOU CAN REGENERATE IT USING: npm run generate:configs",
    "",
    code,
  ].join("\n");
}

/** Reduces records to key - value pairs. */
function reducer(
  config: LinterConfigRules,
  entry: [string, RuleDefinition],
): LinterConfigRules {
  const [ruleName, rule] = entry;
  const fullRuleName = getFullRuleName(ruleName);
  const ruleLevel =
    rule.meta.docs === undefined || rule.meta.docs.recommended === false
      ? DEFAULT_RULE_LEVEL
      : rule.meta.docs.recommended;
  config[fullRuleName] = ruleLevel;

  return config;
}

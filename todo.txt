- inMineShaft

- roomGridIndexToXY

- rewrite lint rules to be unified

- lint rule - double space between word

- trophy can move to isaacscript common for respawning purposes
  - when respawning, don't play appear animation

- experiment with isaacscript monorepo

- make test linter rule to find single line non-complete sentences

- remove optional feature for custom collectible icons such as 20/20

- redo docs so that function examples are in JSDoc
  - confirm that POST_USE_CARD and POST_USE_PILL and POST_NPC_UPDATE and POST_FAMILIAR_UPDATE and POST_FAMILIAR_INIT are documented
  - confirm that ModCallback is documented

- check extending enums with enum repeat
- check spawning every entity type to see if game crashes, remove any bad enums
- after enum transition is complete, search for all irange and erange to see if code can be better written with getEnumValues
- check to see if implicit map/set iteration works in TSTL
- search for all eRange replacement (from range)

confirm that this works:

enum MyEnum {
  ThirdValue = "third-value",
  FourthValue = "fourth-value",
}

for (const key of getEnumKeys(MyEnum)) {
  print(key); // Will print "fourth-value", then "third-value"
}

CSPELL:
- get CSPELL extension to spell check all files
- write script to check to see if every word in both new dictionaries is being used
  - put script in isaacscript + zamTS

LINTER:
- make lint rule for "declare something that is not global in file with one or more imports"
- make lint rule for exporting something marked as Internal
- make lint rule for capital letter on const as const
- make lint rule about moving words to the previous line
- make lint rule about reformatting /** ONE LINE */ to
  /**
   * TWO LINES
   */
- lint rule for naming functions camelCase
- lint rule to check for "BOSS2" --> "BOSS_2" and "BOSS2_WATER_THRASHING" --> "BOSS2_WATER_THRASHING" and "BOSS2INTRO_WATER_EXPLOSION" --> "BOSS_2_INTRO_WATER_EXPLOSION", has to be 4 characters or more
- eslint reorganize messes up JSDoc, insert test with:
/**
 * Helper function to remove all of the `EntityType.PROJECTILE` in the room.
 *
 * @param projectileVariant Optional. If specified, will only remove projectiles that match this
 * variant.
 * @param subType Optional. If specified, will only remove projectiles that match this
 * sub-type.
 * @param cap Optional. If specified, will only remove the given amount of projectiles.
 * @returns True if one or more projectiles were removed, false otherwise.
 */
- linter rule audit (xo etc)
- lint audit on JSDoc rules specifically

TODO:
- in isaac-typescript-definitions, search for all "| int" and make type safe
- check every PlayerType --> PlayerVariant
- add every PlayerType where missing on search of PlayerVariant
- NEW DOCUMENTATION WEBSITE

implement in isaacscript-common:
- use tem's entity check function
- make spawn never spawn non-existent entities
- write test for isHorsePill, test every valid horse pill value
- write test for isGoldenTrinket, test every valid horse trinket value
- test getCurrentDimension() function to see if Xalum is right // cspell:disable-line
- PHD_PILL_CONVERSIONS to isaacscript-common
- make character args for every PlayerVariant callback
- POST_GREED_WAVE
- POST_PLAYER_COLLECTIBLE_ADDED
- POST_PLAYER_COLLECTIBLE_REMOVED
- POST_AMBUSH_DONE
- POST_BOMB_DETONATE
- check for item unlocked - https://github.com/Zamiell/racing-plus/blob/main/src/features/mandatory/errors.ts#L80-L165
- bible detection for POST FATAL DAMAGE
- isNewPickup
- compareEntity (to see what changes with dice room effect)
- DICE_ROOM_ACTIVATED
- intercept shovel for decorations
- collectible morph to glitched item
- getRoomNeighbors
- function getRandomEnumValue
- function to start challenge room
- think about how to track a custom entity that emulates a collectible (pseudo-persistent)
  - add isaacscript-common functionality for persistent entities
- make isValidCollectible (from isaac-typescript-definitions) for mods
- StageAPI2


IsaacScript announcements:
- Added the appropriate `HORSE_` enum values to the `PillColor` enum.
- Added the following constants:
  - `MAX_VANILLA_PLAYER_TYPE`
  - `MAX_NORMAL_PILL_COLOR`
- Added the following helper functions:
  - `getDoorEnterPosition`
  - `getDoorEnterPositionOffset`
  - `getNormalPillColorFromHorse`
  - `getRandomEnumValue`
- `Vector.Zero` and `Vector.One` are now deprecated and will cause compiler errors. Use the `VectorZero` and `VectorOne` constants from the standard library instead, which are guaranteed to be safe. (Alternatively, you can create your own constants that are local to your mod.)

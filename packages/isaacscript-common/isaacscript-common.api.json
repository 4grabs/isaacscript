{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.28.7",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "isaacscript-common!",
  "docComment": "",
  "name": "isaacscript-common",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "isaacscript-common!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addCharge:function(1)",
          "docComment": "/**\n * Helper function to add a charge to the player's active item. Will flash the HUD and play the appropriate sound effect, depending on whether the charge is partially full or completely full.\n *\n * If the player's active item is already fully charged, then this function will return 0 and not flash the HUD or play a sound effect.\n *\n * This function will take the following things into account: - The Battery - AAA Battery\n *\n * @param player - The player to grant the charges to.\n *\n * @param activeSlot - The slot to grant the charges to.\n *\n * @param numCharges - Optional. The amount of charges to grant. Default is 1.\n *\n * @param playSoundEffect - Optional. Whether to play a charge-related sound effect. Default is true.\n *\n * @returns The amount of charges that were actually granted. For example, if the active item was only one away from a full charge, but the `numCharges` provided to this function was 2, then this function would return 1.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addCharge(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", activeSlot: "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", numCharges?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", playSoundEffect?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "activeSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "numCharges",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "playSoundEffect",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "addCharge"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addCollectibleCostume:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addCollectibleCostume(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "addCollectibleCostume"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addConsoleCommand:function(1)",
          "docComment": "/**\n * Helper function to add a custom console command.\n *\n * The standard library comes with many existing console commands that are useful for debugging, but you can also add your own commands that are useful for your particular mod. It's easier to add commands to the existing command system than to add your own logic manually to the `EXECUTE_CMD` callback.\n *\n * Before using this function, you must first run the `enableExtraConsoleCommands` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addConsoleCommand(commandName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", commandFunction: "
            },
            {
              "kind": "Content",
              "text": "(params: string) => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "commandFunction",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "addConsoleCommand"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addFlag:function(1)",
          "docComment": "/**\n * Helper function to add a bit flag to an existing set of bit flags.\n *\n * This is a variadic function, so pass as many flags as you want to add.\n *\n * Example 1:\n * ```ts\n * // Give the player spectral tears\n * const player = Isaac.GetPlayer();\n * player.TearFlags = addFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL);\n * ```\n *\n * Example 2:\n * ```ts\n * // Give the player spectral and homing tears\n * const player = Isaac.GetPlayer();\n * player.TearFlags = addFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL, TearFlags.TEAR_HOMING);\n * ```\n *\n * @param flags - The existing set of bit flags.\n *\n * @param flagsToAdd - One or more bit flags to add, each as a separate argument.\n *\n * @returns The combined bit flags.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addFlag<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(flags: "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", ...flagsToAdd: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "flagsToAdd",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "addFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addPlayerHealthType:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addPlayerHealthType(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", healthType: "
            },
            {
              "kind": "Reference",
              "text": "HealthType",
              "canonicalReference": "isaacscript-common!HealthType:enum"
            },
            {
              "kind": "Content",
              "text": ", numHearts: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "healthType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "numHearts",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "addPlayerHealthType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addRoomClearCharge:function(1)",
          "docComment": "/**\n * Helper function to add a charge to a player's active item(s), emulating what happens when a room is cleared.\n *\n * This function will take the following things into account: - 2x2 rooms and L rooms granting a double charge - The Battery - AAA Battery\n *\n * @param player - The player to grant the charges to.\n *\n * @param bigRoomDoubleCharge - Optional. If set to false, it will treat the current room as a 1x1 room for the purposes of calculating how much charge to grant. Default is true.\n *\n * @param playSoundEffect - Optional. Whether to play a charge-related sound effect. Default is true.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addRoomClearCharge(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", bigRoomDoubleCharge?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", playSoundEffect?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "bigRoomDoubleCharge",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "playSoundEffect",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "addRoomClearCharge"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addRoomClearCharges:function(1)",
          "docComment": "/**\n * Helper function to add a charge to every player's active item, emulating what happens when a room is cleared.\n *\n * This function will take the following things into account: - L rooms and 2x2 rooms granting a double charge - The Battery - AAA Battery\n *\n * @param ignoreBigRoomDoubleCharge - Optional. If set to true, it will treat the current room as a 1x1 room for the purposes of calculating how much charge to grant. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addRoomClearCharges(ignoreBigRoomDoubleCharge?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ignoreBigRoomDoubleCharge",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "addRoomClearCharges"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addRoomClearChargeToSlot:function(1)",
          "docComment": "/**\n * Helper function to add a charge to one of a player's active items, emulating what happens when a room is cleared.\n *\n * This function will take the following things into account: - L rooms and 2x2 rooms granting a double charge - The Battery - AAA Battery\n *\n * @param player - The player to grant the charges to.\n *\n * @param activeSlot - The active item slot to grant the charges to.\n *\n * @param bigRoomDoubleCharge - Optional. If set to false, it will treat the current room as a 1x1 room for the purposes of calculating how much charge to grant. Default is true.\n *\n * @param playSoundEffect - Optional. Whether to play a charge-related sound effect. Default is true.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addRoomClearChargeToSlot(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", activeSlot: "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", bigRoomDoubleCharge?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", playSoundEffect?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "activeSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "bigRoomDoubleCharge",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "playSoundEffect",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "addRoomClearChargeToSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addSetsToSet:function(1)",
          "docComment": "/**\n * Helper function to add all of the values in one set to another set. The first set passed will be modified in place.\n *\n * This function is variadic, meaning that you can specify N sets to add to the first set.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addSetsToSet<T>(mainSet: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", ...setsToAdd: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mainSet",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "setsToAdd",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "addSetsToSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addStat:function(1)",
          "docComment": "/**\n * Helper function to add a stat to a player based on the `CacheFlag` provided. Call this function from the `EVALUATE_CACHE` callback.\n *\n * Note that for `CacheFlag.FIRE_DELAY`, the \"amount\" argument will be interpreted as the tear stat to add (and not the amount to mutate `EntityPlayer.MaxFireDelay` by).\n *\n * This function supports the following cache flags: - CacheFlag.DAMAGE (1 << 0) - CacheFlag.FIRE_DELAY (1 << 1) - CacheFlag.SHOT_SPEED (1 << 2) - CacheFlag.RANGE (1 << 3) - CacheFlag.SPEED (1 << 4) - CacheFlag.LUCK (1 << 10)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addStat(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": ", amount: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "amount",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "addStat"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addTearsStat:function(1)",
          "docComment": "/**\n * - Converts the specified amount of tears stat into the format of `EntityPlayer.MaxFireDelay` and adds it to the player. - This function should only be used inside the `EVALUATE_CACHE` callback. - In this context, the \"tears stat\" represents what is shown on the in-game stat UI.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addTearsStat(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", tearsStat: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "tearsStat",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "addTearsStat"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!addTrinketCostume:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addTrinketCostume(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "addTrinketCostume"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!ALL_DISPLAY_FLAGS:var",
          "docComment": "/**\n * The combination of the following flags: - `DisplayFlag.VISIBLE` (1 << 0) - `DisplayFlag.SHADOW` (1 << 1) - `DisplayFlag.SHOW_ICON` (1 << 2)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ALL_DISPLAY_FLAGS: "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<number & {\n    readonly __bitFlagBrand: symbol;\n} & {\n    readonly __displayFlagBrand: symbol;\n}>"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ALL_DISPLAY_FLAGS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!AmbushType:enum",
          "docComment": "/**\n * This is used by the `POST_AMBUSH_STARTED` and `POST_AMBUSH_FINISHED` custom callbacks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum AmbushType "
            }
          ],
          "releaseTag": "Public",
          "name": "AmbushType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!AmbushType.BOSS_RUSH:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BOSS_RUSH = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BOSS_RUSH"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!AmbushType.CHALLENGE_ROOM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CHALLENGE_ROOM = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CHALLENGE_ROOM"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!angleToDirection:function(1)",
          "docComment": "/**\n * Helper function to convert the degrees of an angle to the `Direction` enum.\n *\n * Note that this function considers 0 degrees to be pointing to the right, which is unusual because 0 normally corresponds to up. (This corresponds to how the `Vector.GetAngleDegrees` method works.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function angleToDirection(angleDegrees: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "angleDegrees",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "angleToDirection"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!AnyEntity:type",
          "docComment": "/**\n * A type union that matches `Entity`, `EntityBomb`, `EntityEffect`, and so on.\n *\n * This is useful for building generic functions that should accept any kind of entity.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyEntity = "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityBomb:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityKnife",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityKnife:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityLaser",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityLaser:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EntityTear",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityTear:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyEntity",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 22
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!anyEntityCloserThan:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyEntityCloserThan(entities: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", distance: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "distance",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "anyEntityCloserThan"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!AnyGridEntity:type",
          "docComment": "/**\n * A type union that matches `GridEntity`, `GridEntityDoor`, `GridEntityPit`, and so on.\n *\n * This is useful for building generic functions that should accept any kind of grid entity.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AnyGridEntity = "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPit",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPit:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPoop:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPressurePlate",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPressurePlate:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntityRock",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityRock:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntitySpikes",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntitySpikes:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntityTNT",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityTNT:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AnyGridEntity",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!anyPlayerCloserThan:function(1)",
          "docComment": "/**\n * Iterates over all players and checks if any player is close enough to the specified position.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyPlayerCloserThan(position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", distance: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "distance",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "anyPlayerCloserThan"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!anyPlayerHasCollectible:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyPlayerHasCollectible(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "anyPlayerHasCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!anyPlayerHasTrinket:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyPlayerHasTrinket(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "anyPlayerHasTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!anyPlayerIs:function(1)",
          "docComment": "/**\n * Helper function to determine if the given character is present.\n *\n * This function is variadic, meaning that you can supply as many characters as you want to check for. Returns true if any of the characters supplied are present.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyPlayerIs(...matchingCharacters: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "matchingCharacters",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "anyPlayerIs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!anyPlayerUsingPony:function(1)",
          "docComment": "/**\n * Helper function to see if any player is under the effects of A Pony or White Pony charge. Detecting this is difficult, as the temporary effect will disappear upon entering a new room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyPlayerUsingPony(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "anyPlayerUsingPony"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayEquals:function(1)",
          "docComment": "/**\n * Helper function for determining if two arrays contain the exact same elements. Note that this only performs a shallow comparison.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayEquals<T>(array1: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", array2: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "array2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayEquals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayRemove:function(1)",
          "docComment": "/**\n * Shallow copies and removes the specified element(s) from the array. Returns the copied array. If the specified element(s) are not found in the array, it will simply return a shallow copy of the array.\n *\n * This function is variadic, meaning that you can specify N arguments to remove N elements.\n *\n * If there is more than one matching element in the array, this function will only remove the first matching element. If you want to remove all of the elements, use the `arrayRemoveAll` function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayRemove<T>(originalArray: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", ...elementsToRemove: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "originalArray",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "elementsToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayRemove"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayRemoveAll:function(1)",
          "docComment": "/**\n * Shallow copies and removes the specified element(s) from the array. Returns the copied array. If the specified element(s) are not found in the array, it will simply return a shallow copy of the array.\n *\n * This function is variadic, meaning that you can specify N arguments to remove N elements.\n *\n * If there is more than one matching element in the array, this function will remove every matching element. If you want to only remove the first matching element, use the `arrayRemove` function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayRemoveAll<T>(originalArray: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", ...elementsToRemove: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "originalArray",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "elementsToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayRemoveAll"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayRemoveAllInPlace:function(1)",
          "docComment": "/**\n * Removes all of the specified element(s) from the array. If the specified element(s) are not found in the array, this function will do nothing.\n *\n * This function is variadic, meaning that you can specify N arguments to remove N elements.\n *\n * If there is more than one matching element in the array, this function will remove every matching element. If you want to only remove the first matching element, use the `arrayRemoveInPlace` function instead.\n *\n * @returns True if one or more elements were removed, false otherwise.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayRemoveAllInPlace<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", ...elementsToRemove: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "elementsToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayRemoveAllInPlace"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayRemoveIndex:function(1)",
          "docComment": "/**\n * Shallow copies and removes the elements at the specified indexes from the array. Returns the copied array. If the specified indexes are not found in the array, it will simply return a shallow copy of the array.\n *\n * This function is variadic, meaning that you can specify N arguments to remove N elements.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayRemoveIndex<T>(originalArray: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", ...indexesToRemove: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "originalArray",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "indexesToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayRemoveIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayRemoveIndexInPlace:function(1)",
          "docComment": "/**\n * Removes the elements at the specified indexes from the array. If the specified indexes are not found in the array, this function will do nothing. Returns true if one or more elements were removed.\n *\n * This function is variadic, meaning that you can specify N arguments to remove N elements.\n *\n * @returns Whether or not any array elements were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayRemoveIndexInPlace<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", ...indexesToRemove: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "indexesToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayRemoveIndexInPlace"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayRemoveInPlace:function(1)",
          "docComment": "/**\n * Removes the specified element(s) from the array. If the specified element(s) are not found in the array, this function will do nothing.\n *\n * This function is variadic, meaning that you can specify N arguments to remove N elements.\n *\n * If there is more than one matching element in the array, this function will only remove the first matching element. If you want to remove all of the elements, use the `arrayRemoveAllInPlace` function instead.\n *\n * @returns True if one or more elements were removed, false otherwise.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayRemoveInPlace<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", ...elementsToRemove: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "elementsToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayRemoveInPlace"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayToBitFlags:function(1)",
          "docComment": "/**\n * Helper function to convert a set of flags to a single `BitFlags` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayToBitFlags<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(array: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayToBitFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!arrayToString:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayToString<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayToString"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asCard:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `Card`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asCard(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asCollectibleType:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `CollectibleType`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asCollectibleType(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asCollectibleType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asLevelStage:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `LevelStage`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asLevelStage(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asLevelStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asNpcState:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `NpcState`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asNpcState(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "NpcState",
              "canonicalReference": "isaac-typescript-definitions!NpcState:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asNpcState"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asNumber:function(1)",
          "docComment": "/**\n * Helper function to safely cast an enum to a `number`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asNumber(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asPillColor:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `PillColor`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asPillColor(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asPillColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asPillEffect:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `PillEffect`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asPillEffect(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asPillEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asPlayerType:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `PlayerType`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asPlayerType(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asPlayerType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asString:function(1)",
          "docComment": "/**\n * Helper function to safely cast an enum to a `string`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asString(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asString"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!asTrinketType:function(1)",
          "docComment": "/**\n * Helper function to safely cast a `number` to a `TrinketType`. (This is better than using the `as` TypeScript keyword to do a type assertion, since that can obfuscate compiler errors. )\n *\n * This is useful to satisfy the \"isaacscript/strict-enums\" ESLint rule.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function asTrinketType(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "asTrinketType"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!AZAZEL_DEFAULT_BRIMSTONE_DISTANCE:var",
          "docComment": "/**\n * The distance of the laser when Azazel does not have any range up items yet. For more info, see the documentation for the `getAzazelBrimstoneDistance` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AZAZEL_DEFAULT_BRIMSTONE_DISTANCE = "
            },
            {
              "kind": "Content",
              "text": "75.125"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "AZAZEL_DEFAULT_BRIMSTONE_DISTANCE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!benchmark:function(1)",
          "docComment": "/**\n * Helper function to benchmark the performance of a function.\n *\n * This function is variadic, which means that you can supply as many as you want to benchmark.\n *\n * @returns An array containing the average time in milliseconds for each function. (This will also be printed to the log.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function benchmark(numTrials: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", ...functions: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<() => void>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "numTrials",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "functions",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "benchmark"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!bitFlags:function(1)",
          "docComment": "/**\n * Helper function for casting a flag enum value to a `BitFlags` object.\n *\n * This is useful because the compiler will prevent you from assigning a specific flag to a `BitFlags` field. (It does this to ensure type safety, since `BitFlags` can represent a zero value or a composition of N flags.)\n *\n * For example:\n * ```ts\n * player.TearFlags = bitFlags(TearFlag.SPECTRAL);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function bitFlags<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(flag: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "flag",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "bitFlags"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!BLIND_ITEM_PNG_PATH:var",
          "docComment": "/**\n * The path to the png file for collectible items during Curse of the Blind, making them appear with a red question mark.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "BLIND_ITEM_PNG_PATH = "
            },
            {
              "kind": "Content",
              "text": "\"gfx/items/collectibles/questionmark.png\""
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "BLIND_ITEM_PNG_PATH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!BOMB_EXPLODE_FRAME:var",
          "docComment": "/**\n * Bombs explode when their frame count is equal to this value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "BOMB_EXPLODE_FRAME = "
            },
            {
              "kind": "Content",
              "text": "45"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "BOMB_EXPLODE_FRAME",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!calculateStageType:function(1)",
          "docComment": "/**\n * Helper function that calculates what the stage type should be for the provided stage. This emulates what the game's internal code does.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function calculateStageType(stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "calculateStageType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!calculateStageTypeRepentance:function(1)",
          "docComment": "/**\n * Helper function that calculates what the Repentance stage type should be for the provided stage. This emulates what the game's internal code does.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function calculateStageTypeRepentance(stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "calculateStageTypeRepentance"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!canPlayerCrushRocks:function(1)",
          "docComment": "/**\n * Helper function to determine if a player will destroy a rock/pot/skull if they walk over it.\n *\n * The following situations allow for this to be true: - the player has Leo (collectible 302) - the player has Thunder Thighs (collectible 314) - the player is under the effects of Mega Mush (collectible 625) - the player has Stompy (transformation 13)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function canPlayerCrushRocks(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "canPlayerCrushRocks"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!capitalizeFirstLetter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function capitalizeFirstLetter(string: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "string",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "capitalizeFirstLetter"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!CARD_MAP:var",
          "docComment": "/**\n * Maps card names to card sub-types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CARD_MAP: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CARD_MAP",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!changeRoom:function(1)",
          "docComment": "/**\n * Helper function for quickly switching to a new room without playing a particular animation. Use this helper function over invoking the `Game.ChangeRoom` method directly to ensure that you do not forget to set the `LeaveDoor` field and to prevent crashing on invalid room grid indexes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function changeRoom(roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "changeRoom"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!CHARACTER_MAP:var",
          "docComment": "/**\n * Maps character names to character sub-types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CHARACTER_MAP: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CHARACTER_MAP",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!characterCanHaveRedHearts:function(1)",
          "docComment": "/**\n * Helper function to determine if the given character can have red heart containers. Returns true for characters like Isaac, Magdalene, or Cain. Returns true for Keeper and Tainted Keeper, even though coin containers are not technically the same as red heart containers. Returns false for characters like Blue Baby. Returns false for The Lost and Tainted Lost.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function characterCanHaveRedHearts(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "characterCanHaveRedHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!characterCanHaveSoulHearts:function(1)",
          "docComment": "/**\n * Helper function to determine if the given character can have soul hearts. Returns true for characters like Isaac, Magdalene, or Cain. Returns false for characters like Bethany. Returns false for The Lost and Tainted Lost.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function characterCanHaveSoulHearts(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "characterCanHaveSoulHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!characterCanTakeFreeDevilDeals:function(1)",
          "docComment": "/**\n * Helper function for determining whether the given character can take free Devil Deals. (e.g. The Lost, Tainted Lost, etc.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function characterCanTakeFreeDevilDeals(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "characterCanTakeFreeDevilDeals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!characterGetsBlackHeartFromEternalHeart:function(1)",
          "docComment": "/**\n * Normally, characters get a red heart container upon reaching a new floor with an eternal heart, but some characters grant a black heart instead. Returns true for Dark Judas and Tainted Judas. Otherwise, returns false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function characterGetsBlackHeartFromEternalHeart(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "characterGetsBlackHeartFromEternalHeart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!characterStartsWithActiveItem:function(1)",
          "docComment": "/**\n * Helper function to determine if the specified character starts with an active item.\n *\n * For the purposes of this function, the save file is considered to be fully unlocked (e.g. Isaac is considered to starts with the D6, but this is not the case on a brand new save file).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function characterStartsWithActiveItem(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "characterStartsWithActiveItem"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!ChargeBarSprites:interface",
          "docComment": "/**\n * A collection of the four sprites necessary in order to render a charge bar.\n *\n * This is used in the `newChargeBarSprites` and related helper functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ChargeBarSprites "
            }
          ],
          "releaseTag": "Public",
          "name": "ChargeBarSprites",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!ChargeBarSprites#back:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "back: "
                },
                {
                  "kind": "Reference",
                  "text": "Sprite",
                  "canonicalReference": "!Sprite:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "back",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!ChargeBarSprites#lines:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lines: "
                },
                {
                  "kind": "Reference",
                  "text": "Sprite",
                  "canonicalReference": "!Sprite:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!ChargeBarSprites#maxCharges:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxCharges: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxCharges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!ChargeBarSprites#meter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meter: "
                },
                {
                  "kind": "Reference",
                  "text": "Sprite",
                  "canonicalReference": "!Sprite:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "meter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!ChargeBarSprites#meterBattery:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "meterBattery: "
                },
                {
                  "kind": "Reference",
                  "text": "Sprite",
                  "canonicalReference": "!Sprite:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "meterBattery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!checkFamiliar:function(1)",
          "docComment": "/**\n * Helper function to add and remove familiars based on a target amount that you specify.\n *\n * This is a convenience wrapper around the `EntityPlayer.CheckFamiliar` method. Use this helper function instead so that you do not have to retrieve the `ItemConfigItem` and so that you do not specify an incorrect RNG object. (The vanilla method is bugged in that it does not increment the RNG object; see the documentation of the method for more details.)\n *\n * This function is meant to be called in the `EVALUATE_CACHE` callback (when the cache flag is equal to `CacheFlag.FAMILIARS`).\n *\n * Note that this function is only meant to be used in special circumstances where the familiar count is completely custom and does not correspond to the amount of collectibles. For the general case, use the `checkFamiliarFromCollectibles` helper function instead.\n *\n * Note that this will spawn familiars with a completely random `InitSeed`. When calculating random events for this familiar, you should use a data structure that maps familiar `InitSeed` to RNG objects that are initialized based on the seed from `EntityPlayer.GetCollectibleRNG(collectibleType)`.\n *\n * @param player - The player that owns the familiars.\n *\n * @param collectibleType - The collectible type of the collectible associated with this familiar.\n *\n * @param targetCount - The number of familiars that should exist. This function will add or remove familiars until it matches the target count.\n *\n * @param familiarVariant - The variant of the familiar to spawn or remove.\n *\n * @param familiarSubType - Optional. The sub-type of the familiar to spawn or remove. If not specified, it will search for existing familiars of all sub-types, and spawn new familiars with a sub-type of 0.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function checkFamiliar(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", targetCount: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", familiarVariant: "
            },
            {
              "kind": "Reference",
              "text": "FamiliarVariant",
              "canonicalReference": "isaac-typescript-definitions!FamiliarVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", familiarSubType?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "targetCount",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "familiarVariant",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "familiarSubType",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "checkFamiliar"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!checkFamiliarFromCollectibles:function(1)",
          "docComment": "/**\n * Helper function to add and remove familiars based on the amount of associated collectibles that a player has.\n *\n * Use this helper function instead of invoking the `EntityPlayer.CheckFamiliar` method directly so that the target count is handled automatically.\n *\n * This function is meant to be called in the `EVALUATE_CACHE` callback (when the cache flag is equal to `CacheFlag.FAMILIARS`).\n *\n * Use this function when the amount of familiars should be equal to the amount of associated collectibles that the player has (plus any extras from having used Box of Friends or Monster Manual). If you instead need to have a custom amount of familiars, use the `checkFamiliars` function instead.\n *\n * Note that this will spawn familiars with a completely random `InitSeed`. When calculating random events for this familiar, you should use a data structure that maps familiar `InitSeed` to RNG objects that are initialized based on the seed from `EntityPlayer.GetCollectibleRNG(collectibleType)`.\n *\n * @param player - The player that owns the familiars and collectibles.\n *\n * @param collectibleType - The collectible type of the collectible associated with this familiar.\n *\n * @param familiarVariant - The variant of the familiar to spawn or remove.\n *\n * @param familiarSubType - Optional. The sub-type of the familiar to spawn or remove. If not specified, it will search for existing familiars of all sub-types, and spawn new familiars with a sub-type of 0.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function checkFamiliarFromCollectibles(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", familiarVariant: "
            },
            {
              "kind": "Reference",
              "text": "FamiliarVariant",
              "canonicalReference": "isaac-typescript-definitions!FamiliarVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", familiarSubType?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "familiarVariant",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "familiarSubType",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "checkFamiliarFromCollectibles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!clamp:function(1)",
          "docComment": "/**\n * Helper function to normalize an integer.\n *\n * - If `x` is less than `min`, then it will be clamped to `min`. - If `x` is greater than `max`, then it will be clamped to `max`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clamp(x: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", min: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", max: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "clamp"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!clearCollectibleSprite:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clearCollectibleSprite(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "clearCollectibleSprite"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!clearFloorDisplayFlags:function(1)",
          "docComment": "/**\n * Helper function to set the value of `DisplayFlag` for every room on the floor to 0.\n *\n * This function automatically calls the `Level.UpdateVisibility` after setting the flags so that the changes will be immediately visible.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clearFloorDisplayFlags(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "clearFloorDisplayFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!clearSprite:function(1)",
          "docComment": "/**\n * Helper function to clear all layers or specific layers from a sprite.\n *\n * This function is variadic, so pass as many layer IDs as you want to clear. If no specific layers are passed, it will clear every layer.\n *\n * Since there is no official API method to \"clear\" a sprite, we can work around it by setting the spritesheet to a non-existent or completely transparent file. If the path to the spritesheet does not exist, then this function might cause spurious errors to appear in the \"log.txt file\". To silence these errors, create a transparent 1 pixel PNG file in your mod's resources folder at the path corresponding to the \"EMPTY_PNG_PATH\" constant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clearSprite(sprite: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": ", ...layerIDs: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sprite",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "layerIDs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "clearSprite"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!clearTable:function(1)",
          "docComment": "/**\n * In a `Map`, you can use the `clear` method to delete every element. However, in a `LuaMap`, the `clear` method does not exist. Use this helper function as a drop-in replacement for this.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clearTable(luaMap: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "luaMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "clearTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!closeAllDoors:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function closeAllDoors(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "closeAllDoors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!closeDoorFast:function(1)",
          "docComment": "/**\n * Use this instead of the `GridEntityDoor.Close` method if you want the door to immediately close without an animation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function closeDoorFast(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "closeDoorFast"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!COLLECTIBLE_INITIAL_WAIT:var",
          "docComment": "/**\n * This is the initial value of the `EntityPickup.Wait` field after a collectible is spawned.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COLLECTIBLE_INITIAL_WAIT = "
            },
            {
              "kind": "Content",
              "text": "20"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "COLLECTIBLE_INITIAL_WAIT",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!collectibleHasCacheFlag:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function collectibleHasCacheFlag(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "collectibleHasCacheFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!collectibleHasTag:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function collectibleHasTag(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", tag: "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigTag",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigTag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "tag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "collectibleHasTag"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!CollectibleIndex:type",
          "docComment": "/**\n * `CollectibleIndex` is a specific type of string that represents a unique identifier for a collectible. Mods can signify that data structures handle collectibles by using this type.\n *\n * For more information, see the documentation for the `getCollectibleIndex` function.\n *\n * For example:\n * ```ts\n * const collectiblesNameMap = new Map<CollectibleIndex, string>();\n * ```\n *\n * This type is branded for extra type safety.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CollectibleIndex = "
            },
            {
              "kind": "Content",
              "text": "string & {\n    readonly __collectibleIndexBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CollectibleIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!collectibleSpriteEquals:function(1)",
          "docComment": "/**\n * Helper function to check if two collectible sprites have the same sprite sheet loaded.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function collectibleSpriteEquals(sprite1: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": ", sprite2: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sprite1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "sprite2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "collectibleSpriteEquals"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!ColorDefault:var",
          "docComment": "/**\n * This is a safer version of the `Color.Default` constant. (Other mods can mutate `Color.Default`, so it is not safe to use.)\n *\n * If you need to mutate this, make a copy first with the `copyColor` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ColorDefault: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ColorDefault",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!colorEquals:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function colorEquals(color1: "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ", color2: "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "color2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "colorEquals"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!COLORS:var",
          "docComment": "/**\n * A collection of common colors that can be reused.\n *\n * Note that if you want to further modify these colors, you should copy them first with the `copyColor` function.\n *\n * The non-standard colors come from: https://htmlcolorcodes.com/color-names/\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "COLORS: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly Black: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Red: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Green: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Blue: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Yellow: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Pink: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Cyan: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly White: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Brown: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Gray: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Orange: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    readonly Purple: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "COLORS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 50
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!combineArrays:function(1)",
          "docComment": "/**\n * Helper function to combine two or more arrays. Returns a new array that is the composition of all of the specified arrays.\n *\n * This function is variadic, meaning that you can specify N arguments to combine N arrays. Note that this will only perform a shallow copy of the array elements.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function combineArrays<T>(...arrays: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T[] | readonly T[]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arrays",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "combineArrays"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!combineSets:function(1)",
          "docComment": "/**\n * Helper function to create a new set that is the composition of two or more sets.\n *\n * This function is variadic, meaning that you can specify N sets.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function combineSets<T>(...sets: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sets",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "combineSets"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!controllerToString:function(1)",
          "docComment": "/**\n * Helper function to get the enum name for the specified `Controller` value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function controllerToString(controller: "
            },
            {
              "kind": "Reference",
              "text": "Controller",
              "canonicalReference": "isaac-typescript-definitions!Controller:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "controller",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "controllerToString"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!ConversionHeartSubType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ConversionHeartSubType = "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType.SOUL",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType.SOUL:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType.BLACK",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType.BLACK:member"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ConversionHeartSubType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!convertBinaryToDecimal:function(1)",
          "docComment": "/**\n * Helper function to convert an array of bits to the resulting decimal number.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function convertBinaryToDecimal(bits: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bits",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "convertBinaryToDecimal"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!convertDecimalToBinary:function(1)",
          "docComment": "/**\n * Helper function to convert a number to an array of bits.\n *\n * @param number - The number to convert.\n *\n * @param minLength - Optional. Equal to the minimum amount of bits that should be returned. If the converted number of bits is below this number, 0's will be padded to the left side until the minimum length is met. Default is undefined (which will not cause any padding).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function convertDecimalToBinary(number: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", minLength?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "number",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "minLength",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "convertDecimalToBinary"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!convertXMLGridEntityType:function(1)",
          "docComment": "/**\n * Helper function to convert the grid entity type found in a room XML file to the corresponding grid entity type and variant normally used by the game. For example, a rock is represented as 1000.0 in a room XML file, but `GridEntityType.ROCK` is equal to 2.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function convertXMLGridEntityType(gridEntityXMLType: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityXMLType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityXMLType:enum"
            },
            {
              "kind": "Content",
              "text": ", gridEntityXMLVariant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "] | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityXMLType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridEntityXMLVariant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "convertXMLGridEntityType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyArray:function(1)",
          "docComment": "/**\n * Helper function to perform a shallow copy.\n *\n * @param oldArray - The array to copy.\n *\n * @param numElements - Optional. If specified, will only copy the first N elements. By default, the entire array will be copied.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyArray<T>(oldArray: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", numElements?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "oldArray",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "numElements",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "copyArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyBitSet128:function(1)",
          "docComment": "/**\n * Helper function to copy a `BitSet128` Isaac API class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyBitSet128(bitSet128: "
            },
            {
              "kind": "Reference",
              "text": "BitSet128",
              "canonicalReference": "!BitSet128:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitSet128",
              "canonicalReference": "!BitSet128:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bitSet128",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "copyBitSet128"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyColor:function(1)",
          "docComment": "/**\n * Helper function to copy a `Color` Isaac API class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyColor(color: "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "copyColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyIsaacAPIClass:function(1)",
          "docComment": "/**\n * Helper function to generically copy an Isaac API class without knowing what specific type of class it is. (This is used by the save data manager.)\n *\n * For the list of supported classes, see the `CopyableIsaacAPIClassType` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyIsaacAPIClass(isaacAPIClass: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "isaacAPIClass",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "copyIsaacAPIClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyKColor:function(1)",
          "docComment": "/**\n * Helper function to copy a `KColor` Isaac API class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyKColor(kColor: "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "kColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "copyKColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyMap:function(1)",
          "docComment": "/**\n * Helper function to copy a map. (You can also use a Map constructor to accomplish this task.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyMap<K, V>(oldMap: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "oldMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "copyMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyRNG:function(1)",
          "docComment": "/**\n * Helper function to copy an `RNG` Isaac API class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyRNG(rng: "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rng",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "copyRNG"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copySet:function(1)",
          "docComment": "/**\n * Helper function to copy a set. (You can also use a Set constructor to accomplish this task.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copySet<T>(oldSet: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "oldSet",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "copySet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyValuesToTable:function(1)",
          "docComment": "/**\n * Helper function to copy specific values from a object to a table.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyValuesToTable(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", keys: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", luaMap: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "luaMap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "copyValuesToTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!copyVector:function(1)",
          "docComment": "/**\n * Helper function to copy a `Vector` Isaac API class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function copyVector(vector: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "copyVector"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!Corner:interface",
          "docComment": "/**\n * An interface representing a corner in the room.\n *\n * This is used by the `getRoomShapeCorners` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Corner "
            }
          ],
          "releaseTag": "Public",
          "name": "Corner",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!Corner#position:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly position: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Vector",
                  "canonicalReference": "!Vector:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!Corner#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "CornerType",
                  "canonicalReference": "isaacscript-common!CornerType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!CornerType:enum",
          "docComment": "/**\n * This is used by the `getRoomShapeCorners` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum CornerType "
            }
          ],
          "releaseTag": "Public",
          "name": "CornerType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!CornerType.BOTTOM_LEFT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BOTTOM_LEFT = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BOTTOM_LEFT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!CornerType.BOTTOM_RIGHT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BOTTOM_RIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BOTTOM_RIGHT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!CornerType.TOP_LEFT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TOP_LEFT = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TOP_LEFT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!CornerType.TOP_RIGHT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TOP_RIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TOP_RIGHT"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!countEntities:function(1)",
          "docComment": "/**\n * Helper function to count the number of entities in room. Use this over the vanilla `Isaac.CountEntities` method to avoid having to specify a spawner and to handle ignoring charmed enemies.\n *\n * @param entityType - Optional. Default is -1, which matches every entity type.\n *\n * @param variant - Optional. Default is -1, which matches every variant.\n *\n * @param subType - Optional. Default is -1, which matches every sub-type.\n *\n * @param ignoreFriendly - Optional. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function countEntities(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ignoreFriendly?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "ignoreFriendly",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "countEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!countSetBits:function(1)",
          "docComment": "/**\n * Helper function to count the number of bits that are set to 1 in a binary representation of a number.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function countSetBits(n: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "countSetBits"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!CustomStageBossPoolEntry:interface",
          "docComment": "/**\n * An object that represents a possible boss for a custom stage.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CustomStageBossPoolEntry "
            }
          ],
          "releaseTag": "Public",
          "name": "CustomStageBossPoolEntry",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!CustomStageBossPoolEntry#name:member",
              "docComment": "/**\n * The name of the boss. This must correspond to the entry in \"entities2.xml\".\n *\n * Note that since there is no way to determine the corresponding `EntityType` of the boss during compile-time, you must specify the `EntityType` at run-time when your mod first loads using the `registerCustomBoss` helper function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!CustomStageBossPoolEntry#weight:member",
              "docComment": "/**\n * The weight of the boss. This is used when randomly selecting which boss to use for the floor. For example, use a value of 1 if you want this boss to be equally likely as any other boss, 0.5 if you want it to be half as likely, 2 if you want it to be twice as likely, and so on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "weight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "weight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!CustomStageLua:interface",
          "docComment": "/**\n * An object that represents a custom stage. The \"metadata.lua\" file contains an array of these objects. Besides the room metadata, the data is the same as what is specified inside the \"tsconfig.json\" file.\n *\n * The `CustomStage` interface extends this, adding more data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CustomStageLua extends "
            },
            {
              "kind": "Reference",
              "text": "CustomStageTSConfig",
              "canonicalReference": "isaacscript-common!CustomStageTSConfig:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CustomStageLua",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!CustomStageLua#roomsMetadata:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly roomsMetadata: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "CustomStageRoomMetadata",
                  "canonicalReference": "isaacscript-common!CustomStageRoomMetadata:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomsMetadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!CustomStageRoomMetadata:type",
          "docComment": "/**\n * Metadata about a custom stage room. Each custom stage object contains an array with metadata for each room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CustomStageRoomMetadata = "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    type: number;\n    variant: number;\n    subType: number;\n    shape: number;\n    doorSlotFlags: number;\n    weight: number;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomStageRoomMetadata",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!CustomStageShadow:type",
          "docComment": "/**\n * A description of a custom stage shadow. (In this context, \"shadows\" are the outlines from things on the roof. For example, in Basement, a shadow of a sideways V is used, among others.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CustomStageShadow = "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    pngPath: string;\n    color?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        r: number;\n        g: number;\n        b: number;\n        a: number;\n    }>;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomStageShadow",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!CustomStageTSConfig:type",
          "docComment": "/**\n * This is the format of a custom stage in the \"isaacscript\" section of the \"tsconfig.json\" file.\n *\n * The contents of this interface are used to create a \"tsconfig-isaacscript-section-schema.json\" schema with the \"ts-json-schema-generator\" library.\n *\n * The contents of this interface are validated at run-time against the schema using the Ajv library.\n *\n * The `CustomStageLua` interface extends this, adding room metadata.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CustomStageTSConfig = "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n    name: string;\n    xmlPath: string;\n    roomVariantPrefix: number;\n    baseStage?: number;\n    baseStageType?: number;\n    backdropPNGPaths?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        nFloors: readonly string[];\n        lFloors: readonly string[];\n        walls: readonly string[];\n        corners: readonly string[];\n    }>;\n    decorationsPNGPath?: string;\n    rocksPNGPath?: string;\n    pitsPNGPath?: string;\n    doorPNGPaths?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        normal?: string;\n        treasureRoom?: string;\n        bossRoom?: string;\n        secretRoom?: string;\n        arcade?: string;\n        curseRoom?: string;\n        normalChallengeRoom?: string;\n        bossChallengeRoom?: string;\n        devilRoom?: string;\n        angelRoom?: string;\n        bossRush?: string;\n        chestRoom?: string;\n    }>;\n    shadows?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        \"1x1\"?: readonly "
            },
            {
              "kind": "Reference",
              "text": "CustomStageShadow",
              "canonicalReference": "isaacscript-common!CustomStageShadow:type"
            },
            {
              "kind": "Content",
              "text": "[];\n        \"1x2\"?: readonly "
            },
            {
              "kind": "Reference",
              "text": "CustomStageShadow",
              "canonicalReference": "isaacscript-common!CustomStageShadow:type"
            },
            {
              "kind": "Content",
              "text": "[];\n        \"2x1\"?: readonly "
            },
            {
              "kind": "Reference",
              "text": "CustomStageShadow",
              "canonicalReference": "isaacscript-common!CustomStageShadow:type"
            },
            {
              "kind": "Content",
              "text": "[];\n        \"2x2\"?: readonly "
            },
            {
              "kind": "Reference",
              "text": "CustomStageShadow",
              "canonicalReference": "isaacscript-common!CustomStageShadow:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    }>;\n    bossPool?: readonly "
            },
            {
              "kind": "Reference",
              "text": "CustomStageBossPoolEntry",
              "canonicalReference": "isaacscript-common!CustomStageBossPoolEntry:interface"
            },
            {
              "kind": "Content",
              "text": "[];\n    versusScreen?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        backgroundColor?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n            r: number;\n            g: number;\n            b: number;\n            a: number;\n        }>;\n        dirtSpotColor?: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n            r: number;\n            g: number;\n            b: number;\n            a: number;\n        }>;\n    }>;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CustomStageTSConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 25
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deepCopy:function(1)",
          "docComment": "/**\n * `deepCopy` is a semi-generic deep cloner. It will recursively copy all of the values so that none of the nested references remain.\n *\n * It supports the following object types:\n *\n * - Primitives (i.e. strings, numbers, and booleans) - Basic TSTL objects / tables - TSTL `Map` - TSTL `Set` - TSTL classes - `DefaultMap` - Isaac `BitSet128` objects - Isaac `Color` objects - Isaac `KColor` objects - Isaac `RNG` objects - Isaac `Vector` objects\n *\n * It does not support: - objects with values of `null` (since that transpiles to `nil`) - other Isaac API objects such as `EntityPtr` (that have a type of \"userdata\")\n *\n * @param value - The primitive or object to copy.\n *\n * @param serializationType - Optional. Has 3 possible values. Can copy objects as-is, or can serialize objects to Lua tables, or can deserialize Lua tables to objects. Default is `SerializationType.NONE`.\n *\n * @param traversalDescription - Optional. Used to track the current key that we are operating on. Default is an empty string.\n *\n * @param insideMap - Optional. Tracks whether or not the deep copy function is in the process of recursively copying a TSTL Map. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepCopy(value: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", serializationType?: "
            },
            {
              "kind": "Reference",
              "text": "SerializationType",
              "canonicalReference": "isaacscript-common!SerializationType:enum"
            },
            {
              "kind": "Content",
              "text": ", traversalDescription?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", insideMap?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "serializationType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "traversalDescription",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "insideMap",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "deepCopy"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!DEFAULT_BASE_STAGE_TYPE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_BASE_STAGE_TYPE = "
            },
            {
              "kind": "Reference",
              "text": "StageType.ORIGINAL",
              "canonicalReference": "isaac-typescript-definitions!StageType.ORIGINAL:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_BASE_STAGE_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!DEFAULT_BASE_STAGE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_BASE_STAGE = "
            },
            {
              "kind": "Reference",
              "text": "LevelStage.BASEMENT_2",
              "canonicalReference": "isaac-typescript-definitions!LevelStage.BASEMENT_2:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_BASE_STAGE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!DEFAULT_ITEM_POOL_TYPE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_ITEM_POOL_TYPE = "
            },
            {
              "kind": "Reference",
              "text": "ItemPoolType.TREASURE",
              "canonicalReference": "isaac-typescript-definitions!ItemPoolType.TREASURE:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_ITEM_POOL_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "isaacscript-common!DefaultMap:class",
          "docComment": "/**\n * `DefaultMap` is a data structure that makes working with default values easier.\n *\n * It is a common pattern to look up a value in a `Map`, and then, if the value does not exist, set a default value for the key, and then return the default value. `DefaultMap` abstracts this operation away by providing the `getAndSetDefault` method.\n *\n * Using a `DefaultMap` is nice because it makes code more declarative, since you specify what the default value is alongside the types of the keys/values.\n *\n * When instantiating a new `DefaultMap`, you must specify default value as the first argument. (The default value is the initial value that will be assigned to every new entry in the `getAndSetDefault` method.) For example:\n * ```ts\n * // Initializes a new empty DefaultMap with a default value of \"foo\".\n * const defaultMapWithString = new DefaultMap<string, string>(\"foo\");\n *\n * const value = defaultMapWithString.getAndSetDefault(\"bar\");\n * // value is now \"foo\" and an entry for \"bar\" is now set.\n * ```\n *\n * Sometimes, instead of having a static initial value for every entry in the map, you will want a dynamic initial value that is contingent upon the key or some other variable. In these cases, you can instead specify that the `DefaultMap` should run a function that will return the initial value. (This is referred to as a \"factory function\".) For example:\n * ```ts\n * // Initializes a new empty DefaultMap with a default value based on \"someGlobalVariable\".\n * const factoryFunction = () => someGlobalVariable ? 0 : 1;\n * const defaultMapWithFactoryFunction = new DefaultMap<string, string>(factoryFunction);\n * ```\n *\n * Note that in TypeScript and Lua, booleans, numbers, and strings are \"passed by value\". This means that when the `DefaultMap` creates a new entry, if the default value is one of these 3 types, the values will be copied. On the other hand, arrays and maps and other complex data structures are \"passed by reference\". This means that when the `DefaultMap` creates a new entry, if the default value is an array, then it would not be copied. Instead, the same shared array would be assigned to every entry. Thus, to solve this problem, any variable that is passed by reference must be created using a factory function to ensure that each copy is unique. For example:\n * ```ts\n * // Initializes a new empty DefaultMap with a default value of a new empty array.\n * const factoryFunction = () => [];\n * const defaultMapWithArray = new DefaultMap<string, string[]>(factoryFunction);\n * ```\n *\n * In the previous two examples, the factory functions did not have any arguments. But you can also specify a factory function that takes one or more arguments:\n * ```ts\n * const factoryFunction = (arg: boolean) => arg ? 0 : 1;\n * const defaultMapWithArg = new DefaultMap<string, string, [arg: boolean]>(factoryFunction);\n * ```\n *\n * Similar to a normal `Map`, you can also include an initializer list in the constructor as the second argument:\n * ```ts\n * // Initializes a DefaultMap with a default value of \"foo\" and some initial values.\n * const defaultMapWithInitialValues = new DefaultMap<string, string>(\"foo\", [\n *   [\"a1\", \"a2\"],\n *   [\"b1\", \"b2\"],\n * ], );\n * ```\n *\n * Finally, note that `DefaultMap` has the following additional utility methods:\n *\n * - `getAndSetDefault` - The method that is called inside the overridden `get` method. In most cases, you can use the overridden `get` method instead of calling this function directly. However, if a factory function was provided during instantiation, and the factory function has one or more arguments, then you must call this method instead (and provide the corresponding arguments). - `getWithoutDefault` - Calls the original `Map.get` function (without setting the default value). - `getDefaultValue` - Returns the default value to be used for a new key. (If a factory function was provided during instantiation, this will execute the factory function.) - `getConstructorArg` - Helper method for cloning the map. Returns either the default value or the reference to the factory function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class DefaultMap<Key, Value, Args extends "
            },
            {
              "kind": "Content",
              "text": "unknown[] "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<Key, Value> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Key",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Value",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Args",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "DefaultMap",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "isaacscript-common!DefaultMap:constructor(1)",
              "docComment": "/**\n * See the main `DefaultMap` documentation: https://isaacscript.github.io/isaacscript-common/classes/classes_DefaultMap.DefaultMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(defaultValueOrFactoryFunction: "
                },
                {
                  "kind": "Content",
                  "text": "Value | "
                },
                {
                  "kind": "Reference",
                  "text": "FactoryFunction",
                  "canonicalReference": "isaacscript-common!FactoryFunction:type"
                },
                {
                  "kind": "Content",
                  "text": "<Value, Args>"
                },
                {
                  "kind": "Content",
                  "text": ", initializerArray?: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[Key, Value]>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "defaultValueOrFactoryFunction",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initializerArray",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!DefaultMap#getAndSetDefault:member(1)",
              "docComment": "/**\n * If the key exists, this will return the same thing as the normal `Map.get` method. Otherwise, it will set a default value for the provided key, and then return the default value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAndSetDefault(key: "
                },
                {
                  "kind": "Content",
                  "text": "Key"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "Args"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Value"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getAndSetDefault"
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!DefaultMap#getConstructorArg:member(1)",
              "docComment": "/**\n * Helper method for cloning the map. Returns either the default value or a reference to the factory function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getConstructorArg(): "
                },
                {
                  "kind": "Content",
                  "text": "Value | "
                },
                {
                  "kind": "Reference",
                  "text": "FactoryFunction",
                  "canonicalReference": "isaacscript-common!FactoryFunction:type"
                },
                {
                  "kind": "Content",
                  "text": "<Value, Args>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getConstructorArg"
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!DefaultMap#getDefaultValue:member(1)",
              "docComment": "/**\n * Returns the default value to be used for a new key. (If a factory function was provided during instantiation, this will execute the factory function.)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDefaultValue(...args: "
                },
                {
                  "kind": "Content",
                  "text": "Args"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Value"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getDefaultValue"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!defaultMapGetPlayer:function(1)",
          "docComment": "/**\n * Helper function to make using default maps with an index of `PlayerIndex` easier. Use this instead of the `DefaultMap.getAndSetDefault` method if you have a default map of this type.\n *\n * For example:\n * ```ts\n * const v = {\n *   run: {\n *     playersSpeedBoost: new DefaultMap<PlayerIndex, int>(0),\n *   },\n * };\n *\n * function evaluateCacheSpeed(player: EntityPlayer) {\n *   player.MoveSpeed = defaultMapGetPlayer(v.run.playersSpeedBoost, player);\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function defaultMapGetPlayer<V, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ">(map: "
            },
            {
              "kind": "Reference",
              "text": "DefaultMap",
              "canonicalReference": "isaacscript-common!DefaultMap:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ", V, A>"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", ...extraArgs: "
            },
            {
              "kind": "Content",
              "text": "A"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "V"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            },
            {
              "parameterName": "extraArgs",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "defaultMapGetPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!defaultMapSetPlayer:function(1)",
          "docComment": "/**\n * Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the `Map.set` method if you have a map of this type.\n *\n * Since `Map` and `DefaultMap` set values in the same way, this function is simply an alias for the `mapSetPlayer` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function defaultMapSetPlayer<V>(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ", V>"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "V"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "defaultMapSetPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deleteSetsFromSet:function(1)",
          "docComment": "/**\n * Helper function to delete all of the values in one set from another set. The first set passed will be modified in place.\n *\n * This function is variadic, meaning that you can specify N sets to remove from the first set.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deleteSetsFromSet<T>(mainSet: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", ...setsToRemove: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mainSet",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "setsToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deleteSetsFromSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deployJSONRoom:function(1)",
          "docComment": "/**\n * Helper function to deconstruct a vanilla room and set up a custom room in its place. Specifically, this will clear the current room of all entities and grid entities, and then spawn all of the entries and grid entities in the provided JSON room.\n *\n * This function is meant to be used in the `POST_NEW_ROOM` callback.\n *\n * For example:\n * ```ts\n *\n * import customRooms from \"./customRooms\";\n *\n * const firstJSONRoom = customRooms.rooms.room[0];\n * deployJSONRoom(firstJSONRoom);\n * ```\n *\n * @param jsonRoom - The JSON room to deploy. *\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param verbose - Optional. If specified, will write entries to the \"log.txt\" file that describe what the function is doing. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deployJSONRoom(jsonRoom: "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", verbose?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jsonRoom",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "verbose",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "deployJSONRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deployRandomJSONRoom:function(1)",
          "docComment": "/**\n * Helper function to deconstruct a vanilla room and set up a custom room in its place. Specifically, this will clear the current room of all entities and grid entities, and then spawn all of the entries and grid entities in one of the provided JSON rooms.\n *\n * This function is meant to be used in the `POST_NEW_ROOM` callback.\n *\n * Note that this function does not simply choose a random element in the provided array; it will properly account for each room weight using the algorithm from: https://stackoverflow.com/questions/1761626/weighted-random-numbers\n *\n * For example:\n * ```ts\n * import customRooms from \"./customRooms\";\n *\n * const jsonRooms = customRooms.rooms.room;\n * deployRandomJSONRoom(jsonRooms);\n * ```\n *\n * @param jsonRooms - An array of JSON rooms to randomly select from. In practice, this will be something like.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param verbose - Optional. If specified, will write entries to the \"log.txt\" file that describe what the function is doing. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deployRandomJSONRoom(jsonRooms: "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", verbose?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jsonRooms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "verbose",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "name": "deployRandomJSONRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deserializeBitSet128:function(1)",
          "docComment": "/**\n * Helper function to convert a `SerializedBitSet128` object to a normal `BitSet128` object. (This is used by the save data manager when reading data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deserializeBitSet128(bitSet128: "
            },
            {
              "kind": "Reference",
              "text": "SerializedBitSet128",
              "canonicalReference": "isaacscript-common!SerializedBitSet128:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitSet128",
              "canonicalReference": "!BitSet128:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bitSet128",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deserializeBitSet128"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deserializeColor:function(1)",
          "docComment": "/**\n * Helper function to convert a `SerializedColor` object to a normal `Color` object. (This is used by the save data manager when reading data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deserializeColor(color: "
            },
            {
              "kind": "Reference",
              "text": "SerializedColor",
              "canonicalReference": "isaacscript-common!SerializedColor:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deserializeColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deserializeIsaacAPIClass:function(1)",
          "docComment": "/**\n * Helper function to generically deserialize an Isaac API class without knowing what specific type of class it is. (This is used by the save data manager when reading data from the \"save#.dat\" file.)\n *\n * For the list of supported classes, see the `CopyableIsaacAPIClassType` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deserializeIsaacAPIClass(serializedIsaacAPIClass: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "serializedIsaacAPIClass",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deserializeIsaacAPIClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deserializeKColor:function(1)",
          "docComment": "/**\n * Helper function to convert a `SerializedKColor` object to a normal `KColor` object. (This is used by the save data manager when reading data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deserializeKColor(kColor: "
            },
            {
              "kind": "Reference",
              "text": "SerializedKColor",
              "canonicalReference": "isaacscript-common!SerializedKColor:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "kColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deserializeKColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deserializeRNG:function(1)",
          "docComment": "/**\n * Helper function to convert a `SerializedRNG` object to a normal `RNG` object. (This is used by the save data manager when reading data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deserializeRNG(rng: "
            },
            {
              "kind": "Reference",
              "text": "SerializedRNG",
              "canonicalReference": "isaacscript-common!SerializedRNG:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rng",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deserializeRNG"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!deserializeVector:function(1)",
          "docComment": "/**\n * Helper function to convert a `SerializedVector` object to a normal `RNG` object. (This is used by the save data manager when reading data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deserializeVector(vector: "
            },
            {
              "kind": "Reference",
              "text": "SerializedVector",
              "canonicalReference": "isaacscript-common!SerializedVector:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deserializeVector"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!DICE_FLOOR_TRIGGER_SQUARE_SIZE:var",
          "docComment": "/**\n * For `EntityType.EFFECT` (1000), `EffectVariant.DICE_FLOOR` (76)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DICE_FLOOR_TRIGGER_SQUARE_SIZE = "
            },
            {
              "kind": "Content",
              "text": "75"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DICE_FLOOR_TRIGGER_SQUARE_SIZE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!directionToDegrees:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function directionToDegrees(direction: "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "direction",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "directionToDegrees"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!directionToVector:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function directionToVector(direction: "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "direction",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "directionToVector"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!disableAllInputs:function(1)",
          "docComment": "/**\n * Helper function to disable all inputs. This is useful because `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.\n *\n * Use the `enableAllInputs` helper function to set things back to normal.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function disableAllInputs(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "disableAllInputs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!disableAllInputsExceptFor:function(1)",
          "docComment": "/**\n * Helper function to disable all inputs besides the ones provided. This is useful because `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.\n *\n * Use the `enableAllInputs` helper function to set things back to normal.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n *\n * @param whitelist - A set of ButtonActions to allow.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function disableAllInputsExceptFor(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", whitelist: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "whitelist",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "name": "disableAllInputsExceptFor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!disableAllSound:function(1)",
          "docComment": "/**\n * Helper function to disable all sound effects and music (by constantly musting them).\n *\n * Use the `enableAllSounds` helper function to set things back to normal.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function disableAllSound(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "disableAllSound"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!disableCustomStage:function(1)",
          "docComment": "/**\n * Helper function to disable the custom stage. This is typically called before taking the player to a vanilla floor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function disableCustomStage(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "disableCustomStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!disableFastReset:function(1)",
          "docComment": "/**\n * Disables the fast-reset feature. Only useful if you have previously called the `enableFastReset` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function disableFastReset(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "disableFastReset"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!disableMovementInputs:function(1)",
          "docComment": "/**\n * Helper function to disable only the inputs used for moving the character (or moving the cursor in the UI). This is useful because `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.\n *\n * Use the `enableAllInputs` helper function to set things back to normal.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function disableMovementInputs(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "disableMovementInputs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!disableShootingInputs:function(1)",
          "docComment": "/**\n * Helper function to disable only the inputs used for shooting tears. This is useful because `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.\n *\n * Use the `enableAllInputs` helper function to set things back to normal.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function disableShootingInputs(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "disableShootingInputs"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!DISTANCE_OF_GRID_TILE:var",
          "docComment": "/**\n * This is also the distance that a player spawns from the door that they enter a room from.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DISTANCE_OF_GRID_TILE = "
            },
            {
              "kind": "Content",
              "text": "40"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DISTANCE_OF_GRID_TILE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!doesEntityExist:function(1)",
          "docComment": "/**\n * Helper function to check if one or more of a specific kind of entity is present in the current room. It uses the `countEntities` helper function to determine this.\n *\n * @param entityType - Optional. Default is -1, which matches every entity type.\n *\n * @param variant - Optional. Default is -1, which matches every variant.\n *\n * @param subType - Optional. Default is -1, which matches every sub-type.\n *\n * @param ignoreFriendly - Optional. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function doesEntityExist(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ignoreFriendly?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "ignoreFriendly",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "doesEntityExist"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!doesPlayerHaveAllBlackHearts:function(1)",
          "docComment": "/**\n * Returns whether or not all of the player's soul-heart-type hearts are black hearts.\n *\n * Note that this function does not consider red heart containers.\n *\n * For example:\n *\n * - If the player has one black heart, this function would return true. - If the player has one soul heart and two black hearts, this function would return false. - If the player has no black hearts, this function will return false. - If the player has one red heart container and three black hearts, this function would return true.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function doesPlayerHaveAllBlackHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "doesPlayerHaveAllBlackHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!doesPlayerHaveAllSoulHearts:function(1)",
          "docComment": "/**\n * Returns whether or not all of the player's soul-heart-type hearts are soul hearts.\n *\n * Note that this function does not consider red heart containers.\n *\n * For example:\n *\n * - If the player has two soul hearts and one black heart, this function would return false. - If the player has no soul hearts, this function will return false. - If the player has one red heart container and three soul hearts, this function would return true.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function doesPlayerHaveAllSoulHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "doesPlayerHaveAllSoulHearts"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!DOOR_HITBOX_RADIUS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DOOR_HITBOX_RADIUS = "
            },
            {
              "kind": "Content",
              "text": "11"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DOOR_HITBOX_RADIUS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!doorSlotFlagToDoorSlot:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function doorSlotFlagToDoorSlot(doorSlotFlag: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlotFlag",
              "canonicalReference": "isaac-typescript-definitions!DoorSlotFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlotFlag",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "doorSlotFlagToDoorSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!doorSlotToDirection:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function doorSlotToDirection(doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "doorSlotToDirection"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!doorSlotToDoorSlotFlag:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function doorSlotToDoorSlotFlag(doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DoorSlotFlag",
              "canonicalReference": "isaac-typescript-definitions!DoorSlotFlag:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "doorSlotToDoorSlotFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInBack:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInBack(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInBack"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInBounce:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInBounce(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInBounce"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInCirc:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInCirc(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInCirc"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInCubic:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInCubic(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInCubic"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInElastic:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInElastic(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInElastic"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInExpo:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInExpo(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInExpo"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutBack:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutBack(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutBack"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutBounce:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutBounce(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutBounce"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutCirc:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutCirc(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutCirc"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutCubic:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutCubic(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutCubic"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutElastic:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutElastic(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutElastic"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutExpo:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutExpo(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutExpo"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutQuad:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutQuad(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutQuad"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutQuart:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutQuart(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutQuart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutQuint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutQuint(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutQuint"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInOutSine:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInOutSine(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInOutSine"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInQuad:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInQuad(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInQuad"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInQuart:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInQuart(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInQuart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInQuint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInQuint(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInQuint"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeInSine:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeInSine(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeInSine"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutBack:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutBack(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutBack"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutBounce:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutBounce(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutBounce"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutCirc:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutCirc(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutCirc"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutCubic:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutCubic(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutCubic"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutElastic:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutElastic(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutElastic"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutExpo:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutExpo(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutExpo"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutQuad:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutQuad(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutQuad"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutQuart:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutQuart(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutQuart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutQuint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutQuint(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutQuint"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!easeOutSine:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function easeOutSine(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "easeOutSine"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!EGGY_STATE_FRAME_OF_FINAL_SPIDER:var",
          "docComment": "/**\n * When Eggies take fatal damage, they go into NpcState.STATE_SUICIDE and spawn 14 Swarm Spiders while their StateFrame ticks upwards. The 14th spider appears when the StateFrame is at this value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EGGY_STATE_FRAME_OF_FINAL_SPIDER = "
            },
            {
              "kind": "Content",
              "text": "45"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "EGGY_STATE_FRAME_OF_FINAL_SPIDER",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!EMPTY_PNG_PATH:var",
          "docComment": "/**\n * A non-existent or completely transparent PNG file for use in clearing sprites. For more information, see the documentation for the `clearSprite` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "EMPTY_PNG_PATH = "
            },
            {
              "kind": "Content",
              "text": "\"gfx/none.png\""
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "EMPTY_PNG_PATH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!emptyArray:function(1)",
          "docComment": "/**\n * Helper function to remove all of the elements in an array in-place.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function emptyArray<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "emptyArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!emptyRoom:function(1)",
          "docComment": "/**\n * Helper function to remove all naturally spawning entities and grid entities from a room. Notably, this will not remove players (1), tears (2), familiars (3), lasers (7), knives (8), projectiles (9), blacklisted NPCs such as Dark Esau, charmed NPCs, friendly NPCs, persistent NPCs, most effects (1000), doors, and walls.\n *\n * @param fillWithDecorations - Optional. Set to true to fill every grid tile with an invisible decoration, which prevents vanilla entities in the room from respawning the next time that the player enters. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function emptyRoom(fillWithDecorations: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fillWithDecorations",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "emptyRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!enableAllInputs:function(1)",
          "docComment": "/**\n * Helper function to enable all inputs. Use this function to set things back to normal after having used one of the other helper functions to disable inputs.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableAllInputs(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "enableAllInputs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!enableAllInputsExceptFor:function(1)",
          "docComment": "/**\n * Helper function to enable all inputs besides the ones provided. This is useful because `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.\n *\n * Use the `enableAllInputs` helper function to set things back to normal.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n *\n * @param blacklist - A set of ButtonActions to disallow.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableAllInputsExceptFor(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", blacklist: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "blacklist",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "name": "enableAllInputsExceptFor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!enableAllSound:function(1)",
          "docComment": "/**\n * Helper function to stop muting all sound effects and music.\n *\n * Use this function to set things back to normal after having used `disableAllSounds`.\n *\n * @param key - The name of the mod feature that is requesting the enable/disable. This is needed so that multiple mod features can work in tandem.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableAllSound(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "enableAllSound"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!enableExtraConsoleCommands:function(1)",
          "docComment": "/**\n * Enables extra console commands which are useful for debugging. See [the docs](https://isaacscript.github.io/isaacscript-common/features/extraConsoleCommands_listCommands) for the specific commands that are added.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableExtraConsoleCommands(mod: "
            },
            {
              "kind": "Reference",
              "text": "ModUpgraded",
              "canonicalReference": "isaacscript-common!ModUpgraded:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mod",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "enableExtraConsoleCommands"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!enableFastReset:function(1)",
          "docComment": "/**\n * Enables the fast-reset feature, which allows you to restart the game instantaneously. If this behavior is desired, call this function once at the beginning of your mod.\n *\n * This is useful for debugging, when you are resetting the game often.\n *\n * You can disable the fast-reset feature with the `disableFastReset` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function enableFastReset(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "enableFastReset"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!erange:function(1)",
          "docComment": "/**\n * Helper function to return an array with the elements from start to end. It is inclusive at the start and exclusive at the end. (The \"e\" stands for exclusive.)\n *\n * If only one argument is specified, then it will assume that the start is 0.\n *\n * - For example, `erange(1, 3)` will return `[1, 2]`. - For example, `erange(2)` will return `[0, 1]`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function erange(start: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", end?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "start",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "end",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "erange"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!FactoryFunction:type",
          "docComment": "/**\n * A function that creates the default value for your `DefaultMap`. For example, if it was a `DefaultMap` containing maps, the factory function would be: `() => new Map()`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FactoryFunction<V, Args extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(...args: Args) => V"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FactoryFunction",
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Args",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!fillLevelWithRedRooms:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fillLevelWithRedRooms(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "fillLevelWithRedRooms"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!findFreePosition:function(1)",
          "docComment": "/**\n * Helper function to get a room position that is not overlapping with a grid entity, a heaven door, or a player. The `Room.FindFreePickupSpawnPosition` method will return locations that overlap with heaven doors and partially overlap with players, if the thing being spawned is bigger than a tile (like a Blood Donation Machine). Use this function instead if you want to account for those specific situations.\n *\n * @param startingPosition - The position to start searching from. If this position is not overlapping with anything, then it will be returned.\n *\n * @param avoidActiveEntities - Optional. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findFreePosition(startingPosition: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", avoidActiveEntities?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "startingPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "avoidActiveEntities",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "findFreePosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!fireProjectiles:function(1)",
          "docComment": "/**\n * Helper function to make an NPC fire one or more projectiles. Returns the fired projectile(s).\n *\n * Use this function instead of the `EntityNPC.FireProjectiles` method if you need to modify or access the `EntityProjectile` objects after they are fired, since this function returns the objects in an array.\n *\n * @param npc - The NPC to fire the projectile(s) from. You can also pass undefined if you do not want the projectile(s) to come from anything in particular.\n *\n * @param position - The staring position of the projectile(s).\n *\n * @param velocity - The starting velocity of the projectile(s).\n *\n * @param projectilesMode - Optional. The mode of the projectile(s). Default is `ProjectilesMode.ONE_PROJECTILE`.\n *\n * @param projectileParams - Optional. The parameters of the projectile(s). Default is `ProjectileParams()`.\n *\n * @returns The fired projectile(s).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fireProjectiles(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", projectilesMode?: "
            },
            {
              "kind": "Reference",
              "text": "ProjectilesMode",
              "canonicalReference": "isaac-typescript-definitions!ProjectilesMode:enum"
            },
            {
              "kind": "Content",
              "text": ", projectileParams?: "
            },
            {
              "kind": "Reference",
              "text": "ProjectileParams",
              "canonicalReference": "isaac-typescript-definitions!~__global.ProjectileParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "npc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "projectilesMode",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "projectileParams",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "name": "fireProjectiles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!fireProjectilesInCircle:function(1)",
          "docComment": "/**\n * Helper function to spawn projectiles in a circle around a position. Under the hood, this leverages `ProjectileMode.N_PROJECTILES_IN_CIRCLE`.\n *\n * @param npc - The NPC to fire the projectile(s) from. You can also pass undefined if you do not want the projectile(s) to come from anything in particular.\n *\n * @param position - The staring position of the projectile(s).\n *\n * @param speed - The speed of the projectile(s).\n *\n * @param numProjectiles - The amount of projectiles to spawn.\n *\n * @returns The fired projectile(s).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fireProjectilesInCircle(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", speed: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ", numProjectiles: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "npc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "speed",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "numProjectiles",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "fireProjectilesInCircle"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_CARD:var",
          "docComment": "/**\n * Equal to `Card.FOOL`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_CARD = "
            },
            {
              "kind": "Reference",
              "text": "Card.FOOL",
              "canonicalReference": "isaac-typescript-definitions!Card.FOOL:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_CARD",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_CHARACTER:var",
          "docComment": "/**\n * Equal to `PlayerType.ISAAC`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_CHARACTER = "
            },
            {
              "kind": "Reference",
              "text": "PlayerType.ISAAC",
              "canonicalReference": "isaac-typescript-definitions!PlayerType.ISAAC:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_CHARACTER",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_COLLECTIBLE_TYPE:var",
          "docComment": "/**\n * Equal to `CollectibleType.SAD_ONION`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_COLLECTIBLE_TYPE = "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType.SAD_ONION",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType.SAD_ONION:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_COLLECTIBLE_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_GLITCHED_COLLECTIBLE_TYPE:var",
          "docComment": "/**\n * The random items that appear when the player has TMTRAINER are generated on the fly as they are encountered by the player. The first TMTRAINER item takes the final possible 32 bit number. The second TMTRAINER item subtracts one from that, and so on.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_GLITCHED_COLLECTIBLE_TYPE: "
            },
            {
              "kind": "Content",
              "text": "import(\"isaac-typescript-definitions\")."
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_GLITCHED_COLLECTIBLE_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_HORSE_PILL_COLOR:var",
          "docComment": "/**\n * Equal to `PillColor.HORSE_BLUE_BLUE`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_HORSE_PILL_COLOR = "
            },
            {
              "kind": "Reference",
              "text": "PillColor.HORSE_BLUE_BLUE",
              "canonicalReference": "isaac-typescript-definitions!PillColor.HORSE_BLUE_BLUE:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_HORSE_PILL_COLOR",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_MODDED_CARD:var",
          "docComment": "/**\n * If there are no modded cards, this constant will represent a card that does not exist.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_MODDED_CARD: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_MODDED_CARD",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_MODDED_CHARACTER:var",
          "docComment": "/**\n * If there are no modded characters, this constant will represent a character that does not exist. (There is no way to determine the amount of modded characters at run-time, since there is no exposed player config.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_MODDED_CHARACTER: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_MODDED_CHARACTER",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_MODDED_COLLECTIBLE_TYPE:var",
          "docComment": "/**\n * If there are no modded collectibles, this constant will represent a collectible type that does not exist.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_MODDED_COLLECTIBLE_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_MODDED_COLLECTIBLE_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_MODDED_PILL_EFFECT:var",
          "docComment": "/**\n * If there are no modded pill effects, this constant will represent a pill effect that does not exist.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_MODDED_PILL_EFFECT: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_MODDED_PILL_EFFECT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_MODDED_TRINKET_TYPE:var",
          "docComment": "/**\n * If there are no modded trinkets, this constant will represent a trinket type that does not exist.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_MODDED_TRINKET_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_MODDED_TRINKET_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_PILL_COLOR:var",
          "docComment": "/**\n * Equal to `PillColor.BLUE_BLUE`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_PILL_COLOR = "
            },
            {
              "kind": "Reference",
              "text": "PillColor.BLUE_BLUE",
              "canonicalReference": "isaac-typescript-definitions!PillColor.BLUE_BLUE:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_PILL_COLOR",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_PILL_EFFECT:var",
          "docComment": "/**\n * Equal to `PillEffect.BAD_GAS`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_PILL_EFFECT = "
            },
            {
              "kind": "Reference",
              "text": "PillEffect.BAD_GAS",
              "canonicalReference": "isaac-typescript-definitions!PillEffect.BAD_GAS:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_PILL_EFFECT",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_ROOM_TYPE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_ROOM_TYPE = "
            },
            {
              "kind": "Reference",
              "text": "RoomType.DEFAULT",
              "canonicalReference": "isaac-typescript-definitions!RoomType.DEFAULT:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_ROOM_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_STAGE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_STAGE = "
            },
            {
              "kind": "Reference",
              "text": "LevelStage.BASEMENT_1",
              "canonicalReference": "isaac-typescript-definitions!LevelStage.BASEMENT_1:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_STAGE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!FIRST_TRINKET_TYPE:var",
          "docComment": "/**\n * Equal to `TrinketType.SWALLOWED_PENNY`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FIRST_TRINKET_TYPE = "
            },
            {
              "kind": "Reference",
              "text": "TrinketType.SWALLOWED_PENNY",
              "canonicalReference": "isaac-typescript-definitions!TrinketType.SWALLOWED_PENNY:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "FIRST_TRINKET_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!fonts:var",
          "docComment": "/**\n * An object containing all 7 vanilla fonts that are pre-loaded and ready to use.\n *\n * For more information on the vanilla fonts and to see what they look like, see: https://wofsauge.github.io/IsaacDocs/rep/tutorials/Tutorial-Rendertext.html\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "fonts: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly droid: "
            },
            {
              "kind": "Reference",
              "text": "Font",
              "canonicalReference": "!Font:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly pfTempestaSevenCondensed: "
            },
            {
              "kind": "Reference",
              "text": "Font",
              "canonicalReference": "!Font:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly teamMeatFont10: "
            },
            {
              "kind": "Reference",
              "text": "Font",
              "canonicalReference": "!Font:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly teamMeatFont12: "
            },
            {
              "kind": "Reference",
              "text": "Font",
              "canonicalReference": "!Font:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly teamMeatFont16Bold: "
            },
            {
              "kind": "Reference",
              "text": "Font",
              "canonicalReference": "!Font:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly terminus: "
            },
            {
              "kind": "Reference",
              "text": "Font",
              "canonicalReference": "!Font:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly upheaval: "
            },
            {
              "kind": "Reference",
              "text": "Font",
              "canonicalReference": "!Font:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "fonts",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!forceNewLevelCallback:function(1)",
          "docComment": "/**\n * This is a utility function for users of the `ModCallbackCustom.POST_NEW_LEVEL_REORDERED` custom callback.\n *\n * If some specific cases, mods can change the current level during run initialization on the 0th frame. However, due to how the callback reordering works, the custom `POST_NEW_LEVEL` callback will never fire on the 0th frame. To get around this, call this function before changing levels to temporarily force the callback to fire.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function forceNewLevelCallback(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "forceNewLevelCallback"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!forceNewRoomCallback:function(1)",
          "docComment": "/**\n * This is a utility function for users of the `ModCallbackCustom.POST_NEW_ROOM_REORDERED` custom callback.\n *\n * If some specific cases, mods can change the current room during run initialization on the 0th frame. However, due to how the callback reordering works, the custom `POST_NEW_ROOM` callback will never fire on the 0th frame. To get around this, call this function before changing rooms to temporarily force the callback to fire.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function forceNewRoomCallback(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "forceNewRoomCallback"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!forgottenSwitch:function(1)",
          "docComment": "/**\n * When used on The Forgotten, switches to The Soul. When used on The Soul, switches to The Forgotten. This takes 1 game frame to take effect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function forgottenSwitch(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "forgottenSwitch"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!GAME_FRAMES_PER_SECOND:var",
          "docComment": "/**\n * Game frames are what is returned by the `Game.GetFrameCount` method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GAME_FRAMES_PER_SECOND = "
            },
            {
              "kind": "Content",
              "text": "30"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "GAME_FRAMES_PER_SECOND",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!game:var",
          "docComment": "/**\n * A cached version of the class returned from the `Game()` constructor.\n *\n * Use this instead of invoking the constructor again for a miniscule performance increase.\n *\n * Caching the results of this constructor is safe, but caching other classes (like `Level` or `Room`) is not safe and can lead to the game crashing in certain situations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "game: "
            },
            {
              "kind": "Reference",
              "text": "Game",
              "canonicalReference": "isaac-typescript-definitions!~__global.Game:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "game",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getActiveItemSlot:function(1)",
          "docComment": "/**\n * Helper function to find the active slot that the player has the corresponding collectible type in. Returns undefined if the player does not have the collectible in any active slot.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getActiveItemSlot(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getActiveItemSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getActivePocketItemSlot:function(1)",
          "docComment": "/**\n * Helper function to get the `PocketItemSlot` that the player's pocket active collectible item is in, if any. Returns undefined if the player does not have a pocket active item.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getActivePocketItemSlot(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PocketItemSlot",
              "canonicalReference": "isaac-typescript-definitions!PocketItemSlot:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getActivePocketItemSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAdjacentRoomGridIndexes:function(1)",
          "docComment": "/**\n * Helper function to get the room grid indexes that are adjacent to a given room grid index.\n *\n * Adjacent room grid indexes that are outside of the grid will not be included in the returned array.\n *\n * If a room grid index is provided that is outside of the grid, then an empty array will be returned.\n *\n * Note that this function does not take the shape of the room into account; it only looks at a single room grid index.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAdjacentRoomGridIndexes(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getAdjacentRoomGridIndexes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAliveBosses:function(1)",
          "docComment": "/**\n * Helper function to get all of the non-dead bosses in the room.\n *\n * This function will not include bosses on an internal blacklist, such as Death's scythes or Big Horn holes.\n *\n * @param entityType - Optional. If specified, will only get the bosses that match the type. Default is -1, which matches every type.\n *\n * @param variant - Optional. If specified, will only get the bosses that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the bosses that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param ignoreFriendly - Optional. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAliveBosses(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ignoreFriendly?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "ignoreFriendly",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "getAliveBosses"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAliveNPCs:function(1)",
          "docComment": "/**\n * Helper function to get all of the non-dead NPCs in the room.\n *\n * This function will not include NPCs on an internal blacklist, such as Death's scythes or Big Horn holes.\n *\n * @param entityType - Optional. If specified, will only get the NPCs that match the type. Default is -1, which matches every type.\n *\n * @param variant - Optional. If specified, will only get the NPCs that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the NPCs that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param ignoreFriendly - Optional. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAliveNPCs(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ignoreFriendly?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "ignoreFriendly",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "getAliveNPCs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllBossesSet:function(1)",
          "docComment": "/**\n * Helper function to get the set of every boss in the game.\n *\n * The set contains strings with the entity type and variant, separated by a period.\n *\n * Also see the `getBossSet` and `getCombinedBossSet` functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllBossesSet(): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllBossesSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllCards:function(1)",
          "docComment": "/**\n * Helper function to get an array with every valid card sub-type. This includes modded cards.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllCards(): "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllCards"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllDimensions:function(1)",
          "docComment": "/**\n * Helper function to get an array with every valid `Dimension` (not including `Dimension.CURRENT`).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllDimensions(): "
            },
            {
              "kind": "Reference",
              "text": "Dimension",
              "canonicalReference": "isaac-typescript-definitions!Dimension:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllDimensions"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllGridIndexes:function(1)",
          "docComment": "/**\n * Helper function to get every legal grid index for the current room.\n *\n * Under the hood, this uses the `Room.GetGridSize` method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllGridIndexes(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllGridIndexes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllPillColors:function(1)",
          "docComment": "/**\n * Helper function to get an array with every non-null pill color. This includes all gold colors and all horse colors.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllPillColors(): "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllPillColors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllPillEffects:function(1)",
          "docComment": "/**\n * Helper function to get an array with every valid pill effect. This includes modded pill effects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllPillEffects(): "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllPillEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllPlayers:function(1)",
          "docComment": "/**\n * Helper function to get every player with no restrictions, by using `Game.GetNumPlayers` and `Isaac.GetPlayer`.\n *\n * This function is almost never what you want to use. For most purposes, use the `getPlayers` helper function instead to get a filtered list of players.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllPlayers(): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllPlayers"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAllRoomGridIndexes:function(1)",
          "docComment": "/**\n * Helper function to get the room safe grid index for every room on the entire floor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAllRoomGridIndexes(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAllRoomGridIndexes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAngelRoomDoor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAngelRoomDoor(): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getAngelRoomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAngleDifference:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAngleDifference(angle1: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ", angle2: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "angle1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "angle2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getAngleDifference"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getArrayCombinations:function(1)",
          "docComment": "/**\n * Helper function to get all possible combinations of the given array. This includes the combination of an empty array.\n *\n * For example, if this function is provided an array containing 1, 2, and 3, then it will return an array containing the following arrays:\n *\n * - [] (if `includeEmptyArray` is set to true) - [1] - [2] - [3] - [1, 2] - [1, 3] - [2, 3] - [1, 2, 3]\n *\n * From: https://github.com/firstandthird/combinations/blob/master/index.js\n *\n * @param array - The array to get the combinations of.\n *\n * @param includeEmptyArray - Whether or not to include an empty array in the combinations.\n *\n * @param min - Optional. The minimum number of elements to include in each combination. Default is 1.\n *\n * @param max - Optional. The maximum number of elements to include in each combination. Default is the length of the array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getArrayCombinations<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", includeEmptyArray: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", min?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", max?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<readonly T[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeEmptyArray",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getArrayCombinations"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getArrayIndexes:function(1)",
          "docComment": "/**\n * Helper function to get an array containing the indexes of an array.\n *\n * For example, an array of `[\"Apple\", \"Banana\"]` would return an array of `[0, 1]`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getArrayIndexes<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getArrayIndexes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getAzazelBrimstoneDistance:function(1)",
          "docComment": "/**\n * Helper function to get how long Azazel's Brimstone laser should be. You can pass either an `EntityPlayer` object or a tear height stat.\n *\n * The formula for calculating it is: 32 - 2.5 * tearHeight\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getAzazelBrimstoneDistance(playerOrTearHeight: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerOrTearHeight",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getAzazelBrimstoneDistance"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getBatteries:function(1)",
          "docComment": "/**\n * Helper function to get all of the battery entities in the room.\n *\n * @param batterySubType - Optional. If specified, will only get the batteries that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBatteries(batterySubType?: "
            },
            {
              "kind": "Reference",
              "text": "BatterySubType",
              "canonicalReference": "isaac-typescript-definitions!BatterySubType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBattery",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBattery:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "batterySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getBatteries"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getBombPickups:function(1)",
          "docComment": "/**\n * Helper function to get all of the bomb entities in the room. (Specifically, this refers to bomb pickups, not the `EntityBomb` class.)\n *\n * @param bombSubType - Optional. If specified, will only get the bombs that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBombPickups(bombSubType?: "
            },
            {
              "kind": "Reference",
              "text": "BombSubType",
              "canonicalReference": "isaac-typescript-definitions!BombSubType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBomb:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getBombPickups"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getBombRadiusFromDamage:function(1)",
          "docComment": "/**\n * Helper function to find out how large a bomb explosion is based on the damage inflicted.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBombRadiusFromDamage(damage: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "damage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getBombRadiusFromDamage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getBombs:function(1)",
          "docComment": "/**\n * Helper function to get all of the bombs in the room. (Specifically, this refers to the `EntityBomb` class, not bomb pickups.)\n *\n * For example:\n * ```ts\n * // Make all of the bombs in the room invisible.\n * for (const bomb of getBombs()) {\n *   bomb.Visible = false;\n * }\n * ```\n *\n * @param bombVariant - Optional. If specified, will only get the bombs that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the bombs that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBombs(bombVariant?: "
            },
            {
              "kind": "Reference",
              "text": "BombVariant",
              "canonicalReference": "isaac-typescript-definitions!BombVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityBomb:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getBombs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getBooleansFromTable:function(1)",
          "docComment": "/**\n * Helper function to safely get boolean values from a Lua table. Will throw an error if the specific value does not exist on the table.\n *\n * This function is variadic, meaning that you can specify N arguments to get N values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBooleansFromTable(luaMap: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", objectName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", ...keys: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "luaMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "objectName",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "getBooleansFromTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getBosses:function(1)",
          "docComment": "/**\n * Helper function to get all of the bosses in the room.\n *\n * @param entityType - Optional. If specified, will only get the bosses that match the type. Default is -1, which matches every type.\n *\n * @param variant - Optional. If specified, will only get the bosses that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the bosses that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param ignoreFriendly - Optional. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBosses(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", ignoreFriendly?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "ignoreFriendly",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "getBosses"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getBossSet:function(1)",
          "docComment": "/**\n * Helper function to get the set of vanilla bosses for a particular stage and stage type combination.\n *\n * The set contains strings with the entity type and variant, separated by a period.\n *\n * Also see the `getAllBossesSet` and `getCombinedBossSet` functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBossSet(stage: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<string> | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "stageType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getBossSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCardDescription:function(1)",
          "docComment": "/**\n * Helper function to get a card description from a Card enum value.\n *\n * For example:\n * ```ts\n * const card = Card.FOOL;\n * const cardDescription = getCardDescription(card); // cardDescription is \"Where journey begins\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCardDescription(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCardDescription"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCardName:function(1)",
          "docComment": "/**\n * Helper function to get a card name from a Card.\n *\n * For example:\n * ```ts\n * const card = Card.FOOL;\n * const cardName = getCardName(card); // cardName is \"0 - The Fool\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCardName(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCardName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCards:function(1)",
          "docComment": "/**\n * Helper function to get all of the card entities in the room.\n *\n * @param card - Optional. If specified, will only get the cards that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCards(card?: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCard",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCard:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getCards"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCardsOfType:function(1)",
          "docComment": "/**\n * Helper function to get a set of cards matching the type. Also see the `CardType` enum.\n *\n * This function is variadic, meaning that you can you can specify N card types to get a set containing cards that match any of the specified types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCardsOfType(...cardTypes: "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigCardType",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigCardType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cardTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getCardsOfType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCardType:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCardType(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigCardType",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigCardType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCardType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getChallengeName:function(1)",
          "docComment": "/**\n * Get the proper name for a `Challenge` enum. This will only work for vanilla challenges.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getChallengeName(challenge: "
            },
            {
              "kind": "Reference",
              "text": "Challenge",
              "canonicalReference": "isaac-typescript-definitions!Challenge:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "challenge",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getChallengeName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCharacterDamageMultiplier:function(1)",
          "docComment": "/**\n * Helper function to get the numerical damage multiplier for a character.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCharacterDamageMultiplier(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": ", hasWhoreOfBabylon?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "hasWhoreOfBabylon",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getCharacterDamageMultiplier"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCharacterDeathAnimationName:function(1)",
          "docComment": "/**\n * - Most characters have a 56 frame death animation (i.e. the \"Death\" animation). - The Lost and Tainted Lost have a 38 frame death animation (i.e. the \"LostDeath\" animation). - Tainted Forgotten have a 20 frame death animation (i.e. the \"ForgottenDeath\" animation).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCharacterDeathAnimationName(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCharacterDeathAnimationName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCharacterMaxHeartContainers:function(1)",
          "docComment": "/**\n * Returns the maximum heart containers that the provided character can have. Normally, this is 12, but with Keeper it is 3, and with Tainted Keeper it is 2. This does not account for Birthright or Mother's Kiss; use the `getPlayerMaxHeartContainers` helper function for that.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCharacterMaxHeartContainers(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCharacterMaxHeartContainers"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCharacterName:function(1)",
          "docComment": "/**\n * Helper function to get the name of a character. Returns \"Unknown\" for modded characters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCharacterName(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCharacterName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCharacters:function(1)",
          "docComment": "/**\n * Helper function to get an array containing the characters of all of the current players.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCharacters(): "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getCharacters"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCircleDiscretizedPoints:function(1)",
          "docComment": "/**\n * Helper function to get an array of equidistant points on the circumference around a circle. Useful for equally distributing things in a circle pattern.\n *\n * @param centerPos - A position that represents the center of the center to get the points from.\n *\n * @param radius - The radius of the circle.\n *\n * @param numPoints - The number of points on the circumference of the circle to get.\n *\n * @param xMultiplier - An optional multiplier to get the points around an oval. Default is 1.\n *\n * @param yMultiplier - An optional multiplier to get the points around an oval. Default is 1.\n *\n * @param initialDirection - By default, the first point on the circle will be on the top center, but this can be optionally changed by specifying this argument.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCircleDiscretizedPoints(centerPos: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", radius: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ", numPoints: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", xMultiplier?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", yMultiplier?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", initialDirection?: "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "centerPos",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "radius",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "numPoints",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "xMultiplier",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "yMultiplier",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "initialDirection",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            }
          ],
          "name": "getCircleDiscretizedPoints"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getClosestEntityTo:function(1)",
          "docComment": "/**\n * Given an array of entities, this helper function returns the closest one to a provided reference entity.\n *\n * For example:\n * ```ts\n * const player = Isaac.GetPlayer();\n * const gapers = getEntities(EntityType.GAPER);\n * const closestGaper = getClosestEntityTo(player, gapers);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getClosestEntityTo<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyEntity",
              "canonicalReference": "isaacscript-common!AnyEntity:type"
            },
            {
              "kind": "Content",
              "text": ">(referenceEntity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": ", entities: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "referenceEntity",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getClosestEntityTo"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getClosestPlayer:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getClosestPlayer(position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getClosestPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCoins:function(1)",
          "docComment": "/**\n * Helper function to get all of the coin pickup entities in the room.\n *\n * @param coinSubType - Optional. If specified, will only get the coins that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCoins(coinSubType?: "
            },
            {
              "kind": "Reference",
              "text": "CoinSubType",
              "canonicalReference": "isaac-typescript-definitions!CoinSubType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCoin",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCoin:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "coinSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getCoins"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCoinValue:function(1)",
          "docComment": "/**\n * Helper function to get the corresponding coin amount from a `CoinSubType`. Returns 1 for modded sub-types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCoinValue(coinSubType: "
            },
            {
              "kind": "Reference",
              "text": "CoinSubType",
              "canonicalReference": "isaac-typescript-definitions!CoinSubType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "coinSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCoinValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleArray:function(1)",
          "docComment": "/**\n * Returns an array containing every valid collectible type in the game, including modded collectibles.\n *\n * Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups, then use the `getCollectibleSet` helper function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleArray(): "
            },
            {
              "kind": "Content",
              "text": "readonly "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getCollectibleArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleDescription:function(1)",
          "docComment": "/**\n * Helper function to get the in-game description for a collectible. Returns \"Unknown\" if the provided collectible type was not valid.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleDescription(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleDescription"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleDevilCoinPrice:function(1)",
          "docComment": "/**\n * Helper function to get the coin cost that a collectible item would be if it were being offered in a Devil Room deal. Returns 0 if passed `CollectibleType.NULL`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleDevilCoinPrice(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleDevilCoinPrice"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleDevilHeartPrice:function(1)",
          "docComment": "/**\n * Helper function to get the heart cost that a collectible item would be if it were being offered in a Devil Room deal. Returns 0 if passed `CollectibleType.NULL`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleDevilHeartPrice(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PickupPrice",
              "canonicalReference": "isaac-typescript-definitions!PickupPrice:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleDevilHeartPrice"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleGfxFilename:function(1)",
          "docComment": "/**\n * Helper function to get the path to a collectible's sprite. Returns the path to the question mark sprite (i.e. from Curse of the Blind) if the provided collectible type was not valid.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleGfxFilename(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleGfxFilename"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleIndex:function(1)",
          "docComment": "/**\n * Mods may have to keep track of data relating to a collectible. Finding an index for these kinds of data structures is difficult, since collectibles are respawned every time a player re-enters a room (like all other pickups), so the `PtrHash` will change.\n *\n * Use this function to get a unique index for a collectible to use in these data structures.\n *\n * If your mod is upgraded, then you should use the `getPickupIndex` function instead, as it is more general purpose and less prone to error (but relies on stateful tracking of pickups as the run progresses).\n *\n * Collectibles are a special case of pickups: they cannot be pushed around. (They actually can be pushed, but usually will stay on the same grid index.) Thus, it is possible to generate a somewhat reliable non-stateful index for collectibles. We use a 4-tuple of the room list index, the grid index of the collectible in the room, the collectible's `SubType`, and the collectible's `InitSeed`.\n *\n * Collectibles that are shifted by Tainted Isaac's mechanic will have unique collectible indexes because the `SubType` is different. (The collectible entities share the same `InitSeed` and `PtrHash`.)\n *\n * Collectibles that are rolled (with e.g. a D6) will have unique collectible indexes because the `SubType` and `InitSeed` are different. If you want to track collectibles independently of any rerolls, then you can use the `PtrHash` as an index instead. (The `PtrHash` will not persist between rooms, however.)\n *\n * Note that: - The grid index is a necessary part of the collectible index because Diplopia and Crooked Penny can cause two or more collectibles with the same `SubType` and `InitSeed` to exist in the same room. - This index will fail in the case where the player uses Diplopia or a successful Crooked Penny seven or more times in the same room, since that will cause two or more collectibles with the same grid index, `SubType`, and `InitSeed` to exist. (More than seven is required in non-1x1 rooms.) - The `SubType` is a necessary part of the collectible index because Tainted Isaac will continuously cause collectibles to morph into new sub-types with the same `InitSeed`. - Using a collectible's position as part of the index is problematic, since players can push a pedestal. (Even using the grid index does not solve this problem, since it is possible in certain cases for collectibles to be spawned at a position that is not aligned with the grid, and the pedestal pushed to an adjacent tile, but this case should be extremely rare.) - Mega Chests spawn two collectibles on the exact same position. However, both of them will have a different `InitSeed`, so this is not a problem for this indexing scheme. - The indexing scheme used is different for collectibles that are inside of a Treasure Room or Boss Room, in order to handle the case of the player seeing the same collectible again in a post-Ascent Treasure Room or Boss Room. A 5-tuple of stage, stage type, grid index, `SubType`, and `InitSeed` is used in this case. (Using the room list index or the room grid index is not suitable for this purpose, since both of these values can change in the post-Ascent rooms.) Even though Treasure Rooms and Boss Rooms are grouped together in this scheme, there probably will not be collectibles with the same grid index, SubType, and InitSeed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleIndex(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleIndex",
              "canonicalReference": "isaacscript-common!CollectibleIndex:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleInitCharge:function(1)",
          "docComment": "/**\n * Helper function to get the initial amount of charges that a collectible has. Returns 0 if the provided collectible type was not valid.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleInitCharge(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleInitCharge"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleItemPoolType:function(1)",
          "docComment": "/**\n * Helper function to get the item pool type that a given collectible came from. Since there is no native method in the API to get this, we listen in the `PRE_GET_COLLECTIBLE` callback for item pool types, and then assume that the next spawned collectible will match.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleItemPoolType(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ItemPoolType",
              "canonicalReference": "isaac-typescript-definitions!ItemPoolType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleItemPoolType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleItemType:function(1)",
          "docComment": "/**\n * Helper function to get the `ItemType` of a collectible. Returns `ItemType.ITEM_NULL` if the provided collectible type was not valid.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleItemType(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ItemType",
              "canonicalReference": "isaac-typescript-definitions!ItemType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleItemType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleMaxCharges:function(1)",
          "docComment": "/**\n * Helper function to get the maximum amount of charges that a collectible has. Returns 0 if the provided collectible type was not valid.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleMaxCharges(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleMaxCharges"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleName:function(1)",
          "docComment": "/**\n * Helper function to get the name of a collectible. Returns \"Unknown\" if the provided collectible type is not valid.\n *\n * For example:\n * ```ts\n * const collectibleType = CollectibleType.SAD_ONION;\n * const collectibleName = getCollectibleName(collectibleType); // collectibleName is \"Sad Onion\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleName(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectiblePedestalType:function(1)",
          "docComment": "/**\n * Helper function to get the \"pedestal type\" of a collectible. For example, it might be sitting on top of a broken Blood Donation Machine, or it might be sitting on top of an opened Spiked Chest.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectiblePedestalType(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CollectiblePedestalType",
              "canonicalReference": "isaac-typescript-definitions!CollectiblePedestalType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectiblePedestalType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleQuality:function(1)",
          "docComment": "/**\n * Helper function to get a collectible's quality. For example, Mom's Knife has a quality of 4. Returns 0 if the provided collectible type was not valid.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleQuality(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleQuality"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibles:function(1)",
          "docComment": "/**\n * Helper function to get all of the collectible entities in the room.\n *\n * @param collectibleType - Optional. If specified, will only get the collectibles that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibles(collectibleType?: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCollectible",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCollectible:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getCollectibles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleSet:function(1)",
          "docComment": "/**\n * Returns a set containing every valid collectible type in the game, including modded collectibles.\n *\n * Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order, then use the `getCollectibleArray` helper function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleSet(): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getCollectibleSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectiblesForCacheFlag:function(1)",
          "docComment": "/**\n * Returns a set containing every collectible type with the given cache flag, including modded collectibles.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectiblesForCacheFlag(cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectiblesForCacheFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectiblesInItemPool:function(1)",
          "docComment": "/**\n * Helper function to get the remaining collectibles in a given item pool. This function is expensive, so only use it in situations where the lag is acceptable.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectiblesInItemPool(itemPoolType: "
            },
            {
              "kind": "Reference",
              "text": "ItemPoolType",
              "canonicalReference": "isaac-typescript-definitions!ItemPoolType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "itemPoolType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectiblesInItemPool"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleTags:function(1)",
          "docComment": "/**\n * Helper function to get the tags of a collectible (which is the composition of zero or more `ItemConfigTag`). Returns 0 if the provided collectible type is not valid.\n *\n * For example:\n * ```ts\n * const collectibleType = CollectibleType.SAD_ONION;\n * const itemConfigTags = getCollectibleTags(collectibleType); // itemConfigTags is \"18350080\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleTags(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ItemConfigTag",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigTag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleTags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleTypesForTransformation:function(1)",
          "docComment": "/**\n * Helper function to get all of the collectible types in the game that count towards a particular transformation.\n *\n * For example, to get all of the collectible types that count towards Guppy:\n * ```ts\n * const guppyCollectibleTypes = getCollectibleTypesForTransformation(PlayerForm.GUPPY);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleTypesForTransformation(playerForm: "
            },
            {
              "kind": "Reference",
              "text": "PlayerForm",
              "canonicalReference": "isaac-typescript-definitions!PlayerForm:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerForm",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleTypesForTransformation"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollectibleTypesWithTag:function(1)",
          "docComment": "/**\n * Helper function to get all of the collectible types in the game that have a certain tag.\n *\n * For example, to get all of the collectible types that count as offensive for the purposes of Tainted Lost:\n * ```ts\n * const offensiveCollectibleTypes = getCollectibleTypesWithTag(ItemConfigTag.OFFENSIVE);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollectibleTypesWithTag(itemConfigTag: "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigTag",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigTag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "itemConfigTag",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollectibleTypesWithTag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCollidingEntitiesWithGridEntity:function(1)",
          "docComment": "/**\n * Gets the entities that have a hitbox that overlaps with any part of the square that the grid entity is on.\n *\n * Note that this function will not work properly in the `POST_NEW_ROOM` callback, since entities do not have collision yet in that callback.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCollidingEntitiesWithGridEntity(gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCollidingEntitiesWithGridEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCombinedBossSet:function(1)",
          "docComment": "/**\n * Helper function to get the set of vanilla bosses for a particular stage across all of the stage types. For example, specifying a stage of 2 will return a set with all of the bosses for Basement, Cellar, Burning Basement, Downpour, and Dross.\n *\n * The set contains strings with the entity type and variant, separated by a period.\n *\n * Also see the `getAllBossesSet` and `getBossSet` functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCombinedBossSet(stage: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<string> | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getCombinedBossSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getCrawlSpaces:function(1)",
          "docComment": "/**\n * Helper function to get all of the crawl spaces in the room.\n *\n * @param crawlSpaceVariant - Optional. If specified, will only get the crawl spaces that match the variant. Default is -1, which matches every variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCrawlSpaces(crawlSpaceVariant?: "
            },
            {
              "kind": "Reference",
              "text": "CrawlSpaceVariant",
              "canonicalReference": "isaac-typescript-definitions!CrawlSpaceVariant:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "crawlSpaceVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getCrawlSpaces"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDebugPrependString:function(1)",
          "docComment": "/**\n * Helper function to prefix the name of the function and the line number before a debug message.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDebugPrependString(msg: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", numParentFunctions?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "msg",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "numParentFunctions",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getDebugPrependString"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDefaultGlobals:function(1)",
          "docComment": "/**\n * Helper function to get a set containing all of the global variable names that are contained within the Isaac environment by default.\n *\n * Returns a slightly different set depending on whether the \"--luadebug\" flag is enabled or not.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDefaultGlobals(): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getDefaultGlobals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDefaultPlayerStat:function(1)",
          "docComment": "/**\n * Returns the starting stat that Isaac (the default character) starts with. For example, if you pass this function `CacheFlag.DAMAGE`, it will return 3.5.\n *\n * Note that the default fire delay is represented in the tear stat, not the `MaxFireDelay` value.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDefaultPlayerStat(cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getDefaultPlayerStat"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDevilRoomDoor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDevilRoomDoor(): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getDevilRoomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDevilRoomOrAngelRoomDoor:function(1)",
          "docComment": "/**\n * If there is both a Devil Room and an Angel Room door, this function will return door with the lowest slot number.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDevilRoomOrAngelRoomDoor(): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getDevilRoomOrAngelRoomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDimension:function(1)",
          "docComment": "/**\n * Helper function to get the current dimension. Most of the time, this will be `Dimension.MAIN`, but it can change if e.g. the player is in the mirror world of Downpour/Dross.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDimension(): "
            },
            {
              "kind": "Reference",
              "text": "Dimension",
              "canonicalReference": "isaac-typescript-definitions!Dimension:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getDimension"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDirectionName:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDirectionName(direction: "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "direction",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getDirectionName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDoorEnterPosition:function(1)",
          "docComment": "/**\n * Helper function to get the position that a player will enter a room at.\n *\n * When players enter a room, they do not appear exactly on the location of the door, because then they would immediately collide with the loading zone. Instead, they are offset by a certain amount of units.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDoorEnterPosition(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getDoorEnterPosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDoors:function(1)",
          "docComment": "/**\n * Helper function to get all of the doors in the room. By default, it will return every door. You can optionally specify one or more room types to return only the doors that match the specified room types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDoors(...roomTypes: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getDoors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDoorSlotEnterPositionOffset:function(1)",
          "docComment": "/**\n * Helper function to get the offset from a door position that a player will enter a room at.\n *\n * When players enter a room, they do not appear exactly on the location of the door, because then they would immediately collide with the loading zone. Instead, they are offset by a certain amount of units.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDoorSlotEnterPositionOffset(doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getDoorSlotEnterPositionOffset"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDoorSlotFlags:function(1)",
          "docComment": "/**\n * Helper function to convert an array of door slots or a set of door slots to the resulting bit flag number.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDoorSlotFlags(doorSlots: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "[] | "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlotFlag",
              "canonicalReference": "isaac-typescript-definitions!DoorSlotFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlots",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 13
              },
              "isOptional": false
            }
          ],
          "name": "getDoorSlotFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDoorSlotsForRoomShape:function(1)",
          "docComment": "/**\n * Helper function to get the possible door slots that can exist for a given room shape.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDoorSlotsForRoomShape(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getDoorSlotsForRoomShape"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getDoorsToRoomIndex:function(1)",
          "docComment": "/**\n * Helper function to get all of the doors in the room that lead to the provided room index.\n *\n * This function is variadic, meaning that you can specify N arguments to return all of the doors that match any of the N room grid indexes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDoorsToRoomIndex(...roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getDoorsToRoomIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEdenPassives:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEdenPassives(): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getEdenPassives"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEffectiveStage:function(1)",
          "docComment": "/**\n * Helper function to account for Repentance floors being offset by 1. For example, Downpour 2 is the third level of the run, but the game considers it to have a stage of 2. This function will consider Downpour 2 to have a stage of 3.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEffectiveStage(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getEffectiveStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEffects:function(1)",
          "docComment": "/**\n * Helper function to get all of the effects in the room.\n *\n * For example:\n * ```ts\n * // Make all of the effects in the room invisible.\n * for (const effect of getEffects()) {\n *   effect.Visible = false;\n * }\n * ```\n *\n * @param effectVariant - Optional. If specified, will only get the effects that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the effects that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEffects(effectVariant?: "
            },
            {
              "kind": "Reference",
              "text": "EffectVariant",
              "canonicalReference": "isaac-typescript-definitions!EffectVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effectVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEffectsList:function(1)",
          "docComment": "/**\n * Helper function to get an array of temporary effects for a player. This is helpful so that you don't have to manually create an array from an `EffectsList` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEffectsList(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TemporaryEffect",
              "canonicalReference": "!TemporaryEffect:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getEffectsList"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEntities:function(1)",
          "docComment": "/**\n * Helper function to get all of the entities in the room or all of the entities that match a specific entity type / variant / sub-type.\n *\n * Due to bugs with `Isaac.FindInRadius`, this function uses `Isaac.GetRoomEntities`, which is more expensive but also more robust. (If a matching entity type is provided, then `Isaac.FindByType` will be used instead.)\n *\n * For example:\n * ```ts\n * // Make all of the entities in the room invisible.\n * for (const entity of getEntities()) {\n *   entity.Visible = false;\n * }\n * ```\n *\n * @param entityType - Optional. If specified, will only get the entities that match the type. Default is -1, which matches every type.\n *\n * @param variant - Optional. If specified, will only get the entities that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the entities that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param ignoreFriendly - Optional. If set to true, it will exclude friendly NPCs from being returned. Default is false. Will only be taken into account if the `entityType` is specified.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEntities(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ignoreFriendly?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "ignoreFriendly",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "getEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEntityFields:function(1)",
          "docComment": "/**\n * Helper function to get all the fields on an entity. For example, this is useful for comparing it to another entity later. (One option is to use the `logTableDifferences` function for this.)\n *\n * This function will only get fields that are equal to booleans, numbers, or strings, or Vectors, as comparing other types is non-trivial.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEntityFields(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, boolean | number | string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getEntityFields"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEntityID:function(1)",
          "docComment": "/**\n * Helper function to return a string containing the entity's type, variant, and sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEntityID(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getEntityID"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEntityIDFromConstituents:function(1)",
          "docComment": "/**\n * Helper function to return a formatted string in the format returned by the `getEntityID` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEntityIDFromConstituents(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "getEntityIDFromConstituents"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEntityPositions:function(1)",
          "docComment": "/**\n * Helper function to get a map containing the positions of every entity in the current room.\n *\n * This is useful for rewinding entity positions at a later time. Also see `setEntityPositions`.\n *\n * @param entities - Optional. If provided, will only get the positions of the provided entities. Use this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method multiple times.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEntityPositions(entities?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PtrHash",
              "canonicalReference": "!PtrHash:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": true
            }
          ],
          "name": "getEntityPositions"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEntityVelocities:function(1)",
          "docComment": "/**\n * Helper function to get a map containing the velocities of every entity in the current room.\n *\n * This is useful for rewinding entity velocities at a later time. Also see `setEntityVelocities`.\n *\n * @param entities - Optional. If provided, will only get the velocities of the provided entities. Use this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method multiple times.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEntityVelocities(entities?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PtrHash",
              "canonicalReference": "!PtrHash:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": true
            }
          ],
          "name": "getEntityVelocities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEnumEntries:function(1)",
          "docComment": "/**\n * TypeScriptToLua will transpile TypeScript enums to Lua tables that have a double mapping. Thus, when you iterate over them, you will get both the names of the enums and the values of the enums, in a random order. Use this helper function to get the entries of the enum with the reverse mappings filtered out.\n *\n * This function will return the enum values in a sorted order, which may not necessarily be the same order as which they were declared in.\n *\n * This function will work properly for both number enums and string enums. (Reverse mappings are not created for string enums.)\n *\n * Also see the `getEnumKeys` and `getEnumValues` helper functions.\n *\n * For a more in depth explanation, see: https://isaacscript.github.io/gotchas#iterating-over-enums\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEnumEntries<T>(transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<[key: string, value: T[keyof T]]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getEnumEntries"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEnumKeys:function(1)",
          "docComment": "/**\n * TypeScriptToLua will transpile TypeScript enums to Lua tables that have a double mapping. Thus, when you iterate over them, you will get both the names of the enums and the values of the enums, in a random order. If all you need are the keys of an enum, use this helper function.\n *\n * This function will return the enum keys in a sorted order, which may not necessarily be the same order as which they were declared in.\n *\n * This function will work properly for both number enums and string enums. (Reverse mappings are not created for string enums.)\n *\n * Also see the `getEnumEntries` and `getEnumValues` helper functions.\n *\n * For a more in depth explanation, see: https://isaacscript.github.io/gotchas#iterating-over-enums\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEnumKeys<T>(transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getEnumKeys"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEnumLength:function(1)",
          "docComment": "/**\n * Helper function to get the amount of entries inside of an enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEnumLength<T>(transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getEnumLength"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getEnumValues:function(1)",
          "docComment": "/**\n * TypeScriptToLua will transpile TypeScript enums to Lua tables that have a double mapping. Thus, when you iterate over them, you will get both the names of the enums and the values of the enums, in a random order. If all you need are the values of an enum, use this helper function.\n *\n * This function will return the enum values in a sorted order, which may not necessarily be the same order as which they were declared in.\n *\n * This function will work properly for both number enums and string enums. (Reverse mappings are not created for string enums.)\n *\n * Also see the `getEnumEntries` and `getEnumKeys` helper functions.\n *\n * For a more in depth explanation, see: https://isaacscript.github.io/gotchas#iterating-over-enums\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getEnumValues<T>(transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getEnumValues"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFalsePHDPillEffect:function(1)",
          "docComment": "/**\n * Helper function to get the associated pill effect after False PHD is acquired. If a pill effect is not altered by False PHD, then the same pill effect will be returned.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFalsePHDPillEffect(pillEffect: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillEffect",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getFalsePHDPillEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFamiliars:function(1)",
          "docComment": "/**\n * Helper function to get all of the familiars in the room.\n *\n * For example:\n * ```ts\n * // Make all of the familiars in the room invisible.\n * for (const familiar of getFamiliars()) {\n *   familiar.Visible = false;\n * }\n * ```\n *\n * @param familiarVariant - Optional. If specified, will only get the familiars that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the familiars that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFamiliars(familiarVariant?: "
            },
            {
              "kind": "Reference",
              "text": "FamiliarVariant",
              "canonicalReference": "isaac-typescript-definitions!FamiliarVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "familiarVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getFamiliars"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFilteredNewEntities:function(1)",
          "docComment": "/**\n * Helper function to compare two different arrays of entities. Returns the entities that are in the second array but not in the first array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFilteredNewEntities<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyEntity",
              "canonicalReference": "isaacscript-common!AnyEntity:type"
            },
            {
              "kind": "Content",
              "text": ">(oldEntities: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", newEntities: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "oldEntities",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "newEntities",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getFilteredNewEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFinalPlayer:function(1)",
          "docComment": "/**\n * Helper function to return the player with the highest ID, according to the `Isaac.GetPlayer` method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFinalPlayer(): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getFinalPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFireDelay:function(1)",
          "docComment": "/**\n * - The `EntityPlayer` object stores a player's tear rate in the `MaxFireDelay` field. This is equivalent to how many tears the player can shoot per frame. - If you already have a \"tears\" stat and you want to convert it back to MaxFireDelay, then use this function. - In this context, the \"tears stat\" represents what is shown on the in-game stat UI.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFireDelay(tearsStat: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tearsStat",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getFireDelay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFirstCardOrPill:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFirstCardOrPill(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PocketItemDescription",
              "canonicalReference": "isaacscript-common!PocketItemDescription:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getFirstCardOrPill"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFlagName:function(1)",
          "docComment": "/**\n * Helper function to get the key associated with a particular flag.\n *\n * (Since bit flags are represented by custom objects instead of normal TypeScript enums, you cannot use the reverse mapping to find the associated key of a given enum value. Use this helper function instead of indexing the enum directly.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFlagName<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(flag: "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": ", flagEnum: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "flag",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "flagEnum",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getFlagName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFloorDisplayFlags:function(1)",
          "docComment": "/**\n * Helper function to get the minimap `DisplayFlag` value for every room on the floor. Returns a map that is indexed by the room's safe grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFloorDisplayFlags(): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DisplayFlag",
              "canonicalReference": "isaac-typescript-definitions!DisplayFlag:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getFloorDisplayFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFlyingCollectibles:function(1)",
          "docComment": "/**\n * Returns a set of all of the collectibles that grant flight. This is derived from collectibles that have `CacheFlag.FLYING` set in the \"items.xml\" file.\n *\n * Collectibles that only grant flight conditionally are manually pruned. Collectibles such as Empty Vessel should be checked for via the `hasFlyingTemporaryEffect` function.\n *\n * @param pruneConditionalItems - Whether or not collectibles that only grant flight conditionally should be included in the set (like Empty Vessel).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFlyingCollectibles(pruneConditionalItems: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pruneConditionalItems",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getFlyingCollectibles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getFlyingTrinkets:function(1)",
          "docComment": "/**\n * Returns a set of all of the trinkets that grant flight. (All trinkets that grant flight do so conditionally, like Bat Wing.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFlyingTrinkets(): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getFlyingTrinkets"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGoldenTrinketType:function(1)",
          "docComment": "/**\n * Helper function to get the corresponding golden trinket type from a normal trinket type.\n *\n * For example, passing `TrinketType.SWALLOWED_PENNY` would result in 32769, which is the value that corresponds to the golden trinket sub-type for Swallowed Penny.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGoldenTrinketType(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getGoldenTrinketType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGotoCommand:function(1)",
          "docComment": "/**\n * Helper function to get the corresponding \"goto\" console command that would correspond to the provided room type and room variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGotoCommand(roomType: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": ", roomVariant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomVariant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getGotoCommand"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGridEntities:function(1)",
          "docComment": "/**\n * Helper function to get every grid entity in the current room.\n *\n * Use this function with no arguments to get every grid entity, or specify a variadic amount of arguments to match specific grid entity types.\n *\n * For example:\n * ```ts\n * for (const gridEntity of getGridEntities()) {\n *   print(gridEntity.GetType())\n * }\n * ```\n *\n * For example:\n * ```ts\n * const rocks = getGridEntities(\n *   GridEntityType.ROCK,\n *   GridEntityType.BLOCK,\n *   GridEntityType.ROCK_TINTED,\n * );\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGridEntities(...gridEntityTypes: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getGridEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGridEntitiesExcept:function(1)",
          "docComment": "/**\n * Helper function to get every grid entity in the current room except for certain specific types.\n *\n * This function is variadic, meaning that you can specify as many grid entity types as you want to exclude.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGridEntitiesExcept(...gridEntityTypes: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getGridEntitiesExcept"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGridEntitiesMap:function(1)",
          "docComment": "/**\n * Helper function to get a map of every grid entity in the current room. The indexes of the map are equal to the grid index. The values of the map are equal to the grid entities.\n *\n * Use this function with no arguments to get every grid entity, or specify a variadic amount of arguments to match specific grid entity types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGridEntitiesMap(...gridEntityTypes: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getGridEntitiesMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGridEntityID:function(1)",
          "docComment": "/**\n * Helper function to return a string containing the grid entity's type and variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGridEntityID(gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getGridEntityID"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGridEntityIDFromConstituents:function(1)",
          "docComment": "/**\n * Helper function to return a formatted string in the format returned by the `getGridEntityID` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGridEntityIDFromConstituents(gridEntityType: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getGridEntityIDFromConstituents"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getGridIndexDelta:function(1)",
          "docComment": "/**\n * Helper function to get the grid index delta that a door out of the given room shape would lead to. For example, if you went through the bottom door in a room of `RoomShape.SHAPE_1x2`, you would end up in a room with a grid index that is +26 units from the `SafeGridIndex` of where you started.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getGridIndexDelta(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": ", doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getGridIndexDelta"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getHeartRowLength:function(1)",
          "docComment": "/**\n * Returns how many hearts are in the heart UI row. If the player has more than 6 hearts, this function will return 6.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHeartRowLength(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getHeartRowLength"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getHearts:function(1)",
          "docComment": "/**\n * Helper function to get all of the heart pickup entities in the room.\n *\n * @param heartSubType - Optional. If specified, will only get the hearts that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHearts(heartSubType?: "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupHeart",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupHeart:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "heartSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getHeartsUIWidth:function(1)",
          "docComment": "/**\n * Helper function to get the width of the first player's hearts on the UI. This is useful for drawing UI elements to the right of where the player's hearts are. Make sure to use this in combination with the the `getHUDOffsetVector` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHeartsUIWidth(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getHeartsUIWidth"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getHorsePillColor:function(1)",
          "docComment": "/**\n * Helper function to get the corresponding horse pill color from a normal pill color.\n *\n * For example, passing `PillColor.BLUE_BLUE` would result in 2049, which is the value that corresponds to the horse pill color for blue/blue.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHorsePillColor(pillColor: "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getHorsePillColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getHorsePillColors:function(1)",
          "docComment": "/**\n * Helper function to get an array with every non-gold horse pill color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHorsePillColors(): "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getHorsePillColors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getHUDOffsetVector:function(1)",
          "docComment": "/**\n * In the options menu, players have the ability to set a HUD offset. However, mods do not have access to this value. To get around this, Mod Config Menu provides a separate HUD offset setting on the first page of the menu. This is intended to be set by end-users to match their vanilla HUD offset setting so that mods can render UI elements to the screen in the correct position.\n *\n * @returns If the user does not have Mod Config Menu enabled, or does not have this option set, then this function will return `Vector.Zero.` Otherwise, it will return a Vector that represents a HUD offset that should be added to the position of a UI element.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHUDOffsetVector(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getHUDOffsetVector"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getIsaacAPIClassName:function(1)",
          "docComment": "/**\n * Helper function to get the name of a class from the Isaac API. This is contained within the \"__type\" metatable key.\n *\n * For example, a `Vector` class is has a name of \"Vector\".\n *\n * Returns undefined if the object is not of type `userdata` or if the \"__type\" metatable key does not exist.\n *\n * In some cases, Isaac classes can be a read-only. If this is the case, the \"__type\" field will be prepended with \"const \". This function will always strip this prefix, if it exists. For example, the class name returned for \"const Vector\" will be \"Vector\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getIsaacAPIClassName(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getIsaacAPIClassName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getJSONRoomDoorSlotFlags:function(1)",
          "docComment": "/**\n * Helper function to calculate what the resulting `BitFlags<DoorSlotFlag>` value would be for a given JSON room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getJSONRoomDoorSlotFlags(jsonRoom: "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlotFlag",
              "canonicalReference": "isaac-typescript-definitions!DoorSlotFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jsonRoom",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getJSONRoomDoorSlotFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getJSONRoomOfVariant:function(1)",
          "docComment": "/**\n * Helper function to find a specific room from an array of JSON rooms.\n *\n * @param jsonRooms - The array of rooms to search through.\n *\n * @param variant - The room variant to select. (The room variant can be thought of as the ID of the room.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getJSONRoomOfVariant(jsonRooms: "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jsonRooms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "getJSONRoomOfVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getJSONRoomsOfSubType:function(1)",
          "docComment": "/**\n * Helper function to find all of the JSON rooms that match the sub-type provided.\n *\n * @param jsonRooms - The array of rooms to search through.\n *\n * @param subType - The sub-type to match.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getJSONRoomsOfSubType(jsonRooms: "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jsonRooms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "getJSONRoomsOfSubType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getKBitOfN:function(1)",
          "docComment": "/**\n * Helper function to get the value of a specific but in a binary representation of a number.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getKBitOfN(k: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", n: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "k",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getKBitOfN"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getKeys:function(1)",
          "docComment": "/**\n * Helper function to get all of the key pickup entities in the room.\n *\n * @param keySubType - Optional. If specified, will only get the keys that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getKeys(keySubType?: "
            },
            {
              "kind": "Reference",
              "text": "KeySubType",
              "canonicalReference": "isaac-typescript-definitions!KeySubType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupKey",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupKey:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getKeys"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getKnives:function(1)",
          "docComment": "/**\n * Helper function to get all of the knives in the room.\n *\n * For example:\n * ```ts\n * // Make all of the knives in the room invisible.\n * for (const knife of getKnives()) {\n *   knife.Visible = false;\n * }\n * ```\n *\n * @param knifeVariant - Optional. If specified, will only get the knives that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the knives that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getKnives(knifeVariant?: "
            },
            {
              "kind": "Reference",
              "text": "KnifeVariant",
              "canonicalReference": "isaac-typescript-definitions!KnifeVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityKnife",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityKnife:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "knifeVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getKnives"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getLanguageName:function(1)",
          "docComment": "/**\n * Helper function to convert the language abbreviation from `Options.Language` to the \"full\" language name.\n *\n * For example, if the current language is set to Korean, `Options.Language` will be set to \"kr\", and this function will return \"Korean\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getLanguageName(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getLanguageName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getLasers:function(1)",
          "docComment": "/**\n * Helper function to get all of the lasers in the room.\n *\n * For example:\n * ```ts\n * // Make all of the lasers in the room invisible.\n * for (const laser of getLasers()) {\n *   laser.Visible = false;\n * }\n * ```\n *\n * @param laserVariant - Optional. If specified, will only get the lasers that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only get the lasers that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getLasers(laserVariant?: "
            },
            {
              "kind": "Reference",
              "text": "LaserVariant",
              "canonicalReference": "isaac-typescript-definitions!LaserVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityLaser",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityLaser:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "laserVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getLasers"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getLastElement:function(1)",
          "docComment": "/**\n * Helper function to return the last element of an array.\n *\n * If the array is empty, this will return undefined.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getLastElement<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getLastElement"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getLastEnumValue:function(1)",
          "docComment": "/**\n * Helper function to get the enum value with the highest value.\n *\n * Note that this is not necessarily the enum value that is declared last, since there is no way to infer that at run-time.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getLastEnumValue<T>(transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[keyof T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getLastEnumValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getLastFrameOfAnimation:function(1)",
          "docComment": "/**\n * Helper function that returns the number of the final frame in a particular animation for a sprite. By default, it will use the currently playing animation, but you can also specify a specific animation to check.\n *\n * Note that this function is bugged with the Stop Watch or the Broken Watch, since using the `Sprite.SetFrame` method will reset the internal accumulator used to slow down the playback speed of the animation. (The `PlaybackSpeed` field of the sprite is not used.) Thus, it is only safe to use this function on animations that are not slowed down by Stop Watch or Broken Watch, such as player animations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getLastFrameOfAnimation(sprite: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": ", animation?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sprite",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "animation",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getLastFrameOfAnimation"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getLatestRoomDescription:function(1)",
          "docComment": "/**\n * Helper function to get information about the most recent room that is stored in the room history array.\n *\n * This is useful in the `POST_ENTITY_REMOVE` callback; see the `isLeavingRoom` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getLatestRoomDescription(): "
            },
            {
              "kind": "Reference",
              "text": "RoomDescription",
              "canonicalReference": "isaacscript-common!RoomDescription:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getLatestRoomDescription"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getMapPartialMatch:function(1)",
          "docComment": "/**\n * Helper function to get the closest value from a map based on partial search text. For the purposes of this function, both search text and map keys are converted to lowercase before attempting to find a match.\n *\n * For example:\n * ```ts\n * const map = new <string, number>Map([\n *   [\"foo\", 123],\n *   [\"bar\", 456],\n * ]);\n * const searchText = \"f\";\n * const match = getMapPartialMatch(map, searchText); // match is now equal to 123\n *\n * @returns If a match was found, returns a tuple of the map key and value. If a match was not\n * found, returns undefined.\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getMapPartialMatch<T>(searchText: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", map: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[string, T] | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "searchText",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getMapPartialMatch"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getMatchingGridEntities:function(1)",
          "docComment": "/**\n * Helper function to get all of the grid entities in the room that specifically match the type and variant provided.\n *\n * If you want to match every variant, use the `getGridEntities` function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getMatchingGridEntities(gridEntityType: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getMatchingGridEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getModdedCards:function(1)",
          "docComment": "/**\n * Helper function to get an array with every modded card sub-type.\n *\n * Returns an empty array if there are no modded cards.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getModdedCards(): "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getModdedCards"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getModdedCollectibleArray:function(1)",
          "docComment": "/**\n * Returns an array containing every modded collectible type in the game.\n *\n * Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups, then use the `getModdedCollectibleSet` helper function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getModdedCollectibleArray(): "
            },
            {
              "kind": "Content",
              "text": "readonly "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getModdedCollectibleArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getModdedCollectibleSet:function(1)",
          "docComment": "/**\n * Returns a set containing every modded collectible type in the game.\n *\n * Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order, then use the `getModdedCollectibleArray` helper function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getModdedCollectibleSet(): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getModdedCollectibleSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getModdedCollectibleTypes:function(1)",
          "docComment": "/**\n * Helper function to get an array that represents the all modded collectible types.\n *\n * This function is only useful when building collectible type objects. For most purposes, you should use the `getModdedCollectibleSet` helper function instead.\n *\n * Returns an empty array if there are no modded collectible types.\n *\n * (This function is named differently from the `getVanillaCollectibleTypeRange` function because all modded collectible types are contiguous. Thus, each value represents a real `CollectibleType`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getModdedCollectibleTypes(): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getModdedCollectibleTypes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getModdedPillEffects:function(1)",
          "docComment": "/**\n * Helper function to get an array with every modded pill effect.\n *\n * Returns an empty array if there are no modded pill effects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getModdedPillEffects(): "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getModdedPillEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getModdedTrinketTypes:function(1)",
          "docComment": "/**\n * Helper function to get an array that represents every modded trinket type.\n *\n * Returns an empty array if there are no modded trinket types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getModdedTrinketTypes(): "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getModdedTrinketTypes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getMoveActions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getMoveActions(): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getMoveActions"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNewestPlayer:function(1)",
          "docComment": "/**\n * Helper function to get the first player with the lowest frame count. Useful to find a freshly spawned player after using items like Esau Jr. Don't use this function if two or more players will be spawned on the same frame.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNewestPlayer(): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getNewestPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNewGlobals:function(1)",
          "docComment": "/**\n * Helper function to get an array of any added global variables in the Isaac Lua environment. Returns a sorted array of key/value tuples.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNewGlobals(): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<["
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getNewGlobals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNewRoomCandidate:function(1)",
          "docComment": "/**\n * Helper function to pick a random valid spot on the floor to insert a brand new room. Note that some floors will not have any valid spots. If this is the case, this function will return undefined.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @returns Either a tuple of adjacent room grid index, `DoorSlot`, and new room grid index, or undefined.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNewRoomCandidate(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[adjacentRoomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", newRoomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "] | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getNewRoomCandidate"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNewRoomCandidatesBesideRoom:function(1)",
          "docComment": "/**\n * Helper function to iterate through the possible doors for a room and see if any of them would be a valid spot to insert a brand new room on the floor.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns A array of tuples of `DoorSlot` and room grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNewRoomCandidatesBesideRoom(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<[doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getNewRoomCandidatesBesideRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNewRoomCandidatesForLevel:function(1)",
          "docComment": "/**\n * Helper function to search through all of the rooms on the floor for a spot to insert a brand new room.\n *\n * @returns A array of tuples of adjacent room grid index, `DoorSlot`, and new room grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNewRoomCandidatesForLevel(): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<[\n    adjacentRoomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ",\n    doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ",\n    newRoomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "\n]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getNewRoomCandidatesForLevel"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNextStage:function(1)",
          "docComment": "/**\n * Helper function to get the stage that a trapdoor or heaven door would take the player to, based on the current stage, room, and game state flags.\n *\n * Note that in non-upgraded mods, this function will not account for the player having visited Repentance floors in The Ascent. (Handling this requires stateful tracking as the player progresses through the run.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNextStage(): "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getNextStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNextStageType:function(1)",
          "docComment": "/**\n * Helper function to get the stage type that a trapdoor or heaven door would take the player to, based on the current stage, room, and game state flags.\n *\n * @param upwards - Whether or not the player should go up to Cathedral in the case of being on Womb 2. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNextStageType(upwards?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "upwards",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getNextStageType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNormalPillColorFromHorse:function(1)",
          "docComment": "/**\n * Helper function to get the corresponding normal pill color from a horse pill color.\n *\n * For example, passing 2049 would result in `PillColor.BLUE_BLUE`.\n *\n * If called with a non-horse pill color, this function will return back the same color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNormalPillColorFromHorse(pillColor: "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getNormalPillColorFromHorse"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNormalPillColors:function(1)",
          "docComment": "/**\n * Helper function to get an array with every non-gold and non-horse pill color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNormalPillColors(): "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getNormalPillColors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNPCs:function(1)",
          "docComment": "/**\n * Helper function to get all of the NPCs in the room.\n *\n * @param entityType - Optional. If specified, will only get the NPCs that match the type. Default is -1, which matches every entity type.\n *\n * @param variant - Optional. If specified, will only get the NPCs that match the variant. Default is -1, which matches every entity type.\n *\n * @param subType - Optional. If specified, will only get the bombs that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param ignoreFriendly - Optional. If set to true, it will exclude friendly NPCs from being returned. Default is false. Will only be taken into account if the `entityType` is specified.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNPCs(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ignoreFriendly?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "ignoreFriendly",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "getNPCs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNumbersFromTable:function(1)",
          "docComment": "/**\n * Helper function to safely get number values from specific keys on a Lua table. Will throw an error if the specific value does not exist on the table or if it cannot be converted to a number.\n *\n * This function is variadic, meaning that you can specify N arguments to get N values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNumbersFromTable(luaMap: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", objectName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", ...keys: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "luaMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "objectName",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "getNumbersFromTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNumBitsOfN:function(1)",
          "docComment": "/**\n * Helper function to get the number of bits in a binary representation of a number.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNumBitsOfN(n: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getNumBitsOfN"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getNumRooms:function(1)",
          "docComment": "/**\n * Helper function to get the number of rooms that are currently on the floor layout. This does not include off-grid rooms, like the Devil Room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getNumRooms(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getNumRooms"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getOpenTrinketSlot:function(1)",
          "docComment": "/**\n * Returns the slot number corresponding to where a trinket can be safely inserted.\n *\n * For example:\n * ```ts\n * const player = Isaac.GetPlayer();\n * const trinketSlot = getOpenTrinketSlotNum(player);\n * if (trinketSlot !== undefined) {\n *   // They have one or more open trinket slots\n *   player.AddTrinket(TrinketType.SWALLOWED_PENNY);\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getOpenTrinketSlot(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getOpenTrinketSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getOppositeDoorSlot:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getOppositeDoorSlot(doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getOppositeDoorSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getOtherPlayers:function(1)",
          "docComment": "/**\n * Helper function to get all of the other players in the room besides the one provided. (This includes \"child\" players.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getOtherPlayers(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getOtherPlayers"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPHDPillEffect:function(1)",
          "docComment": "/**\n * Helper function to get the associated pill effect after PHD is acquired. If a pill effect is not altered by PHD, then the same pill effect will be returned.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPHDPillEffect(pillEffect: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillEffect",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPHDPillEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPickupIndex:function(1)",
          "docComment": "/**\n * Mods often have to track variables relating to a pickups. Finding an index for these kinds of data structures is difficult, since pickups are respawned every time a player re-enters a room, so the `PtrHash` will change.\n *\n * Use this function to get a unique index for a pickup to use in these data structures.\n *\n * Specifically, `PickupIndex` is a number that represents the spawn order of the pickup on the current run. For example, the first pickup spawned will have an index of 1, the second one will have an index of 2, and so on.\n *\n * Tracking pickups requires stateful tracking, so using pickup indexes requires an upgraded mod.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPickupIndex(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PickupIndex",
              "canonicalReference": "isaacscript-common!PickupIndex:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPickupIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPickups:function(1)",
          "docComment": "/**\n * Helper function to get all of the pickups in the room.\n *\n * For example:\n * ```ts\n * // Make all of the pickups in the room invisible.\n * for (const pickup of getPickups()) {\n *   pickup.Visible = false;\n * }\n * ```\n *\n * @param pickupVariant - Optional. If specified, will only get the pickups that match the variant. Default is -1, which matches every entity type.\n *\n * @param subType - Optional. If specified, will only get the pickups that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPickups(pickupVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PickupVariant",
              "canonicalReference": "isaac-typescript-definitions!PickupVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickupVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getPickups"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPillEffectClass:function(1)",
          "docComment": "/**\n * Helper function to get a pill effect class from a PillEffect enum value. In this context, the class is equal to the numerical prefix in the \"class\" tag in the \"pocketitems.xml\" file. Use the `getPillEffectType` helper function to determine whether or not the pill effect is positive, negative, or neutral.\n *\n * Due to limitations in the API, this function will not work properly for modded pill effects, and will always return `DEFAULT_PILL_EFFECT_CLASS` in those cases.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPillEffectClass(pillEffect: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigPillEffectClass",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigPillEffectClass:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillEffect",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPillEffectClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPillEffectName:function(1)",
          "docComment": "/**\n * Helper function to get a pill effect name from a PillEffect enum value.\n *\n * For example:\n * ```ts\n * const pillEffect = PillEffect.BAD_GAS;\n * const pillEffectName = getPillEffectName(pillEffect); // trinketName is \"Bad Gas\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPillEffectName(pillEffect: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillEffect",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPillEffectName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPillEffectType:function(1)",
          "docComment": "/**\n * Helper function to get a pill effect type from a PillEffect enum value. In this context, the type is equal to positive, negative, or neutral. This is derived from the suffix of the the \"class\" tag in the \"pocketitems.xml\" file. Use the `getPillEffectClass` helper function to determine the \"power\" of the pill.\n *\n * Due to limitations in the API, this function will not work properly for modded pill effects, and will always return `DEFAULT_PILL_EFFECT_TYPE` in those cases.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPillEffectType(pillEffect: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigPillEffectType",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigPillEffectType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillEffect",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPillEffectType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPills:function(1)",
          "docComment": "/**\n * Helper function to get all of the pill entities in the room.\n *\n * @param pillColor - Optional. If specified, will only get the pills that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPills(pillColor?: "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupPill",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupPill:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getPills"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPits:function(1)",
          "docComment": "/**\n * Helper function to get all of the `GridEntityPit` in the room.\n *\n * @param pitVariant - Optional. If specified, will only get the pits that match the variant. Default is -1, which matches every variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPits(pitVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PitVariant",
              "canonicalReference": "isaac-typescript-definitions!PitVariant:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPit",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPit:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pitVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getPits"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerAvailableHeartSlots:function(1)",
          "docComment": "/**\n * Returns the number of slots that the player has remaining for new heart containers, accounting for broken hearts. For example, if the player is Judas and has 1 red heart containers and 2 full soul hearts and 3 broken hearts, then this function would return 6 (i.e. 12 - 1 - 2 - 3).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerAvailableHeartSlots(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerAvailableHeartSlots"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerBlackHearts:function(1)",
          "docComment": "/**\n * Returns the number of black hearts that the player has, excluding any soul hearts. For example, if the player has one full black heart, one full soul heart, and one half black heart, this function returns 3.\n *\n * This is different from the `EntityPlayer.GetBlackHearts` method, since that returns a bitmask.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerBlackHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerBlackHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerCloserThan:function(1)",
          "docComment": "/**\n * Iterates over all players and checks if any are close enough to the specified position.\n *\n * @returns The first player found when iterating upwards from index 0.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerCloserThan(position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", distance: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "distance",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerCloserThan"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerCollectibleCount:function(1)",
          "docComment": "/**\n * Helper function to return the total amount of collectibles that a player has that match the collectible type(s) provided.\n *\n * This function is variadic, meaning that you can specify N collectible types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerCollectibleCount(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", ...collectibleTypes: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleTypes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerCollectibleCount"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerCollectibleMap:function(1)",
          "docComment": "/**\n * Iterates over every item in the game and returns a map containing the number of each item that the player has.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerCollectibleMap(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerCollectibleMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerCollectiblesForCacheFlag:function(1)",
          "docComment": "/**\n * Returns an array containing every collectible type that the player has that matches the provided CacheFlag.\n *\n * For example, if the cache flag is `CacheFlag.FLYING`, and the player has one Lord of the Pit and two Dead Doves, then this function would return:\n * ```ts\n * [\n *   CollectibleType.LORD_OF_THE_PIT,\n *   CollectibleType.DEAD_DOVE,\n *   CollectibleType.DEAD_DOVE,\n * ]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerCollectiblesForCacheFlag(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerCollectiblesForCacheFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerFamiliars:function(1)",
          "docComment": "/**\n * Helper function to get only the familiars that belong to a specific player.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerFamiliars(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerFamiliars"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerFromIndex:function(1)",
          "docComment": "/**\n * Helper function to get the corresponding `EntityPlayer` object that corresponds to a `PlayerIndex`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerFromIndex(playerIndex: "
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerFromIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerFromTear:function(1)",
          "docComment": "/**\n * Helper function to get the player from a tear, laser, bomb, etc.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerFromTear(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerFromTear"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerHealth:function(1)",
          "docComment": "/**\n * Helper function to get an object representing the player's health. You can use this in combination with the `setPlayerHealth` function to restore the player's health back to a certain configuration at a later time.\n *\n * This is based on the `REVEL.StoreHealth` function in the Revelations mod.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerHealth(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PlayerHealth",
              "canonicalReference": "isaacscript-common!PlayerHealth:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerHealth"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerHealthType:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerHealthType(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", healthType: "
            },
            {
              "kind": "Reference",
              "text": "HealthType",
              "canonicalReference": "isaacscript-common!HealthType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "healthType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerHealthType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerHearts:function(1)",
          "docComment": "/**\n * Returns the number of red hearts that the player has, excluding any rotten hearts. For example, if the player has one full black heart, one full soul heart, and one half black heart, this function returns 3.\n *\n * This is different from the `EntityPlayer.GetHearts` method, since that returns a value that includes rotten hearts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerIndex:function(1)",
          "docComment": "/**\n * Mods often have to track variables relating to the player. In naive mods, information will only be stored about the first player. However, in order to be robust, mods must handle up to 4 players playing at the same time. This means that information must be stored on a map data structure. Finding a good index for these types of map data structures is difficult:\n *\n * - We cannot use the index from `Isaac.GetPlayer(i)` since this fails in the case where there are two players and the first player leaves the run. - We cannot use `EntityPlayer.ControllerIndex` as an index because it fails in the case of Jacob & Esau or Tainted Forgotten. It also fails in the case of a player changing their controls mid-run. - We cannot use `EntityPlayer.GetData().index` because it does not persist across saving and continuing. - We cannot use `GetPtrHash()` as an index because it does not persist across exiting and relaunching the game. - We cannot use `EntityPlayer.InitSeed` because it is not consistent with additional players beyond the first.\n *\n * Instead, we use the `EntityPlayer.GetCollectibleRNG` method with an arbitrary value of Sad Onion (1). This works even if the player does not have any Sad Onions.\n *\n * Note that by default, this returns the same index for both The Forgotten and The Soul. (Even though they are technically different characters, they share the same inventory and InitSeed.) If this is not desired, pass true for the `differentiateForgottenAndSoul` argument, and the RNG of Spoon Bender (3) will be used for The Soul.\n *\n * Also note that this index does not work in the `POST_PLAYER_INIT` function for players 2 through 4. With that said, in almost all cases, you should be lazy-initializing your data structures in other callbacks, so this should not be an issue.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerIndex(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", differentiateForgottenAndSoul?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "differentiateForgottenAndSoul",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getPlayerIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerIndexVanilla:function(1)",
          "docComment": "/**\n * Helper function to return the index of this player with respect to the output of the `Isaac.GetPlayer` method.\n *\n * Note that if you storing information about a player in a data structure, you never want to use this index; use the `getPlayerIndex` function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerIndexVanilla(playerToFind: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerToFind",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerIndexVanilla"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerInventory:function(1)",
          "docComment": "/**\n * Helper function to get all of the collectibles that the player has gotten so far on this run, in order.\n *\n * Note that this does not include active collectibles that have since been dropped for other collectibles.\n *\n * In the case of inventory initialization or the case where the player rerolls their build in the middle of the run (e.g. with D4), the order of the inventory will not correspond to the order that the items were actually given to the player. In this case, the inventory will be in the order of the lowest `CollectibleType` to the highest.\n *\n * Under the hood, the inventory tracking works by tracking the number of collectibles that a player has on every frame. Thus, in a situation where a collectible was both added and removed to the player on the same frame, the amount of total collectibles would stay the same, and the inventory would not be updated. In vanilla, this situation would never happen, but another mod might do this for some reason. (With that said, the next time that a collectible is normally added or removed, it would trigger a re-scan, and the previous changes would be picked up.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerInventory(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", includeActiveCollectibles?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeActiveCollectibles",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getPlayerInventory"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerLastHeart:function(1)",
          "docComment": "/**\n * Helper function that returns the type of the rightmost heart. This does not including golden hearts or broken hearts, since they cannot be damaged directly.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerLastHeart(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "HealthType",
              "canonicalReference": "isaacscript-common!HealthType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerLastHeart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerMaxHeartContainers:function(1)",
          "docComment": "/**\n * Returns the maximum heart containers that the provided player can have. Normally, this is 12, but it can change depending on the character (e.g. Keeper) and other things (e.g. Mother's Kiss). This function does not account for Broken Hearts; use the `getPlayerAvailableHeartSlots` helper function for that.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerMaxHeartContainers(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerMaxHeartContainers"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerName:function(1)",
          "docComment": "/**\n * Helper function to get the proper name of the player. Use this instead of the `EntityPlayer.GetName` method because it accounts for Blue Baby, Lazarus II, and Tainted characters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerName(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerNumCollectiblesForTransformation:function(1)",
          "docComment": "/**\n * Returns the number of items that a player has towards a particular transformation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerNumCollectiblesForTransformation(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", playerForm: "
            },
            {
              "kind": "Reference",
              "text": "PlayerForm",
              "canonicalReference": "isaac-typescript-definitions!PlayerForm:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "playerForm",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerNumCollectiblesForTransformation"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerNumCollectiblesWithTag:function(1)",
          "docComment": "/**\n * Returns the number of items that a player has towards a particular transformation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerNumCollectiblesWithTag(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", itemConfigTag: "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigTag",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigTag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "itemConfigTag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerNumCollectiblesWithTag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerNumHitsRemaining:function(1)",
          "docComment": "/**\n * Returns the combined value of all of the player's red hearts, soul/black hearts, and bone hearts, minus the value of the player's rotten hearts.\n *\n * This is equivalent to the number of hits that the player can currently take, but does not take into account double damage from champion enemies and/or being on later floors. (For example, on Womb 1, players who have 1 soul heart remaining would die in 1 hit to anything, even though this function would report that they have 2 hits remaining.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerNumHitsRemaining(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerNumHitsRemaining"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayers:function(1)",
          "docComment": "/**\n * This function always excludes players with a non-undefined parent, since they are not real players (e.g. the Strawman Keeper).\n *\n * If this is not desired, use the `getAllPlayers` helper function instead.\n *\n * @param performCharacterExclusions - Whether or not to exclude characters that are not directly controlled by the player (i.e. Esau & Tainted Soul). Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayers(performCharacterExclusions?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "performCharacterExclusions",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getPlayers"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayersOfType:function(1)",
          "docComment": "/**\n * Helper function to get all of the players that are a certain character.\n *\n * This function is variadic, meaning that you can supply as many characters as you want to check for. Returns true if any of the characters supplied are present.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayersOfType(...characters: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "characters",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getPlayersOfType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerSoulHearts:function(1)",
          "docComment": "/**\n * Returns the number of soul hearts that the player has, excluding any black hearts. For example, if the player has one full black heart, one full soul heart, and one half black heart, this function returns 2.\n *\n * This is different from the `EntityPlayer.GetSoulHearts` method, since that returns the combined number of soul hearts and black hearts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerSoulHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerSoulHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerStat:function(1)",
          "docComment": "/**\n * Helper function to get the stat for a player corresponding to the `StatType`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerStat<T extends "
            },
            {
              "kind": "Reference",
              "text": "StatType",
              "canonicalReference": "isaacscript-common!StatType:enum"
            },
            {
              "kind": "Content",
              "text": ">(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", statType: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "StatTypeType",
              "canonicalReference": "isaacscript-common!StatTypeType:interface"
            },
            {
              "kind": "Content",
              "text": "[T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "statType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getPlayerStat"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayersWithCollectible:function(1)",
          "docComment": "/**\n * Helper function to get only the players that have a certain collectible.\n *\n * This function is variadic, meaning that you can supply as many collectible types as you want to check for. It only returns the players that have all of the collectibles.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayersWithCollectible(...collectibleTypes: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getPlayersWithCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayersWithTrinket:function(1)",
          "docComment": "/**\n * Helper function to get only the players that have a certain trinket.\n *\n * This function is variadic, meaning that you can supply as many trinket types as you want to check for. It only returns the players that have all of the trinkets.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayersWithTrinket(...trinketTypes: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getPlayersWithTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerTransformations:function(1)",
          "docComment": "/**\n * Returns a set of the player's current transformations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerTransformations(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerForm",
              "canonicalReference": "isaac-typescript-definitions!PlayerForm:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerTransformations"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPlayerTrinketsForCacheFlag:function(1)",
          "docComment": "/**\n * Returns a map containing every trinket type that the player has that matches the provided CacheFlag. The values of the map correspond to the multiplier for that trinket.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPlayerTrinketsForCacheFlag(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getPlayerTrinketsForCacheFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPocketItems:function(1)",
          "docComment": "/**\n * Use this helper function as a workaround for the `EntityPlayer.GetPocketItem` method not working correctly.\n *\n * Note that due to API limitations, there is no way to determine the location of a Dice Bag trinket dice. Furthermore, when the player has a Dice Bag trinket dice and a pocket active at the same time, there is no way to determine the location of the pocket active item. If this function cannot determine the identity of a particular slot, it will mark the type of the slot as `PocketItemType.UNDETERMINABLE`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPocketItems(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PocketItemDescription",
              "canonicalReference": "isaacscript-common!PocketItemDescription:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getPocketItems"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPoops:function(1)",
          "docComment": "/**\n * Helper function to get all of the `GridEntityPoop` in the room.\n *\n * @param poopVariant - Optional. If specified, will only get the poops that match the variant. Default is -1, which matches every variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPoops(poopVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PoopGridEntityVariant",
              "canonicalReference": "isaac-typescript-definitions!PoopGridEntityVariant:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPoop:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "poopVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getPoops"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPressurePlates:function(1)",
          "docComment": "/**\n * Helper function to get all of the `GridEntityPressurePlate` in the room.\n *\n * @param pressurePlateVariant - Optional. If specified, will only get the pressure plates that match the variant. Default is -1, which matches every variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPressurePlates(pressurePlateVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PressurePlateVariant",
              "canonicalReference": "isaac-typescript-definitions!PressurePlateVariant:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPressurePlate",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPressurePlate:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pressurePlateVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getPressurePlates"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getPreviousRoomDescription:function(1)",
          "docComment": "/**\n * Helper function to get information about the room that was previously visited.\n *\n * In the special case of only one room having been visited thus far (i.e. the starting room of the run), the starting room will be returned.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPreviousRoomDescription(): "
            },
            {
              "kind": "Reference",
              "text": "RoomDescription",
              "canonicalReference": "isaacscript-common!RoomDescription:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getPreviousRoomDescription"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getProjectiles:function(1)",
          "docComment": "/**\n * Helper function to get all of the projectiles in the room.\n *\n * For example:\n * ```ts\n * // Make all of the projectiles in the room invisible.\n * for (const projectile of getProjectiles()) {\n *   projectile.Visible = false;\n * }\n * ```\n *\n * @param projectileVariant - Optional. If specified, will only get the projectiles that match the variant. Default is -1, which matches every entity type.\n *\n * @param subType - Optional. If specified, will only get the projectiles that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getProjectiles(projectileVariant?: "
            },
            {
              "kind": "Reference",
              "text": "ProjectileVariant",
              "canonicalReference": "isaac-typescript-definitions!ProjectileVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "projectileVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getProjectiles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandom:function(1)",
          "docComment": "/**\n * This returns a random float between 0 and 1. It is inclusive on the low end, but exclusive on the high end. (This is because the `RNG.RandomFloat` method will never return a value of exactly 1.)\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandom(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getRandom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomArrayElement:function(1)",
          "docComment": "/**\n * Helper function to get a random element from the provided array.\n *\n * @param array - The array to get an element from.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of elements to skip over if selected.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomArrayElement<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getRandomArrayElement"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomArrayElementAndRemove:function(1)",
          "docComment": "/**\n * Helper function to get a random element from the provided array. Once the random element is decided, it is then removed from the array (in-place).\n *\n * @param array - The array to get an element from.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of elements to skip over if selected.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomArrayElementAndRemove<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getRandomArrayElementAndRemove"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomArrayIndex:function(1)",
          "docComment": "/**\n * Helper function to get a random index from the provided array.\n *\n * @param array - The array to get the index from.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of indexes that will be skipped over when getting the random index. Default is an empty array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomArrayIndex<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getRandomArrayIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomCard:function(1)",
          "docComment": "/**\n * Has an equal chance of returning any card (e.g. Fool, Reverse Fool, Wild Card, etc.).\n *\n * This will not return: - any runes - any objects like Dice Shard - any modded cards (since there is not a way to distinguish between modded cards and modded runes/objects)\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of cards to not select.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomCard(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "getRandomCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomCardOfType:function(1)",
          "docComment": "/**\n * @param cardType - The card type that represents the pool of cards to select from.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of cards to not select.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomCardOfType(cardType: "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigCardType",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigCardType:enum"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cardType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            }
          ],
          "name": "getRandomCardOfType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomColor:function(1)",
          "docComment": "/**\n * Helper function to get a random color.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param alpha - Optional. The alpha value to use. Default is 1.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomColor(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", alpha?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "alpha",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getRandomColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomEdenPassive:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomEdenPassive(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "isOptional": true
            }
          ],
          "name": "getRandomEdenPassive"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomEnumValue:function(1)",
          "docComment": "/**\n * Helper function to get a random value from the provided enum.\n *\n * @param transpiledEnum - The enum to get the value from.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of elements to skip over if selected.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomEnumValue<T>(transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T]> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[keyof T]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getRandomEnumValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomFloat:function(1)",
          "docComment": "/**\n * This returns a random float between min and max.\n *\n * For example:\n * ```ts\n * const realNumberBetweenOneAndThree = getRandomFloat(1, 3);\n * ```\n *\n * @param min - The lower bound for the random number (inclusive).\n *\n * @param max - The upper bound for the random number (exclusive).\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomFloat(min: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", max: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "getRandomFloat"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomInt:function(1)",
          "docComment": "/**\n * This returns a random integer between min and max. It is inclusive on both ends.\n *\n * Note that this function will run the `Next` method on the `RNG` object before returning the random number.\n *\n * For example:\n * ```ts\n * const oneTwoOrThree = getRandomInt(1, 3);\n * ```\n *\n * @param min - The lower bound for the random number (inclusive).\n *\n * @param max - The upper bound for the random number (inclusive).\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of elements that will be skipped over when getting the random integer. For example, a min of 1, a max of 4, and an exceptions array of `[2]` would cause the function to return either 1, 3, or 4. Default is an empty array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomInt(min: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", max: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "getRandomInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomJSONRoom:function(1)",
          "docComment": "/**\n * Helper function to get a random JSON room from an array of JSON rooms.\n *\n * Note that this function does not simply choose a random element in the provided array; it will properly account for each room weight using the algorithm from: https://stackoverflow.com/questions/1761626/weighted-random-numbers\n *\n * @param jsonRooms - The array of rooms to random choose between.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param verbose - Optional. If specified, will write entries to the \"log.txt\" file that describe what the function is doing. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomJSONRoom(jsonRooms: "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[] | readonly "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", verbose?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "JSONRoom",
              "canonicalReference": "isaacscript-common!JSONRoom:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jsonRooms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "verbose",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "name": "getRandomJSONRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomKColor:function(1)",
          "docComment": "/**\n * Helper function to get a random color.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param alpha - Optional. The alpha value to use. Default is 1.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomKColor(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", alpha?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "alpha",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getRandomKColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomRune:function(1)",
          "docComment": "/**\n * Has an equal chance of returning any rune (e.g. Rune of Hagalaz, Blank Rune, Black Rune, Soul of Isaac, etc.). This will never return a Rune Shard.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of runes to not select.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomRune(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "getRandomRune"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomSeed:function(1)",
          "docComment": "/**\n * Helper function to get a random `Seed` value to be used in spawning entities and so on. Use this instead of calling the `Random` function directly since that can return a value of 0 and crash the game.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomSeed(): "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRandomSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomSetElement:function(1)",
          "docComment": "/**\n * Helper function to get a random element from the provided set.\n *\n * @param set - The set to get an element from.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param exceptions - Optional. An array of elements to skip over if selected.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomSetElement<T>(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", exceptions?: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "exceptions",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getRandomSetElement"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRandomVector:function(1)",
          "docComment": "/**\n * Helper function to get a random vector between (-1, -1) and (1, 1).\n *\n * To get random vectors with a bigger length, multiply this with a number.\n *\n * Use this over the `RandomVector` function when you need the vector to be seeded.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomVector(seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getRandomVector"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getReadOnlyRooms:function(1)",
          "docComment": "/**\n * Helper function to get a read-only copy of the room descriptor for every room on the level. This includes off-grid rooms, such as the Devil Room, and extra-dimensional rooms, if they are generated and exist.\n *\n * Room descriptors without any data are assumed to be non-existent and are not included.\n *\n * Under the hood, this is performed by iterating over the `RoomList` from the `Level.GetRooms` method. This is the best way to see if off-grid rooms have been initialized, since it is possible for mods to insert room data at non-official negative room grid indexes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getReadOnlyRooms(): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RoomDescriptor",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getReadOnlyRooms"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRedHearts:function(1)",
          "docComment": "/**\n * Helper function to get all of the red heart pickup entities in the room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRedHearts(): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupHeart",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupHeart:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRedHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRepentanceDoor:function(1)",
          "docComment": "/**\n * Helper function to get the door that leads to the \"secret exit\" off-grid room that takes you to the Repentance floor.\n *\n * Returns undefined if the room has no Repentance doors.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRepentanceDoor(): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRepentanceDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRockAltType:function(1)",
          "docComment": "/**\n * Helper function to get the alternate rock type (i.e. urn, mushroom, etc.) that the current room will have.\n *\n * The rock type is based on the backdrop of the room.\n *\n * For example, if you change the backdrop of the starting room of the run to `BackdropType.CAVES`, and then spawn `GridEntityType.ROCK_ALT`, it will be a mushroom instead of an urn. Additionally, if it is destroyed, it will generate mushroom-appropriate rewards.\n *\n * On the other hand, if an urn is spawned first before the backdrop is changed to `BackdropType.CAVES`, the graphic of the urn will not switch to a mushroom. However, when destroyed, the urn will still generate mushroom-appropriate rewards.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRockAltType(): "
            },
            {
              "kind": "Reference",
              "text": "RockAltType",
              "canonicalReference": "isaacscript-common!RockAltType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRockAltType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRocks:function(1)",
          "docComment": "/**\n * Helper function to get all of the `GridEntityRock` in the room.\n *\n * @param variant - Optional. If specified, will only get the rocks that match the variant. Default is -1, which matches every variant. Note that this is not the same thing as the `RockVariant` enum, since that only applies to `GridEntityType.ROCK`, and other types of grid entities can be the `GridEntityRock` class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRocks(variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityRock",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityRock:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRocks"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomAllowedDoors:function(1)",
          "docComment": "/**\n * Helper function to get the set of allowed door slots for the room at the supplied grid index. This corresponds to the doors that are enabled in the STB/XML file for the room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomAllowedDoors(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomAllowedDoors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomClearGameFrame:function(1)",
          "docComment": "/**\n * Helper function to get the game frame (i.e. `Game.GetFrameCount`) of the last time that this room was cleared. Returns undefined if the room has never been cleared.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomClearGameFrame(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRoomClearGameFrame"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomClearRoomFrame:function(1)",
          "docComment": "/**\n * Helper function to get the room frame (i.e. `Room.GetFrameCount`) of the last time that this room was cleared. Returns undefined if the room has never been cleared.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomClearRoomFrame(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRoomClearRoomFrame"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomData:function(1)",
          "docComment": "/**\n * Helper function to get the room data for the provided room.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomData(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RoomConfig",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomConfig:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomData"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomDataForTypeVariant:function(1)",
          "docComment": "/**\n * Helper function to get the room data for a specific room type and variant combination. This is accomplished by using the \"goto\" console command to load the specified room into the `GridRoom.DEBUG` slot.\n *\n * Returns undefined if the provided room type and variant combination were not found. (A warning message will also appear on the console, since the \"goto\" command will fail.)\n *\n * Note that the side effect of using the \"goto\" console command is that it will trigger a room transition after a short delay. By default, this function cancels the incoming room transition by using the `Game.StartRoomTransition` method to travel to the same room.\n *\n * @param roomType - The type of room to retrieve.\n *\n * @param roomVariant - The room variant to retrieve. (The room variant is the \"ID\" of the room in Basement Renovator.)\n *\n * @param cancelRoomTransition - Optional. Whether to cancel the room transition by using the `Game.StartRoomTransition` method to travel to the same room. Default is true. Set this to false if you are getting the data for many rooms at the same time, and then use the `teleport` helper function when you are finished.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomDataForTypeVariant(roomType: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": ", roomVariant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", cancelRoomTransition?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RoomConfig",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomConfig:interface"
            },
            {
              "kind": "Content",
              "text": "> | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomVariant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "cancelRoomTransition",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getRoomDataForTypeVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomDescriptor:function(1)",
          "docComment": "/**\n * Helper function to get the descriptor for a room.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomDescriptor(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RoomDescriptor",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomDescriptor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomDescriptorReadOnly:function(1)",
          "docComment": "/**\n * Alias for the `Level.GetCurrentRoomDesc` method. Use this to make it more clear what type of `RoomDescriptor` object that you are retrieving.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomDescriptorReadOnly(): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RoomDescriptor",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRoomDescriptorReadOnly"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomDisplayFlags:function(1)",
          "docComment": "/**\n * Helper function to get a particular room's minimap display flags (e.g. whether or not it is visible and so on).\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomDisplayFlags(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DisplayFlag",
              "canonicalReference": "isaac-typescript-definitions!DisplayFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomDisplayFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomGridIndex:function(1)",
          "docComment": "/**\n * Helper function to get the grid index of the current room.\n *\n * - If the current room is inside of the grid, this function will return the `SafeGridIndex` from the room descriptor. (The safe grid index is defined as the top-left 1x1 section that the room overlaps with, or the top-right 1x1 section of a `RoomType.SHAPE_LTL` room.) - If the current room is outside of the grid, it will return the index from the `Level.GetCurrentRoomIndex` method (since `SafeGridIndex` is bugged for these cases).\n *\n * Use this function instead of the `Level.GetCurrentRoomIndex` method directly because the latter will return the specific 1x1 quadrant that the player entered the room at. For most situations, using the safe grid index is more reliable than this.\n *\n * Data structures that store data per room should use the room's `ListIndex` instead of `SafeGridIndex`, since the former is unique across different dimensions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomGridIndex(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRoomGridIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomGridIndexesForType:function(1)",
          "docComment": "/**\n * Helper function to get an array of all of the safe grid indexes for rooms that match the specified room type.\n *\n * This function only searches through rooms in the current dimension.\n *\n * This function is variadic, meaning that you can specify N arguments to get the combined grid indexes for N room types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomGridIndexesForType(...roomTypes: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "getRoomGridIndexesForType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomHistory:function(1)",
          "docComment": "/**\n * Helper function to get information about all of the rooms that a player has visited thus far on this run.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomHistory(): "
            },
            {
              "kind": "Content",
              "text": "readonly "
            },
            {
              "kind": "Reference",
              "text": "RoomDescription",
              "canonicalReference": "isaacscript-common!RoomDescription:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRoomHistory"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomItemPoolType:function(1)",
          "docComment": "/**\n * Helper function to get the item pool type for the current room. For example, this returns `ItemPoolType.ItemPoolType.POOL_ANGEL` if you are in an Angel Room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomItemPoolType(): "
            },
            {
              "kind": "Reference",
              "text": "ItemPoolType",
              "canonicalReference": "isaac-typescript-definitions!ItemPoolType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRoomItemPoolType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomListIndex:function(1)",
          "docComment": "/**\n * Helper function to get the list grid index of the provided room, which is equal to the index in the `RoomList.Get` method. In other words, this is equal to the order that the room was created by the floor generation algorithm.\n *\n * Use this as an index for data structures that store data per room, since it is unique across different dimensions.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomListIndex(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomListIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomName:function(1)",
          "docComment": "/**\n * Helper function to get the name of the room as it appears in the STB/XML data.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns The room name. Returns \"Unknown\" if the type was not found.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomName(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomNeighbors:function(1)",
          "docComment": "/**\n * Helper function to get the grid indexes of all the rooms connected to the given room index, taking the shape of the room into account. (This will only include rooms with valid data.)\n *\n * Returns an empty map if the provided room grid index is out of bounds or has no associated room data.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns A map of `DoorSlot` to the corresponding room grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomNeighbors(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomNeighbors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRooms:function(1)",
          "docComment": "/**\n * Helper function to get the room descriptor for every room on the level. This includes off-grid rooms, such as the Devil Room.\n *\n * Room descriptors without any data are assumed to be non-existent and are not included.\n *\n * - If you want just the rooms inside of the grid, use the `getRoomsInGrid` helper function. - If you want just the rooms outside of the grid, use the `getRoomsOutsideGrid` helper function.\n *\n * @param includeExtraDimensionalRooms - Optional. On some floors (e.g. Downpour 2, Mines 2), extra-dimensional rooms are automatically generated. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRooms(includeExtraDimensionalRooms?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RoomDescriptor",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "includeExtraDimensionalRooms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRooms"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShape:function(1)",
          "docComment": "/**\n * Helper function to get the name of the room as it appears in the STB/XML data.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns The room name. Returns \"Unknown\" if the type was not found.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShape(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomShape"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeBottomRightPosition:function(1)",
          "docComment": "/**\n * Helper function to see if a given room shape will grant a single charge or a double charge to the player's active item(s).\n *\n * For example, `RoomShape.SHAPE_2x2` will return 2.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeBottomRightPosition(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeBottomRightPosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeBounds:function(1)",
          "docComment": "/**\n * Helper function to get the grid position of the bottom-right tile of a given room shape.\n *\n * \"Vector(0, 0)\" corresponds to the top left tile of a room, not including the walls. (The top-left wall would be at \"Vector(-1, -1)\".)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeBounds(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly [width: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", height: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeBounds"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeCharges:function(1)",
          "docComment": "/**\n * Helper function to get the number of charges that a given room shape will grant to a player upon clearing it.\n *\n * For example, `RoomShape.SHAPE_2x2` will return 2.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeCharges(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeCharges"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeCorners:function(1)",
          "docComment": "/**\n * Helper function to get the corners that exist in the given room shape.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeCorners(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly "
            },
            {
              "kind": "Reference",
              "text": "Corner",
              "canonicalReference": "isaacscript-common!Corner:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeCorners"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeDoorSlot:function(1)",
          "docComment": "/**\n * Helper function to get the corresponding door slot for a given room shape and grid coordinates.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeDoorSlot(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": ", x: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeDoorSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeDoorSlotCoordinates:function(1)",
          "docComment": "/**\n * Helper function to get the room grid coordinates for a specific room shape and door slot combination.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeDoorSlotCoordinates(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": ", doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly [x: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "] | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeDoorSlotCoordinates"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeLayoutSize:function(1)",
          "docComment": "/**\n * Helper function to get the dimensions of a room shape's layout. This is NOT the size of the room's actual contents! For that, use the `getRoomShapeBounds` function.\n *\n * For example, a horizontal narrow room has a layout size of equal to that of a 1x1 room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeLayoutSize(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "readonly [width: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", height: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeLayoutSize"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeNeighborGridIndexDeltas:function(1)",
          "docComment": "/**\n * Helper function to get the room grid index delta that each hypothetical door in a given room shape would go to.\n *\n * This is used by the `getRoomShapeNeighborGridIndexes` function.\n *\n * @returns A map of `DoorSlot` to the corresponding room grid index delta.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeNeighborGridIndexDeltas(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeNeighborGridIndexDeltas"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeNeighborGridIndexes:function(1)",
          "docComment": "/**\n * Helper function to get the room grid index that each hypothetical door in a given room shape would go to. (This will not include room grid indexes that are outside of the grid.)\n *\n * @param safeRoomGridIndex - This must be the room safe grid index (i.e. the top-left room grid index for the respective room).\n *\n * @param roomShape - The shape of the room.\n *\n * @returns A map of `DoorSlot` to the corresponding room grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeNeighborGridIndexes(safeRoomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "safeRoomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeNeighborGridIndexes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeTopLeftPosition:function(1)",
          "docComment": "/**\n * Helper function to get the grid position of the top-left tile of a given room shape.\n *\n * \"Vector(0, 0)\" corresponds to the top left tile of a room, not including the walls. (The top-left wall would be at \"Vector(-1, -1)\".)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeTopLeftPosition(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeTopLeftPosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeVolume:function(1)",
          "docComment": "/**\n * Helper function to get the volume of a room shape, which is the amount of tiles that are inside the room.\n *\n * (This cannot be directly calculated from the bounds since L rooms are a special case.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeVolume(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeVolume"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomShapeWidth:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomShapeWidth(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomShapeWidth"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomsInsideGrid:function(1)",
          "docComment": "/**\n * Helper function to get the room descriptor for every room on the level that is on the grid. (For example, Devil Rooms are excluded.)\n *\n * Room descriptors without any data are assumed to be non-existent and are not included.\n *\n * @param includeExtraDimensionalRooms - Optional. On some floors (e.g. Downpour 2, Mines 2), extra-dimensional rooms are automatically be generated. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomsInsideGrid(includeExtraDimensionalRooms?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RoomDescriptor",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "includeExtraDimensionalRooms",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomsInsideGrid"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomsOfDimension:function(1)",
          "docComment": "/**\n * Helper function to get the room descriptor for every room on the level in a specific dimension. This will not include any off-grid rooms, such as the Devil Room.\n *\n * Room descriptors without any data are assumed to be non-existent and are not included.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomsOfDimension(dimension: "
            },
            {
              "kind": "Reference",
              "text": "Dimension",
              "canonicalReference": "isaac-typescript-definitions!Dimension:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RoomDescriptor",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "dimension",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomsOfDimension"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomsOutsideGrid:function(1)",
          "docComment": "/**\n * Helper function to get the room descriptor for every room on the level that is outside of the grid (like a Devil Room).\n *\n * Room descriptors without any data are assumed to be non-existent and are not included.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomsOutsideGrid(): "
            },
            {
              "kind": "Reference",
              "text": "RoomDescriptor",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getRoomsOutsideGrid"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomStageID:function(1)",
          "docComment": "/**\n * Helper function to get the stage ID for a room from the XML/STB data. The room stage ID will correspond to the first number in the filename of the XML/STB file. For example, a Depths room would have a stage ID of 7.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns The room stage ID. Returns -1 if the stage ID was not found.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomStageID(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "StageID",
              "canonicalReference": "isaac-typescript-definitions!StageID:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomStageID"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomSubType:function(1)",
          "docComment": "/**\n * Helper function to get the sub-type for a room from the XML/STB data. The room sub-type will correspond to different things depending on what XML/STB file it draws from. For example, in the \"00.special rooms.stb\" file, an Angel Room with a sub-type of 0 will correspond to a normal Angel Room and a sub-type of 1 will correspond to an Angel Room shop for The Stairway.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns The room sub-type. Returns -1 if the sub-type was not found.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomSubType(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomSubType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomType:function(1)",
          "docComment": "/**\n * Helper function for getting the type of the room with the given grid index.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns The room data type. Returns -1 if the type was not found.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomType(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomTypeName:function(1)",
          "docComment": "/**\n * Helper function to get the proper name of a room type.\n *\n * For example, `RoomType.TREASURE` will return \"Treasure Room\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomTypeName(roomType: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRoomTypeName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomVariant:function(1)",
          "docComment": "/**\n * Helper function to get the variant for a room from the XML/STB data. You can think of a room variant as its identifier. For example, to go to Basement room #123, you would use a console command of `goto d.123` while on the Basement.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n *\n * @returns The room variant. Returns -1 if the variant was not found.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomVariant(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getRoomVisitedCount:function(1)",
          "docComment": "/**\n * Note that the room visited count will be inaccurate during the period before the `POST_NEW_ROOM` callback has fired (i.e. when entities are initializing and performing their first update). This is because the variable is only incremented immediately before the `POST_NEW_ROOM` callback fires.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRoomVisitedCount(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRoomVisitedCount"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getSacks:function(1)",
          "docComment": "/**\n * Helper function to get all of the sack (i.e. grab bag) entities in the room.\n *\n * @param sackSubType - Optional. If specified, will only get the sacks that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSacks(sackSubType?: "
            },
            {
              "kind": "Reference",
              "text": "SackSubType",
              "canonicalReference": "isaac-typescript-definitions!SackSubType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupSack",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupSack:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sackSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getSacks"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getScreenBottomCenterPos:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getScreenBottomCenterPos(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getScreenBottomCenterPos"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getScreenBottomLeftPos:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getScreenBottomLeftPos(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getScreenBottomLeftPos"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getScreenBottomRightPos:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getScreenBottomRightPos(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getScreenBottomRightPos"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getScreenCenterPos:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getScreenCenterPos(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getScreenCenterPos"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getScreenTopCenterPos:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getScreenTopCenterPos(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getScreenTopCenterPos"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getScreenTopLeftPos:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getScreenTopLeftPos(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getScreenTopLeftPos"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getScreenTopRightPos:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getScreenTopRightPos(): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getScreenTopRightPos"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getSetCombinations:function(1)",
          "docComment": "/**\n * Helper function to get all possible combinations of the given set. This includes the combination of an empty set.\n *\n * For example, if this function is provided a set containing 1, 2, and 3, then it will return an array containing the following sets:\n *\n * - [] (if `includeEmptyArray` is set to true) - [1] - [2] - [3] - [1, 2] - [1, 3] - [2, 3] - [1, 2, 3]\n *\n * @param set - The set to get the combinations of.\n *\n * @param includeEmptyArray - Whether or not to include an empty array in the combinations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSetCombinations<T>(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", includeEmptyArray: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "includeEmptyArray",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getSetCombinations"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getShootActions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getShootActions(): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getShootActions"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getSlots:function(1)",
          "docComment": "/**\n * Helper function to get all of the slots in the room.\n *\n * For example:\n * ```ts\n * // Make all of the slots in the room invisible.\n * for (const slot of getSlots()) {\n *   slot.Visible = false;\n * }\n * ```\n *\n * @param slotVariant - Optional. If specified, will only get the slots that match the variant. Default is -1, which matches every entity type.\n *\n * @param subType - Optional. If specified, will only get the slots that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSlots(slotVariant?: "
            },
            {
              "kind": "Reference",
              "text": "SlotVariant",
              "canonicalReference": "isaac-typescript-definitions!SlotVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntitySlot",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntitySlot:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slotVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getSlots"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getSortedSetValues:function(1)",
          "docComment": "/**\n * Helper function to get a sorted array based on the contents of a set.\n *\n * Normally, set values are returned in a random order, so use this function when the ordering of the contents is important.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSortedSetValues<T>(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "getSortedSetValues"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getSpikes:function(1)",
          "docComment": "/**\n * Helper function to get all of the `GridEntitySpikes` in the room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSpikes(variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntitySpikes",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntitySpikes:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getSpikes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getStage:function(1)",
          "docComment": "/**\n * Alias for the `Level.GetStage` method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getStage(): "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getStageHistory:function(1)",
          "docComment": "/**\n * Helper function to get all of the stages that a player has visited thus far on this run.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getStageHistory(): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyArray",
              "canonicalReference": "!ReadonlyArray:interface"
            },
            {
              "kind": "Content",
              "text": "<[\n    stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ",\n    stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "\n]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getStageHistory"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getStageType:function(1)",
          "docComment": "/**\n * Alias for the `Level.GetStageType` method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getStageType(): "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getStageType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getStartSeedString:function(1)",
          "docComment": "/**\n * Alias for the `Seeds.GetStartSeedString` method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getStartSeedString(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getStartSeedString"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getStringsFromTable:function(1)",
          "docComment": "/**\n * Helper function to safely get string values from a Lua table. Will throw an error if the specific value does not exist on the table.\n *\n * This function is variadic, meaning that you can specify N arguments to get N values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getStringsFromTable(luaMap: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown>"
            },
            {
              "kind": "Content",
              "text": ", objectName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", ...keys: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "luaMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "objectName",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "getStringsFromTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getSubPlayerParent:function(1)",
          "docComment": "/**\n * Helper function to get a parent `EntityPlayer` object for a given `EntitySubPlayer` object. This is useful because calling the `EntityPlayer.GetSubPlayer` method on a sub-player object will return undefined.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSubPlayerParent(subPlayer: "
            },
            {
              "kind": "Reference",
              "text": "EntitySubPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntitySubPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "subPlayer",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getSubPlayerParent"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getSurroundingGridEntities:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSurroundingGridEntities(gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getSurroundingGridEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTaintedLazarusSubPlayer:function(1)",
          "docComment": "/**\n * Helper function to get the other version of Tainted Lazarus.\n *\n * - On Tainted Lazarus, returns the player object for Dead Tainted Lazarus. - On Dead Tainted Lazarus, returns the player object for Tainted Lazarus. - Returns undefined if player object retrieval failed for any reason.\n *\n * If you call the `EntityPlayer.Exists` method on the returned object, it will return false. However, you can still call the other methods like you normally would (e.g. `EntityPlayer.AddCollectible`).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTaintedLazarusSubPlayer(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTaintedLazarusSubPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTaintedMagdaleneNonTemporaryMaxHearts:function(1)",
          "docComment": "/**\n * Helper function to determine how many heart containers that Tainted Magdalene has that will not be automatically depleted over time. By default, this is 2, but this function will return 4 so that it is consistent with the `player.GetHearts` and `player.GetMaxHearts` methods.\n *\n * If Tainted Magdalene has Birthright, she will gained an additional non-temporary heart container.\n *\n * This function does not validate whether or not the provided player is Tainted Magdalene; that should be accomplished before invoking this function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTaintedMagdaleneNonTemporaryMaxHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTaintedMagdaleneNonTemporaryMaxHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTears:function(1)",
          "docComment": "/**\n * Helper function to get all of the tears in the room.\n *\n * For example:\n * ```ts\n * // Make all of the tears in the room invisible.\n * for (const tear of getTears()) {\n *   tear.Visible = false;\n * }\n * ```\n *\n * @param tearVariant - Optional. If specified, will only get the tears that match the variant. Default is -1, which matches every entity type.\n *\n * @param subType - Optional. If specified, will only get the tears that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTears(tearVariant?: "
            },
            {
              "kind": "Reference",
              "text": "TearVariant",
              "canonicalReference": "isaac-typescript-definitions!TearVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityTear",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityTear:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tearVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getTears"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTearsStat:function(1)",
          "docComment": "/**\n * - The `EntityPlayer` object stores a player's tear rate in the `MaxFireDelay` field. This is equivalent to how many tears the player can shoot per frame. - If you want to convert this to the \"tears\" stat that is shown on the in-game stat UI, then use this function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTearsStat(fireDelay: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fireDelay",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTearsStat"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTNT:function(1)",
          "docComment": "/**\n * Helper function to get all of the `GridEntityTNT` in the room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTNT(variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityTNT",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityTNT:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getTNT"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTopLeftWall:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTopLeftWall(): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getTopLeftWall"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTopLeftWallGridIndex:function(1)",
          "docComment": "/**\n * Helper function to get the grid index of the top left wall. (This will depend on what the current room shape is.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTopLeftWallGridIndex(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getTopLeftWallGridIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTotalCharge:function(1)",
          "docComment": "/**\n * Helper function to get the combined normal charge and the battery charge for the player's active item. This is useful because you have to add these two values together when setting the active charge.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTotalCharge(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", activeSlot: "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "activeSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getTotalCharge"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTotalPlayerCollectibles:function(1)",
          "docComment": "/**\n * Returns the total number of collectibles amongst all players. For example, if player 1 has 1 Sad Onion and player 2 has 2 Sad Onions, then this function would return 3.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTotalPlayerCollectibles(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTotalPlayerCollectibles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTraceback:function(1)",
          "docComment": "/**\n * Helper function to get a stack trace.\n *\n * This will only work if the `--luadebug` launch option is enabled or the Racing+ sandbox is enabled.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTraceback(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getTraceback"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTransformationName:function(1)",
          "docComment": "/**\n * Helper function to get a transformation name from a PlayerForm enum.\n *\n * For example:\n * ```ts\n * const transformationName = getTransformationName(PlayerForm.LORD_OF_THE_FLIES);\n * // transformationName is \"Beelzebub\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTransformationName(playerForm: "
            },
            {
              "kind": "Reference",
              "text": "PlayerForm",
              "canonicalReference": "isaac-typescript-definitions!PlayerForm:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerForm",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTransformationName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTransformationsForCollectibleType:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTransformationsForCollectibleType(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerForm",
              "canonicalReference": "isaac-typescript-definitions!PlayerForm:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTransformationsForCollectibleType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTrapdoors:function(1)",
          "docComment": "/**\n * Helper function to get all of the grid entities of type `GridEntityType.TRAPDOOR` in the room. Specify a specific trapdoor variant to select only trapdoors of that variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTrapdoors(trapdoorVariant?: "
            },
            {
              "kind": "Reference",
              "text": "TrapdoorVariant",
              "canonicalReference": "isaac-typescript-definitions!TrapdoorVariant:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trapdoorVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getTrapdoors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTraversalDescription:function(1)",
          "docComment": "/**\n * Helper function to log what is happening in functions that recursively move through nested data structures.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTraversalDescription(key: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", traversalDescription: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "traversalDescription",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getTraversalDescription"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTrinketDescription:function(1)",
          "docComment": "/**\n * Helper function to get the in-game description for a trinket. Returns \"Unknown\" if the provided trinket type was not valid.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTrinketDescription(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTrinketDescription"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTrinketName:function(1)",
          "docComment": "/**\n * Helper function to get the name of a trinket. Returns \"Unknown\" if the provided trinket type is not valid.\n *\n * For example:\n * ```ts\n * const trinketType = TrinketType.SWALLOWED_PENNY;\n * const trinketName = getTrinketName(trinketType); // trinketName is \"Swallowed Penny\"\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTrinketName(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTrinketName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTrinkets:function(1)",
          "docComment": "/**\n * Helper function to get all of the trinket entities in the room.\n *\n * @param trinketType - Optional. If specified, will only get the trinkets that match the sub-type. Default is -1, which matches every sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTrinkets(trinketType?: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupTrinket",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupTrinket:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getTrinkets"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTrinketsForCacheFlag:function(1)",
          "docComment": "/**\n * Returns a set containing every trinket type with the given cache flag, including modded trinkets.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTrinketsForCacheFlag(cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTrinketsForCacheFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTrinketTypes:function(1)",
          "docComment": "/**\n * Helper function to get an array that contains every trinket type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTrinketTypes(): "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getTrinketTypes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getTSTLClassName:function(1)",
          "docComment": "/**\n * Helper function to get the name of a TypeScriptToLua class. TSTL classes are Lua tables created with the `__TS__Class` Lua function from the TSTL lualib. Their name is contained within \"constructor.name\" metatable key.\n *\n * For example, a `Map` class is has a name of \"Map\".\n *\n * Returns undefined if the object is not a table or if the aforementioned metatable key does not exist.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTSTLClassName(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getTSTLClassName"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getUnusedDoorSlots:function(1)",
          "docComment": "/**\n * Helper function to find unused door slots in the room that can be used to make custom doors.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getUnusedDoorSlots(): "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getUnusedDoorSlots"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getVanillaCards:function(1)",
          "docComment": "/**\n * Helper function to get an array with every valid vanilla card sub-type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVanillaCards(): "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getVanillaCards"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getVanillaCollectibleArray:function(1)",
          "docComment": "/**\n * Returns an array containing every valid vanilla collectible type in the game.\n *\n * Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups, then use the `getVanillaCollectibleSet` helper function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVanillaCollectibleArray(): "
            },
            {
              "kind": "Content",
              "text": "readonly "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getVanillaCollectibleArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getVanillaCollectibleSet:function(1)",
          "docComment": "/**\n * Returns a set containing every valid vanilla collectible type in the game.\n *\n * Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order, then use the `getVanillaCollectibleArray` helper function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVanillaCollectibleSet(): "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getVanillaCollectibleSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getVanillaCollectibleTypeRange:function(1)",
          "docComment": "/**\n * Helper function to get an array that represents the range from the first collectible type to the last vanilla collectible type. This will include integers that do not represent any valid collectible types.\n *\n * This function is only useful when building collectible type objects. For most purposes, you should use the `getVanillaCollectibleSet` helper function instead.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVanillaCollectibleTypeRange(): "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getVanillaCollectibleTypeRange"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getVanillaPillEffects:function(1)",
          "docComment": "/**\n * Helper function to get an array with every vanilla pill effect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVanillaPillEffects(): "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getVanillaPillEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getVanillaTrinketTypes:function(1)",
          "docComment": "/**\n * Helper function to get an array that represents every vanilla trinket type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVanillaTrinketTypes(): "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getVanillaTrinketTypes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!getVisibleHearts:function(1)",
          "docComment": "/**\n * Get how many hearts are currently being shown on the hearts UI.\n *\n * This function is originally from piber20 Helper.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getVisibleHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getVisibleHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!giveTrinketsBack:function(1)",
          "docComment": "/**\n * Helper function to restore the player's trinkets back to the way they were before the `temporarilyRemoveTrinket` function was used. It will re-smelt any smelted trinkets that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function giveTrinketsBack(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", trinketSituation: "
            },
            {
              "kind": "Reference",
              "text": "TrinketSituation",
              "canonicalReference": "isaacscript-common!TrinketSituation:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "trinketSituation",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "giveTrinketsBack"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!goToStage:function(1)",
          "docComment": "/**\n * Helper function to directly warp to a specific stage using the \"stage\" console command.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function goToStage(stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ", stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "stageType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "goToStage"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!GRID_INDEX_CENTER_OF_1X1_ROOM:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GRID_INDEX_CENTER_OF_1X1_ROOM = "
            },
            {
              "kind": "Content",
              "text": "67"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "GRID_INDEX_CENTER_OF_1X1_ROOM",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!gridCoordinatesToWorldPosition:function(1)",
          "docComment": "/**\n * Helper function to convert grid coordinates to a world position `Vector`.\n *\n * For example, the coordinates of (0, 0) are equal to `Vector(80, 160)`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function gridCoordinatesToWorldPosition(x: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "gridCoordinatesToWorldPosition"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!GridEntityCustomData:interface",
          "docComment": "/**\n * This is meta-data that describes a custom grid entity.\n *\n * (One of the extra features that the standard library offers is the ability to spawn custom grid entities with the `spawnCustomGridEntity` helper function.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GridEntityCustomData "
            }
          ],
          "releaseTag": "Public",
          "name": "GridEntityCustomData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!GridEntityCustomData#anm2Path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "anm2Path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "anm2Path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!GridEntityCustomData#defaultAnimation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultAnimation?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "defaultAnimation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!GridEntityCustomData#gridCollisionClass:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridCollisionClass: "
                },
                {
                  "kind": "Reference",
                  "text": "GridCollisionClass",
                  "canonicalReference": "isaac-typescript-definitions!GridCollisionClass:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridCollisionClass",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!GridEntityCustomData#gridEntityTypeCustom:member",
              "docComment": "/**\n * This is not a real `GridEntityType`; rather it is an arbitrary integer selected by end-user mods.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridEntityTypeCustom: "
                },
                {
                  "kind": "Reference",
                  "text": "GridEntityType",
                  "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridEntityTypeCustom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!GridEntityCustomData#gridIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gridIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "gridIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!GridEntityCustomData#roomListIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomListIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomListIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!gridIndexToGridPosition:function(1)",
          "docComment": "/**\n * Helper function to convert a grid index to a grid position.\n *\n * For example, in a 1x1 room, grid index 0 is equal to \"Vector(-1, -1) and grid index 16 is equal to \"Vector(0, 0)\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function gridIndexToGridPosition(gridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "gridIndexToGridPosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!gridPositionToWorldPosition:function(1)",
          "docComment": "/**\n * Helper function to convert a grid position `Vector` to a world position `Vector`.\n *\n * For example, the coordinates of (0, 0) are equal to `Vector(80, 160)`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function gridPositionToWorldPosition(gridPosition: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "gridPositionToWorldPosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasCurse:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasCurse(curse: "
            },
            {
              "kind": "Reference",
              "text": "LevelCurse",
              "canonicalReference": "isaac-typescript-definitions!LevelCurse:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "curse",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasCurse"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasFlag:function(1)",
          "docComment": "/**\n * Helper function to determine if a particular bit flag is set to true.\n *\n * This is a variadic function, so pass as many flags as you want to check for. If passed multiple flags, it will only return true if all of the flags are set.\n *\n * For example:\n * ```ts\n * const player = Isaac.GetPlayer();\n * if (hasFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL) {\n *   // The player currently has spectral tears\n * }\n * ```\n *\n * @param flags - The existing set of bit flags.\n *\n * @param flagsToCheck - One or more bit flags to check for, each as a separate argument.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasFlag<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(flags: "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", ...flagsToCheck: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "flagsToCheck",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "hasFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasFlyingTemporaryEffect:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasFlyingTemporaryEffect(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasFlyingTemporaryEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasFlyingTransformation:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasFlyingTransformation(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasFlyingTransformation"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasLostCurse:function(1)",
          "docComment": "/**\n * After touching a white fire, a player will turn into The Lost until they clear a room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasLostCurse(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasLostCurse"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasOpenActiveItemSlot:function(1)",
          "docComment": "/**\n * Returns whether or not the player can hold an additional active item, beyond what they are currently carrying. This takes the Schoolbag into account.\n *\n * If the player is the Tainted Soul, this always returns false, since that character cannot pick up items. (Only Tainted Forgotten can pick up items.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasOpenActiveItemSlot(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasOpenActiveItemSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasOpenPocketItemSlot:function(1)",
          "docComment": "/**\n * Returns whether or not the player can hold an additional pocket item, beyond what they are currently carrying. This takes into account items that modify the max number of pocket items, like Starter Deck.\n *\n * If the player is the Tainted Soul, this always returns false, since that character cannot pick up items. (Only Tainted Forgotten can pick up items.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasOpenPocketItemSlot(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasOpenPocketItemSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasOpenTrinketSlot:function(1)",
          "docComment": "/**\n * Returns whether or not the player can hold an additional trinket, beyond what they are currently carrying. This takes into account items that modify the max number of trinkets, like Mom's Purse.\n *\n * If the player is the Tainted Soul, this always returns false, since that character cannot pick up items. (Only Tainted Forgotten can pick up items.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasOpenTrinketSlot(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasOpenTrinketSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasSirenStolenFamiliar:function(1)",
          "docComment": "/**\n * Helper function to check if the Siren boss has stolen a familiar. Some familiars may need to behave differently when under The Siren's control (e.g. if they auto-target enemies).\n *\n * @param familiar - The familiar to be checked.\n *\n * @returns Returns whether the familiar has been stolen by The Siren.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasSirenStolenFamiliar(familiar: "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "familiar",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "hasSirenStolenFamiliar"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hasVisitedStage:function(1)",
          "docComment": "/**\n * Helper function to check if a player has previous visited a particular stage (or stage + stage type combination) on this run.\n *\n * @param stage - The stage to check for.\n *\n * @param stageType - Optional. If provided, will check for a specific stage and stage type combination.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasVisitedStage(stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ", stageType?: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "stageType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "hasVisitedStage"
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!HealthType:enum",
          "docComment": "/**\n * This represents the type of health that is either given or taken away from a player. Note that we cannot use the `HeartSubType` enum for this purpose this since it has no value for broken hearts or max hearts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum HealthType "
            }
          ],
          "releaseTag": "Public",
          "name": "HealthType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.BLACK:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BLACK = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BLACK"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.BONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BONE = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BONE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.BROKEN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BROKEN = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BROKEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.ETERNAL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ETERNAL = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ETERNAL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.GOLDEN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GOLDEN = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "GOLDEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.MAX_HEARTS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MAX_HEARTS = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MAX_HEARTS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.RED:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RED = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.ROTTEN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ROTTEN = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ROTTEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!HealthType.SOUL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SOUL = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SOUL"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hexToColor:function(1)",
          "docComment": "/**\n * Converts a hex string like \"#33aa33\" to a KColor object.\n *\n * @param hexString - A hex string like \"#ffffff\" or \"ffffff\". (The \"#\" character is optional.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hexToColor(hexString: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", alpha: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hexString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "alpha",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "hexToColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!hexToKColor:function(1)",
          "docComment": "/**\n * Converts a hex string like \"#33aa33\" to a Color object.\n *\n * @param hexString - A hex string like \"#ffffff\" or \"ffffff\". (The \"#\" character is optional.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hexToKColor(hexString: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", alpha: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hexString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "alpha",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "hexToKColor"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!Immutable:type",
          "docComment": "/**\n * Immutable is a utility type that will make the given array/map/set/object recursively read-only.\n *\n * You can use this type to easily build safe data structures.\n *\n * From: https://stackoverflow.com/questions/41879327/deepreadonly-object-typescript\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Immutable<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends "
            },
            {
              "kind": "Reference",
              "text": "ImmutablePrimitive",
              "canonicalReference": "isaacscript-common!~ImmutablePrimitive:type"
            },
            {
              "kind": "Content",
              "text": " ? T : T extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<infer U> ? "
            },
            {
              "kind": "Reference",
              "text": "ImmutableArray",
              "canonicalReference": "isaacscript-common!~ImmutableArray:type"
            },
            {
              "kind": "Content",
              "text": "<U> : T extends "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<infer K, infer V> ? "
            },
            {
              "kind": "Reference",
              "text": "ImmutableMap",
              "canonicalReference": "isaacscript-common!~ImmutableMap:type"
            },
            {
              "kind": "Content",
              "text": "<K, V> : T extends "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<infer M> ? "
            },
            {
              "kind": "Reference",
              "text": "ImmutableSet",
              "canonicalReference": "isaacscript-common!~ImmutableSet:type"
            },
            {
              "kind": "Content",
              "text": "<M> : "
            },
            {
              "kind": "Reference",
              "text": "ImmutableObject",
              "canonicalReference": "isaacscript-common!~ImmutableObject:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Immutable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!in2x1Room:function(1)",
          "docComment": "/**\n * Helper function to determine if the current room shape is equal to `RoomShape.1x2` or `RoomShape.2x1`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function in2x1Room(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "in2x1Room"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inAngelShop:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inAngelShop(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inAngelShop"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inBeastRoom:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inBeastRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inBeastRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inBossRoomOf:function(1)",
          "docComment": "/**\n * Helper function to check if the current room is a boss room for a particular boss. This will only work for bosses that have dedicated boss rooms in the \"00.special rooms.stb\" file.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inBossRoomOf(bossID: "
            },
            {
              "kind": "Reference",
              "text": "BossID",
              "canonicalReference": "isaac-typescript-definitions!BossID:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bossID",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inBossRoomOf"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inCrawlSpace:function(1)",
          "docComment": "/**\n * Helper function for determining whether the current room is a crawl space. Use this function over comparing to `RoomType.DUNGEON` or `GridRoom.DUNGEON_IDX` since there is a special case of the player being in a boss fight that take place in a dungeon.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inCrawlSpace(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inCrawlSpace"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inDeathCertificateArea:function(1)",
          "docComment": "/**\n * Helper function to detect if the current room is one of the room in the Death Certificate area.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inDeathCertificateArea(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inDeathCertificateArea"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inDevilsCrownTreasureRoom:function(1)",
          "docComment": "/**\n * Helper function to detect if the current room is a Treasure Room created when entering with a Devil's Crown trinket.\n *\n * Under the hood, this checks for `RoomDescriptorFlag.DEVIL_TREASURE`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inDevilsCrownTreasureRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inDevilsCrownTreasureRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inDimension:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inDimension(dimension: "
            },
            {
              "kind": "Reference",
              "text": "Dimension",
              "canonicalReference": "isaac-typescript-definitions!Dimension:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "dimension",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inDimension"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inDoubleTrouble:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inDoubleTrouble(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inDoubleTrouble"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inGenesisRoom:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inGenesisRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inGenesisRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!initArray:function(1)",
          "docComment": "/**\n * Initializes an array with all elements containing the specified default value.\n *\n * For example:\n * ```ts\n * const playerTransformations = initArray(false, PlayerForm.NUM_PLAYER_FORMS - 1);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function initArray<T>(defaultValue: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", size: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "defaultValue",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "size",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "initArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!initCustomDoor:function(1)",
          "docComment": "/**\n * `isaacscript-common` provides custom doors that can be spawned where any wall segment is. If you use this feature, you must first call this initialization function at the beginning of your mod.\n *\n * Each kind of custom door that you create must have an entry in the \"content/entities2.xml\" file, like so:\n * ```xml\n * <entity id=\"1000\" name=\"Foo Custom Door\" anm2path=\"grid/door_foo.anm2\" />\n * ```\n *\n * (Custom door entities must have an id of \"1000\", which corresponds to an effect. If you do not specify the variant, then the game will automatically assign it.)\n *\n * Next, pass the variant into this function:\n * ```ts\n * const modVanilla = RegisterMod(\"My Mod\", 1);\n * const mod = upgradeMod(modVanilla);\n * const fooEffectVariant = Isaac.GetEntityVariantByName(\"Foo Custom Door\");\n * initCustomDoor(mod, fooEffectVariant);\n * ```\n *\n * Also see the `spawnCustomDoor` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function initCustomDoor(mod: "
            },
            {
              "kind": "Reference",
              "text": "ModUpgraded",
              "canonicalReference": "isaacscript-common!ModUpgraded:class"
            },
            {
              "kind": "Content",
              "text": ", effectVariant: "
            },
            {
              "kind": "Reference",
              "text": "EffectVariant",
              "canonicalReference": "isaac-typescript-definitions!EffectVariant:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mod",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "effectVariant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "initCustomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inLRoom:function(1)",
          "docComment": "/**\n * Helper function to determine if the current room shape is one of the four L room shapes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inLRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inLRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inMegaSatanRoom:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inMegaSatanRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inMegaSatanRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inMineShaft:function(1)",
          "docComment": "/**\n * Helper function to determine if the current room is part of the Repentance \"escape sequence\" in the Mines/Ashpit.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inMineShaft(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inMineShaft"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inMinibossRoomOf:function(1)",
          "docComment": "/**\n * Helper function to check if the current room is a miniboss room for a particular miniboss. This will only work for mini-bosses that have dedicated boss rooms in the \"00.special rooms.stb\" file.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inMinibossRoomOf(minibossID: "
            },
            {
              "kind": "Reference",
              "text": "MinibossID",
              "canonicalReference": "isaac-typescript-definitions!MinibossID:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "minibossID",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "inMinibossRoomOf"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inRectangle:function(1)",
          "docComment": "/**\n * Helper function to check if a given position is within a given rectangle.\n *\n * This is an inclusive check, meaning that it will return true if the position is on the border of the rectangle.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inRectangle(position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", topLeft: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", bottomRight: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "topLeft",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "bottomRight",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "inRectangle"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inSecretShop:function(1)",
          "docComment": "/**\n * Helper function for checking if the room is a secret shop (from the Member Card collectible).\n *\n * Secret shops are simply copies of normal shops, but with the backdrop of a secret room. In other words, they will have the same room type, room variant, and room sub-type of a normal shop. Thus, the only way to detect them is by using the grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inSecretShop(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inSecretShop"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!inStartingRoom:function(1)",
          "docComment": "/**\n * Helper function to determine whether or not the current room is the starting room of a floor. It only returns true for the starting room of the primary dimension (meaning that being in the starting room of the mirror world does not count).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inStartingRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "inStartingRoom"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!INVALID_STAGE_VALUE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "INVALID_STAGE_VALUE: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "INVALID_STAGE_VALUE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!irange:function(1)",
          "docComment": "/**\n * Helper function to return an array with the elements from start to end, inclusive. (The \"i\" stands for inclusive.)\n *\n * If only one argument is specified, then it will assume that the start is 0.\n *\n * - For example, `irange(1, 3)` will return `[1, 2, 3]`. - For example, `irange(2)` will return `[0, 1, 2]`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function irange(start: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", end?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "start",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "end",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "irange"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isaacAPIClassEquals:function(1)",
          "docComment": "/**\n * Helper function to check if an instantiated Isaac API class is equal to another one of the same type. You must provide the list of keys to check for.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isaacAPIClassEquals(object1: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", object2: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", keys: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "object2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "isaacAPIClassEquals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isActionPressedOnAnyInput:function(1)",
          "docComment": "/**\n * Iterates over all inputs to determine if a particular button is pressed (i.e. held down).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isActionPressedOnAnyInput(buttonAction: "
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "buttonAction",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isActionPressedOnAnyInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isActionTriggeredOnAnyInput:function(1)",
          "docComment": "/**\n * Iterates over all inputs to determine if a particular button is triggered (i.e. held down and then released).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isActionTriggeredOnAnyInput(buttonAction: "
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "buttonAction",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isActionTriggeredOnAnyInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isActiveCollectible:function(1)",
          "docComment": "/**\n * Returns true if the item type in the item config is equal to `ItemType.ITEM_ACTIVE`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isActiveCollectible(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isActiveCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isActiveSlotDoubleCharged:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isActiveSlotDoubleCharged(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", activeSlot: "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "activeSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isActiveSlotDoubleCharged"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isActiveSlotEmpty:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isActiveSlotEmpty(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", activeSlot: "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "activeSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isActiveSlotEmpty"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isAliveExceptionNPC:function(1)",
          "docComment": "/**\n * Checks for specific NPCs that have \"CanShutDoors\" set to true naturally by the game, but should not actually keep the doors closed (like Death's scythes).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isAliveExceptionNPC(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "npc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isAliveExceptionNPC"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isAllPressurePlatesPushed:function(1)",
          "docComment": "/**\n * Helper function to check if all of the pressure plates in the room are pushed.\n *\n * In this context, \"pressure plates\" refers to the grid entities that you have to press down in order for the room to be cleared. This function ignores other types of pressure plates, such as the ones that you press to get a reward, the ones that you press to start a Greed Mode wave, and so on.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isAllPressurePlatesPushed(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isAllPressurePlatesPushed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isAllRoomsClear:function(1)",
          "docComment": "/**\n * Helper function to loop through every room on the floor and see if it has been cleared.\n *\n * This function will only check rooms inside the gird and inside the current dimension.\n *\n * @param onlyCheckRoomTypes - Optional. A whitelist of room types. If specified, room types not in the array will be ignored. If not specified, then all rooms will be checked. Undefined by default.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isAllRoomsClear(onlyCheckRoomTypes?: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "onlyCheckRoomTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": true
            }
          ],
          "name": "isAllRoomsClear"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isAngelRoomDoor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isAngelRoomDoor(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isAngelRoomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isArray:function(1)",
          "docComment": "/**\n * Since Lua uses tables for every non-primitive data structure, it is non-trivial to determine if a particular table is being used as an array. `isArray` returns true if:\n *\n * - the table contains all numerical indexes that are contiguous, starting at 1 - the table has no keys (i.e. an \"empty\" table)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArray(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is unknown[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isArrayContiguous:function(1)",
          "docComment": "/**\n * Helper function to see if every element in the array is N + 1.\n *\n * For example, `[2, 3, 4]` would return true, and `[2, 3, 5]` would return false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArrayContiguous(array: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "isArrayContiguous"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isArrayInArray:function(1)",
          "docComment": "/**\n * Checks if an array is in the provided 2-dimensional array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isArrayInArray<T>(arrayToMatch: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", parentArray: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T[] | readonly T[]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arrayToMatch",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "parentArray",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isArrayInArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isBattery:function(1)",
          "docComment": "/**\n * For `PickupVariant.LIL_BATTERY` (90)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBattery(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBattery",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBattery:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBattery"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isBethany:function(1)",
          "docComment": "/**\n * Helper function for detecting when a player is Bethany or Tainted Bethany. This is useful if you need to adjust UI elements to account for Bethany's soul charges or Tainted Bethany's blood charges.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBethany(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBethany"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isBitSet128:function(1)",
          "docComment": "/**\n * Helper function to check if something is an instantiated `BitSet128` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBitSet128(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "BitSet128",
              "canonicalReference": "!BitSet128:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBitSet128"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isBlindCollectible:function(1)",
          "docComment": "/**\n * Returns true if the collectible has a red question mark sprite.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBlindCollectible(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBlindCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isBomb:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityBomb`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBomb(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityBomb:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBomb"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isBombPickup:function(1)",
          "docComment": "/**\n * For `PickupVariant.BOMB` (40)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBombPickup(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBomb:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBombPickup"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isBoolean:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBoolean(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCard:function(1)",
          "docComment": "/**\n * Returns true for cards that have the following card type: - CardType.TAROT - CardType.SUIT - CardType.SPECIAL - CardType.TAROT_REVERSE\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCard(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCardPickup:function(1)",
          "docComment": "/**\n * For `PickupVariant.TAROT_CARD` (300)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCardPickup(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCard",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCard:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isCardPickup"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCardType:function(1)",
          "docComment": "/**\n * Returns whether or not the given card matches the specified card type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCardType(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ", cardType: "
            },
            {
              "kind": "Reference",
              "text": "ItemConfigCardType",
              "canonicalReference": "isaac-typescript-definitions!ItemConfigCardType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "cardType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isCardType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCharacter:function(1)",
          "docComment": "/**\n * Helper function to check if a player is a specific character (i.e. `PlayerType`).\n *\n * This function is variadic, meaning that you can supply as many characters as you want to check for. Returns true if the player is any of the supplied characters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCharacter(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", ...characters: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "characters",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "isCharacter"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isChest:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isChest(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isChest"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isChildPlayer:function(1)",
          "docComment": "/**\n * Helper function to detect if a particular player is a \"child\" player, meaning that they have a non-undefined `EntityPlayer.Parent` field. (For example, the Strawman Keeper.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isChildPlayer(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isChildPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCircleIntersectingRectangle:function(1)",
          "docComment": "/**\n * From: https://www.geeksforgeeks.org/check-if-any-point-overlaps-the-given-circle-and-rectangle/\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCircleIntersectingRectangle(circleCenter: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", circleRadius: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ", rectangleTopLeft: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", rectangleBottomRight: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "circleCenter",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "circleRadius",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "rectangleTopLeft",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "rectangleBottomRight",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "isCircleIntersectingRectangle"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCloseEnoughToTriggerDiceFloor:function(1)",
          "docComment": "/**\n * Helper function to see if a player is close enough to activate a Dice Room floor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCloseEnoughToTriggerDiceFloor(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", diceFloor: "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "diceFloor",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isCloseEnoughToTriggerDiceFloor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCoin:function(1)",
          "docComment": "/**\n * For `PickupVariant.COIN` (20)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCoin(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCoin",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCoin:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isCoin"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCollectible:function(1)",
          "docComment": "/**\n * For `PickupVariant.COLLECTIBLE` (100)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCollectible(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCollectible",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCollectible:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCollectibleInItemPool:function(1)",
          "docComment": "/**\n * Helper function to see if the given collectible is still present in the given item pool.\n *\n * If the collectible is non-offensive, any Tainted Losts will be temporarily changed to Isaac and then changed back. (This is because Tainted Lost is not able to retrieve non-offensive collectibles from item pools).\n *\n * Under the hood, this function works by using the `ItemPool.AddRoomBlacklist` method to blacklist every collectible except for the one provided.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCollectibleInItemPool(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", itemPoolType: "
            },
            {
              "kind": "Reference",
              "text": "ItemPoolType",
              "canonicalReference": "isaac-typescript-definitions!ItemPoolType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "itemPoolType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isCollectibleInItemPool"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isCollectibleUnlocked:function(1)",
          "docComment": "/**\n * Helper function to see if the given collectible is unlocked on the current save file. This requires providing the corresponding item pool that the collectible is normally located in.\n *\n * - If any player currently has the collectible, then it is assumed to be unlocked. (This is because in almost all cases, when a collectible is added to a player's inventory, it is subsequently removed from all pools.) - If the collectible is located in more than one item pool, then any item pool can be provided. - If the collectible is not located in any item pools, then this function will always return false. - If the collectible is non-offensive, any Tainted Losts will be temporarily changed to Isaac and then changed back. (This is because Tainted Lost is not able to retrieve non-offensive collectibles from item pools).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCollectibleUnlocked(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", itemPoolType: "
            },
            {
              "kind": "Reference",
              "text": "ItemPoolType",
              "canonicalReference": "isaac-typescript-definitions!ItemPoolType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "itemPoolType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isCollectibleUnlocked"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isColor:function(1)",
          "docComment": "/**\n * Helper function to check if something is an instantiated `Color` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isColor(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDaddyLongLegsChildStompEntity:function(1)",
          "docComment": "/**\n * Helper function to distinguish between a normal Daddy Long Legs / Triachnid and the child entity that is spawned when the boss does the multi-stomp attack.\n *\n * When this attack occurs, four extra copies of Daddy Long Legs will be spawned with the same entity type, variant, and sub-type. The `Entity.Parent` field will be undefined in this case, so the way to tell them apart is to check for a non-undefined `Entity.SpawnerEntity` field.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDaddyLongLegsChildStompEntity(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "npc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDaddyLongLegsChildStompEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDamageFromPlayer:function(1)",
          "docComment": "/**\n * Helper function to see if a damage source is from a player. Use this instead of comparing to the entity directly because it takes familiars into account.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDamageFromPlayer(damageSource: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "damageSource",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDamageFromPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDamageToPlayerFatal:function(1)",
          "docComment": "/**\n * Uses the player's current health and other miscellaneous things to determine if incoming damage will be fatal.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDamageToPlayerFatal(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", damageAmount: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", damageSource: "
            },
            {
              "kind": "Reference",
              "text": "EntityRef",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityRef:interface"
            },
            {
              "kind": "Content",
              "text": ", lastDamageGameFrame: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "damageAmount",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "damageSource",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "lastDamageGameFrame",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "isDamageToPlayerFatal"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDeadEnd:function(1)",
          "docComment": "/**\n * Helper function to check if the given room grid index is a dead end. Specifically, this is defined as having only one adjacent room that exists.\n *\n * Note that this function does not take the shape of the room into account; it only looks at a single room grid index.\n *\n * This function does not care if the given room grid index actually exists, so you can use it to check if a hypothetical room would be a dead end.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDeadEnd(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isDeadEnd"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDefaultMap:function(1)",
          "docComment": "/**\n * Helper function to determine if a given object is a TypeScriptToLua `Map`.\n *\n * It is not reliable to use the `instanceof` operator to determine this because each Lua module has their own copies of the entire lualib and thus their own instantiated version of a `Map`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDefaultMap(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DefaultMap",
              "canonicalReference": "isaacscript-common!DefaultMap:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDefaultMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDevilRoomDoor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDevilRoomDoor(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDevilRoomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoor:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntityDoor`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoor(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorSlotInRoomShape:function(1)",
          "docComment": "/**\n * Helper function to see if a door slot could exist for a given room shape.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorSlotInRoomShape(doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isDoorSlotInRoomShape"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorSlotValidAtGridIndex:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorSlotValidAtGridIndex(doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isDoorSlotValidAtGridIndex"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorSlotValidAtGridIndexForRedRoom:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorSlotValidAtGridIndexForRedRoom(doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isDoorSlotValidAtGridIndexForRedRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorToDownpour:function(1)",
          "docComment": "/**\n * This refers to the Repentance door that spawns in a boss room after defeating the boss. You have to spend one key to open it. It has a sprite filename of \"gfx/grid/door_downpour.anm2\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorToDownpour(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDoorToDownpour"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorToMausoleum:function(1)",
          "docComment": "/**\n * This refers to the Repentance door that spawns in a boss room after defeating the boss. You have to spend two hearts to open it. It has a sprite filename of \"gfx/grid/door_mausoleum.anm2\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorToMausoleum(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDoorToMausoleum"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorToMausoleumAscent:function(1)",
          "docComment": "/**\n * This refers to the \"strange door\" located on the first room of Depths 2. You open it with either a Polaroid or a Negative. It has a sprite filename of \"gfx/grid/door_mausoleum_alt.anm2\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorToMausoleumAscent(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDoorToMausoleumAscent"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorToMines:function(1)",
          "docComment": "/**\n * This refers to the Repentance door that spawns in a boss room after defeating the boss. You have to spend two bombs to open it. It has a sprite filename of \"gfx/grid/door_mines.anm2\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorToMines(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDoorToMines"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDoorToMomsHeart:function(1)",
          "docComment": "/**\n * This refers to the Repentance door that spawns after defeating Mom. You open it with the completed knife. It has a sprite filename of \"gfx/grid/door_momsheart.anm2\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDoorToMomsHeart(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDoorToMomsHeart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isDyingEggyWithNoSpidersLeft:function(1)",
          "docComment": "/**\n * Helper function to detect the custom death state of an Eggy. Eggies are never actually marked dead by the game. Instead, when Eggies take fatal damage, they go into NpcState.STATE_SUICIDE and spawn 14 Swarm Spiders while their StateFrame ticks upwards.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDyingEggyWithNoSpidersLeft(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "npc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDyingEggyWithNoSpidersLeft"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isEden:function(1)",
          "docComment": "/**\n * Helper function for detecting when a player is Eden or Tainted Eden. Useful for situations where you want to know if the starting stats were randomized, for example.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEden(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEden"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isEffect:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityEffect`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEffect(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isEmptyFlag:function(1)",
          "docComment": "/**\n * Helper function to check if every bit in the flag is turned off.\n *\n * (This is equivalent to checking if the flag is equal to 0, but this is not possible without casting the flag to a number.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEmptyFlag<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(flag: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "flag",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isEmptyFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isEntity:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `Entity`. This will return false for child classes such as `EntityPlayer` or `EntityTear`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEntity(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isEntityMoving:function(1)",
          "docComment": "/**\n * Helper function to measure an entity's velocity to see if it is moving.\n *\n * @param entity - The entity whose velocity to measure.\n *\n * @param threshold - Optional. The threshold from 0 to consider to be moving. Default is 0.01.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEntityMoving(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": ", threshold?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "threshold",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "isEntityMoving"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isEven:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEven(num: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEven"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isFamiliar:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityEffect`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFamiliar(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFamiliar"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isFamiliarThatShootsPlayerTears:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFamiliarThatShootsPlayerTears(familiar: "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "familiar",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFamiliarThatShootsPlayerTears"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isFirstPlayer:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFirstPlayer(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFirstPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isFirstSlotPocketActiveItem:function(1)",
          "docComment": "/**\n * Helper function to determine whether or not the player's \"active\" pocket item slot is set to their pocket active item.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFirstSlotPocketActiveItem(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFirstSlotPocketActiveItem"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isFlyingCharacter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFlyingCharacter(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFlyingCharacter"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isFunction:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFunction(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isGlitchedCollectible:function(1)",
          "docComment": "/**\n * Returns whether or not the given collectible is a \"glitched\" item. All items are replaced by glitched items once a player has TMTRAINER. However, glitched items can also \"naturally\" appear in secret rooms and I AM ERROR rooms if the \"Corrupted Data\" achievement is unlocked.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGlitchedCollectible(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isGlitchedCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isGoldenTrinket:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGoldenTrinket(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isGoldenTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isGridEntity:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntity`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGridEntity(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isGridEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isGridEntityBreakableByExplosion:function(1)",
          "docComment": "/**\n * Helper function to see if the provided gridEntity is in its respective broken state. See the `GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP` constant for more details.\n *\n * Note that in the case of `GridEntityType.LOCK` (11), the state will turn to being broken before the actual collision for the entity is removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGridEntityBreakableByExplosion(gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isGridEntityBreakableByExplosion"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isGridEntityBroken:function(1)",
          "docComment": "/**\n * Helper function to detect whether a given Void Portal is one that randomly spawns after a boss is defeated or is one that naturally spawns in the room after Hush. (This is determined by looking at the VarData of the entity.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGridEntityBroken(gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isGridEntityBroken"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isHeart:function(1)",
          "docComment": "/**\n * For `PickupVariant.HEART` (10)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isHeart(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupHeart",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupHeart:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isHeart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isHiddenCollectible:function(1)",
          "docComment": "/**\n * Returns true if the collectible has the \"Hidden\" attribute in the item config.\n *\n * Hidden collectibles will not show up in any pools and Eden will not start with them.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isHiddenCollectible(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isHiddenCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isHiddenSecretRoomDoor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isHiddenSecretRoomDoor(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isHiddenSecretRoomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isHorsePill:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isHorsePill(pillColor: "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isHorsePill"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isIsaacAPIClass:function(1)",
          "docComment": "/**\n * Helper function to check if something is an instantiated class from the Isaac API. (All classes from the Isaac API have a type of \"userdata\" in Lua with a metatable key of \"__type\" equal to the name of the class.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isIsaacAPIClass(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "IsaacAPIClass",
              "canonicalReference": "!IsaacAPIClass:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isIsaacAPIClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isIsaacAPIClassOfType:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isIsaacAPIClassOfType(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", classType: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "classType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isIsaacAPIClassOfType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isIsaacScriptCommonClass:function(1)",
          "docComment": "/**\n * Returns whether or not this is a class that is provided by the `isaacscript-common` library, such as a `DefaultMap`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isIsaacScriptCommonClass(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isIsaacScriptCommonClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isJacobOrEsau:function(1)",
          "docComment": "/**\n * Helper function for detecting when a player is Jacob or Esau. This will only match the non-tainted versions of these characters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isJacobOrEsau(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isJacobOrEsau"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isKColor:function(1)",
          "docComment": "/**\n * Helper function to check if something is an instantiated `KColor` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isKColor(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isKColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isKeeper:function(1)",
          "docComment": "/**\n * Helper function for detecting when a player is Keeper or Tainted Keeper. Useful for situations where you want to know if the health is coin hearts, for example.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isKeeper(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isKeeper"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isKey:function(1)",
          "docComment": "/**\n * For `PickupVariant.KEY` (30)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isKey(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupKey",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupKey:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isKey"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isKeyboardPressed:function(1)",
          "docComment": "/**\n * Helper function to see if a particular keyboard key is being pressed down by the player.\n *\n * This function is variadic, meaning you can pass as many keyboard values as you want to check for. This function will return true if any of the values are pressed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isKeyboardPressed(...keys: "
            },
            {
              "kind": "Reference",
              "text": "Keyboard",
              "canonicalReference": "isaac-typescript-definitions!Keyboard:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "isKeyboardPressed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isKnife:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityKnife`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isKnife(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityKnife",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityKnife:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isKnife"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isLaser:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityLaser`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLaser(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityLaser",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityLaser:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isLaser"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isLeavingRoom:function(1)",
          "docComment": "/**\n * Helper function to detect if the game is in the state where the room index has changed to a new room, but the entities from the previous room are currently in the process of despawning. (At this point, the `POST_NEW_ROOM` callback will not have fired yet, and there will not be an entry in the room history array for the current room.)\n *\n * This function is intended to be used in the `POST_ENTITY_REMOVE` callback to detect when an entity is pseudo-persistent entity such as a pickup is despawning.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLeavingRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isLeavingRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isLost:function(1)",
          "docComment": "/**\n * Helper function for detecting when a player is The Lost or Tainted Lost.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLost(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isLost"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isLRoom:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLRoom(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isLRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isLuaDebugEnabled:function(1)",
          "docComment": "/**\n * Players can boot the game with an launch option called \"--luadebug\", which will enable additional functionality that is considered to be unsafe. For more information about this flag, see the wiki: https://bindingofisaacrebirth.fandom.com/wiki/Launch_Options\n *\n * When this flag is enabled, the global environment will be slightly different. The differences are documented here: https://wofsauge.github.io/IsaacDocs/rep/Globals.html\n *\n * This function uses the `package` global variable as a proxy to determine if the \"--luadebug\" flag is enabled or not.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLuaDebugEnabled(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isLuaDebugEnabled"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isModdedCard:function(1)",
          "docComment": "/**\n * Returns true for cards that have `CardType.MODDED`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isModdedCard(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isModdedCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isModdedCharacter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isModdedCharacter(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isModdedCharacter"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isModdedPlayer:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isModdedPlayer(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isModdedPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isModifierKeyPressed:function(1)",
          "docComment": "/**\n * Helper function to check if one or more modifier keys are being pressed down on the keyboard.\n *\n * A modifier key is defined as shift, control, alt, or Windows.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isModifierKeyPressed(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isModifierKeyPressed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isMoveAction:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isMoveAction(buttonAction: "
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "buttonAction",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isMoveAction"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isMoveActionPressedOnAnyInput:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isMoveActionPressedOnAnyInput(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isMoveActionPressedOnAnyInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isMoveActionTriggeredOnAnyInput:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isMoveActionTriggeredOnAnyInput(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isMoveActionTriggeredOnAnyInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isNarrowRoom:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNarrowRoom(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isNarrowRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isNPC:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityNPC`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNPC(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isNPC"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isNumber:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNumber(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isOdd:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isOdd(num: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isOdd"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPassiveCollectible:function(1)",
          "docComment": "/**\n * Returns true if the item type in the item config is equal to `ItemType.ITEM_PASSIVE` or `ItemType.ITEM_FAMILIAR`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPassiveCollectible(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPassiveCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPickingUpItemCollectible:function(1)",
          "docComment": "/**\n * Helper function to narrow the type of `PickingUpItem`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPickingUpItemCollectible(pickingUpItem: "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItem",
              "canonicalReference": "isaacscript-common!PickingUpItem:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickingUpItem",
              "canonicalReference": "isaacscript-common!~pickingUpItem"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItemCollectible",
              "canonicalReference": "isaacscript-common!PickingUpItemCollectible:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickingUpItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPickingUpItemCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPickingUpItemNull:function(1)",
          "docComment": "/**\n * Helper function to narrow the type of `PickingUpItem`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPickingUpItemNull(pickingUpItem: "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItem",
              "canonicalReference": "isaacscript-common!PickingUpItem:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickingUpItem",
              "canonicalReference": "isaacscript-common!~pickingUpItem"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItemTrinket",
              "canonicalReference": "isaacscript-common!PickingUpItemTrinket:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickingUpItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPickingUpItemNull"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPickingUpItemTrinket:function(1)",
          "docComment": "/**\n * Helper function to narrow the type of `PickingUpItem`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPickingUpItemTrinket(pickingUpItem: "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItem",
              "canonicalReference": "isaacscript-common!PickingUpItem:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickingUpItem",
              "canonicalReference": "isaacscript-common!~pickingUpItem"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItemTrinket",
              "canonicalReference": "isaacscript-common!PickingUpItemTrinket:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickingUpItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPickingUpItemTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPickup:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityPickup`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPickup(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPickup"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPill:function(1)",
          "docComment": "/**\n * For `PickupVariant.PILL` (70)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPill(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupPill",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupPill:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPill"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPit:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntityPit`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPit(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPit",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPit:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPit"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPlayer:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityPlayer`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPlayer(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPlayerUsingPony:function(1)",
          "docComment": "/**\n * Helper function to see if the player is under the effects of A Pony or White Pony charge. Detecting this is difficult, as the temporary effect will disappear upon entering a new room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPlayerUsingPony(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPlayerUsingPony"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPocketItemObject:function(1)",
          "docComment": "/**\n * Returns true for cards that have `CardType.SPECIAL_OBJECT`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPocketItemObject(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPocketItemObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPoop:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntityPoop`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPoop(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPoop:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPoop"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPoopPickup:function(1)",
          "docComment": "/**\n * For `PickupVariant.POOP` (42)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPoopPickup(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupPoop:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPoopPickup"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPostBossVoidPortal:function(1)",
          "docComment": "/**\n * Helper function to determine if all of the pressure plates in the current room are pushed. Returns true if there are no pressure plates in the room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPostBossVoidPortal(gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPostBossVoidPortal"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPressurePlate:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntityPressurePlate`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPressurePlate(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPressurePlate",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPressurePlate:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPressurePlate"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isPrimitive:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is a boolean, number, or string.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPrimitive(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is boolean | number | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPrimitive"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isProjectile:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityProjectile`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isProjectile(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isProjectile"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isQuestCollectible:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isQuestCollectible(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isQuestCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRaglingDeathPatch:function(1)",
          "docComment": "/**\n * Helper function to detect the custom death state of a Rag Man Ragling. When Rag Man Raglings die, they turn into a patch on the ground and can be revived by Rag Man at a later time. This causes them to show up as an \"alive\" enemy, so they should usually be filtered out of lists of alive enemies.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRaglingDeathPatch(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "npc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRaglingDeathPatch"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRedHeart:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRedHeart(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRedHeart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRedKeyRoom:function(1)",
          "docComment": "/**\n * Helper function to detect if the provided room was created by the Red Key item. Under the hood, this checks for the `RoomDescriptorFlag.FLAG_RED_ROOM` flag.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRedKeyRoom(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isRedKeyRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isReflectionRender:function(1)",
          "docComment": "/**\n * Since this is a UI element, we do not want to draw it in water reflections. `renderOffset` will be a non-zero value in reflections.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isReflectionRender(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isReflectionRender"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRepentanceDoor:function(1)",
          "docComment": "/**\n * Helper function to check if the provided door leads to the \"secret exit\" off-grid room that takes you to the Repentance floor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRepentanceDoor(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRepentanceDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRepentanceStage:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRepentanceStage(stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stageType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRepentanceStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isReverseTarotCard:function(1)",
          "docComment": "/**\n * Returns true for cards that have `CardType.TAROT_REVERSE`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isReverseTarotCard(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isReverseTarotCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRNG:function(1)",
          "docComment": "/**\n * Helper function to check if something is an instantiated `RNG` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRNG(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRNG"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRock:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntityRock`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRock(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntityRock",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityRock:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRock"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRoomInsideGrid:function(1)",
          "docComment": "/**\n * Helper function to determine if a given room grid index is inside of the normal 13x13 level grid.\n *\n * For example, Devil Rooms and the Mega Satan room are not considered to be inside the grid.\n *\n * @param roomGridIndex - Optional. Default is the current room index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRoomInsideGrid(roomGridIndex?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isRoomInsideGrid"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRoomShapeDoubleCharge:function(1)",
          "docComment": "/**\n * Helper function to see if a given room shape will grant a single charge or a double charge to the player's active item(s).\n *\n * For example, `RoomShape.SHAPE_2x2` will return true.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRoomShapeDoubleCharge(roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRoomShapeDoubleCharge"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isRune:function(1)",
          "docComment": "/**\n * Returns true for cards that have `CardType.RUNE`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRune(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isRune"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSack:function(1)",
          "docComment": "/**\n * For `PickupVariant.SACK` (69)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSack(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupSack",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupSack:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSack"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSecretRoomDoor:function(1)",
          "docComment": "/**\n * This refers to the hole in the wall that appears after bombing the entrance to a secret room. Note that the door still exists before it has been bombed open. It has a sprite filename of \"gfx/grid/door_08_holeinwall.anm2\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSecretRoomDoor(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSecretRoomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSelfDamage:function(1)",
          "docComment": "/**\n * Helper function to determine whether damage to a player in the EntityTakeDmg callback was self-inflicted. For example, damage from a Curse Room door, a Razor, or a Blood Donation Machine would count as self-inflicted damage.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSelfDamage(damageFlags: "
            },
            {
              "kind": "Reference",
              "text": "DamageFlag",
              "canonicalReference": "isaac-typescript-definitions!DamageFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DamageFlag",
              "canonicalReference": "isaac-typescript-definitions!DamageFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "damageFlags",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "isSelfDamage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSerializedBitSet128:function(1)",
          "docComment": "/**\n * Used to determine is the given table is a serialized `BitSet128` object created by the save data manager and/or the `deepCopy` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSerializedBitSet128(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SerializedBitSet128",
              "canonicalReference": "isaacscript-common!SerializedBitSet128:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSerializedBitSet128"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSerializedColor:function(1)",
          "docComment": "/**\n * Used to determine is the given table is a serialized `Color` object created by the save data manager and/or the `deepCopy` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSerializedColor(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SerializedColor",
              "canonicalReference": "isaacscript-common!SerializedColor:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSerializedColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSerializedIsaacAPIClass:function(1)",
          "docComment": "/**\n * Helper function to generically check if a given Lua table is a serialized Isaac API class. (This is used by the save data manager when reading data from the \"save#.dat\" file.)\n *\n * For the list of supported classes, see the `CopyableIsaacAPIClassType` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSerializedIsaacAPIClass(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SerializedIsaacAPIClass",
              "canonicalReference": "isaacscript-common!SerializedIsaacAPIClass:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSerializedIsaacAPIClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSerializedKColor:function(1)",
          "docComment": "/**\n * Used to determine is the given table is a serialized `KColor` object created by the save data manager and/or the `deepCopy` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSerializedKColor(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SerializedKColor",
              "canonicalReference": "isaacscript-common!SerializedKColor:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSerializedKColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSerializedRNG:function(1)",
          "docComment": "/**\n * Used to determine is the given table is a serialized `RNG` object created by the save data manager and/or the `deepCopy` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSerializedRNG(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SerializedRNG",
              "canonicalReference": "isaacscript-common!SerializedRNG:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSerializedRNG"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSerializedVector:function(1)",
          "docComment": "/**\n * Used to determine is the given table is a serialized `Vector` object created by the save data manager and/or the `deepCopy` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSerializedVector(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SerializedVector",
              "canonicalReference": "isaacscript-common!SerializedVector:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSerializedVector"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isShootAction:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isShootAction(buttonAction: "
            },
            {
              "kind": "Reference",
              "text": "ButtonAction",
              "canonicalReference": "isaac-typescript-definitions!ButtonAction:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "buttonAction",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isShootAction"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isShootActionPressedOnAnyInput:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isShootActionPressedOnAnyInput(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isShootActionPressedOnAnyInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isShootActionTriggeredOnAnyInput:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isShootActionTriggeredOnAnyInput(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "isShootActionTriggeredOnAnyInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSin:function(1)",
          "docComment": "/**\n * Helper function to check if the provided NPC is a Sin miniboss, such as Sloth or Lust.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSin(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "npc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSin"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSingleUseCollectible:function(1)",
          "docComment": "/**\n * Helper function to determine if a particular collectible will disappear from the player's inventory upon use. Note that this will not work will modded items, as there is no way to dynamically know if a modded item will disappear.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSingleUseCollectible(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSingleUseCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSlot:function(1)",
          "docComment": "/**\n * For `EntityType.SLOT` (6)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSlot(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "entity",
              "canonicalReference": "isaacscript-common!~entity"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntitySlot",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntitySlot:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSpecialCard:function(1)",
          "docComment": "/**\n * Returns true for cards that have `CardType.SPECIAL`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSpecialCard(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSpecialCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSpikes:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntitySpikes`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSpikes(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntitySpikes",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntitySpikes:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSpikes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isStoryBoss:function(1)",
          "docComment": "/**\n * Helper function to determine if the specified entity type is an end-game story boss, like Isaac, Blue Baby, Mega Satan, The Beast, and so on. This is useful because certain effects should only apply to non-story bosses, like Vanishing Twin. Also see the `STORY_BOSSES` constant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isStoryBoss(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isStoryBoss"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isString:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isString(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isString"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isSuitCard:function(1)",
          "docComment": "/**\n * Returns true for cards that have `CardType.SUIT`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSuitCard(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSuitCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTable:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTable(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTainted:function(1)",
          "docComment": "/**\n * Helper function for detecting if a player is one of the Tainted characters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTainted(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTainted"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTaintedLazarus:function(1)",
          "docComment": "/**\n * Helper function for detecting when a player is Tainted Lazarus or Dead Tainted Lazarus.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTaintedLazarus(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTaintedLazarus"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTarotCard:function(1)",
          "docComment": "/**\n * Returns true for cards that have `CardType.TAROT`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTarotCard(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTarotCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTear:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `EntityTear`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTear(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityTear",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityTear:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTear"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTNT:function(1)",
          "docComment": "/**\n * Helper function to detect if a variable is of type `GridEntityTNT`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTNT(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GridEntityTNT",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityTNT:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTNT"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTransformationFlying:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTransformationFlying(playerForm: "
            },
            {
              "kind": "Reference",
              "text": "PlayerForm",
              "canonicalReference": "isaac-typescript-definitions!PlayerForm:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerForm",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTransformationFlying"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTrinket:function(1)",
          "docComment": "/**\n * For `PickupVariant.TRINKET` (350)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTrinket(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "pickup",
              "canonicalReference": "isaacscript-common!~pickup"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupTrinket",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupTrinket:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTSTLMap:function(1)",
          "docComment": "/**\n * Helper function to determine if a given object is a TypeScriptToLua `Map`.\n *\n * It is not reliable to use the `instanceof` operator to determine this because each Lua module has their own copies of the entire lualib and thus their own instantiated version of a `Map`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTSTLMap(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTSTLMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isTSTLSet:function(1)",
          "docComment": "/**\n * Helper function to determine if a given object is a TypeScriptToLua `Set`.\n *\n * It is not reliable to use the `instanceof` operator to determine this because each Lua module has their own copies of the entire lualib and thus their own instantiated version of a `Set`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTSTLSet(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTSTLSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isUserdata:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isUserdata(variable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "variable",
              "canonicalReference": "isaacscript-common!~variable"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LuaUserdata",
              "canonicalReference": "!LuaUserdata:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isUserdata"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isUserDefinedTSTLClass:function(1)",
          "docComment": "/**\n * TypeScriptToLua classes are Lua tables that have a metatable with a certain amount of keys.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isUserDefinedTSTLClass(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "TSTLClass",
              "canonicalReference": "isaacscript-common!TSTLClass:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isUserDefinedTSTLClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isValidCollectibleType:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isValidCollectibleType(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isValidCollectibleType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isValidGridPosition:function(1)",
          "docComment": "/**\n * Test if a grid position is actually in the given `RoomShape`.\n *\n * In this context, the grid position of the top-left wall is \"Vector(-1, -1)\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isValidGridPosition(gridPosition: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", roomShape: "
            },
            {
              "kind": "Reference",
              "text": "RoomShape",
              "canonicalReference": "isaac-typescript-definitions!RoomShape:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomShape",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isValidGridPosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isVanillaCharacter:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isVanillaCharacter(character: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isVanillaCharacter"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isVanillaConsoleCommand:function(1)",
          "docComment": "/**\n * Helper function to see if a particular command is a vanilla console command. This is useful because the `EXECUTE_CMD` callback will not fire for any vanilla commands.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isVanillaConsoleCommand(commandName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isVanillaConsoleCommand"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isVanillaPlayer:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isVanillaPlayer(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isVanillaPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isVanillaTSTLClass:function(1)",
          "docComment": "/**\n * Returns whether or not this is a class that is provided as part of the TypeScriptToLua transpiler, such as a `Map` or a `Set`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isVanillaTSTLClass(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isVanillaTSTLClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!isVector:function(1)",
          "docComment": "/**\n * Helper function to check if something is an instantiated `Vector` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isVector(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "isaacscript-common!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isVector"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!itemConfig:var",
          "docComment": "/**\n * A cached version of the class returned from the `Isaac.GetItemConfig()` constructor.\n *\n * Use this instead of invoking the constructor again for a miniscule performance increase.\n *\n * Caching the results of this constructor is safe, but caching other classes (like `Level` or `Room`) is not safe and can lead to the game crashing in certain situations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "itemConfig: "
            },
            {
              "kind": "Reference",
              "text": "ItemConfig",
              "canonicalReference": "isaac-typescript-definitions!~__global.ItemConfig:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "itemConfig",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!iterateTableInOrder:function(1)",
          "docComment": "/**\n * Helper function to iterate over a table deterministically. This is useful because by default, the `pairs` function will return the keys of a Lua table in a random order.\n *\n * This function will sort the table entries based on the value of the key.\n *\n * This function will only work on tables that have number keys or string keys. It will throw a run-time error if it encounters a key of another type.\n *\n * @param luaMap - The table to iterate over.\n *\n * @param func - The function to run for each iteration.\n *\n * @param inOrder - Optional. Whether to iterate in order. True by default. You can dynamically set to false in situations where iterating randomly would not matter and you need the extra performance.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function iterateTableInOrder<K, V>(luaMap: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ", func: "
            },
            {
              "kind": "Content",
              "text": "(key: K, value: V) => void"
            },
            {
              "kind": "Content",
              "text": ", inOrder?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "luaMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "inOrder",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "iterateTableInOrder"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!jsonDecode:function(1)",
          "docComment": "/**\n * Converts a JSON string to a Lua table.\n *\n * In most cases, this function will be used for reading data from a \"save#.dat\" file. If decoding fails, it will return a blank Lua table instead of throwing an error. (This allows execution to continue in cases where users have no current save data or have manually removed their existing save data.)\n *\n * Under the hood, this uses a custom JSON parser that was measured to be 11.8 times faster than the vanilla JSON parser.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function jsonDecode(jsonString: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jsonString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "jsonDecode"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!JSONDoor:interface",
          "docComment": "/**\n * Part of `JSONRooms`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONDoor "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONDoor",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONDoor#$:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        exists: string;\n        x: string;\n        y: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!jsonEncode:function(1)",
          "docComment": "/**\n * Converts a Lua table to a JSON string.\n *\n * In most cases, this function will be used for writing data to a \"save#.dat\" file. If encoding fails, it will throw an error to prevent writing a blank string or corrupted data to a user's \"save#.dat\" file.\n *\n * Under the hood, this uses a custom JSON parser that was measured to be 11.8 times faster than the vanilla JSON parser.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function jsonEncode(luaTable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "luaTable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "jsonEncode"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!JSONEntity:interface",
          "docComment": "/**\n * Part of `JSONRooms`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONEntity "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONEntity",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONEntity#$:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        type: string;\n        variant: string;\n        subtype: string;\n        weight: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!JSONRoom:interface",
          "docComment": "/**\n * Part of `JSONRooms`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONRoom "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONRoom",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONRoom#$:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        difficulty: string;\n        height: string;\n        name: string;\n        shape: string;\n        subtype: string;\n        type: string;\n        variant: string;\n        weight: string;\n        width: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONRoom#door:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "door: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONDoor",
                  "canonicalReference": "isaacscript-common!JSONDoor:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "door",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONRoom#spawn:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "spawn: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSpawn",
                  "canonicalReference": "isaacscript-common!JSONSpawn:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "spawn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!JSONRooms:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONRooms "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONRooms",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONRooms#room:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "room: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONRoom",
                  "canonicalReference": "isaacscript-common!JSONRoom:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "room",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!JSONRoomsFile:interface",
          "docComment": "/**\n * The standard library has the feature to deploy a new room on-the-fly with the `deployJSONRoom` helper function. It requires a `JSONRoomsFile` as an argument, which is simply an XML file converted to JSON. (You create XML room files using the Basement Renovator program.)\n *\n * You can convert your XML files using the following command:\n * ```sh\n * npx convert-xml-to-json foo.xml foo.json\n * ```\n *\n * Note that the custom stages feature of the standard library uses real XML/STB files, not JSON rooms, so you would only need to do this if you are using the `deployJSONRoom` command specifically.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONRoomsFile "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONRoomsFile",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONRoomsFile#rooms:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rooms: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONRooms",
                  "canonicalReference": "isaacscript-common!JSONRooms:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rooms",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!JSONSpawn:interface",
          "docComment": "/**\n * Part of `JSONRooms`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JSONSpawn "
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSpawn",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONSpawn#$:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        x: string;\n        y: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "$",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!JSONSpawn#entity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "entity: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONEntity",
                  "canonicalReference": "isaacscript-common!JSONEntity:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "entity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!KColorDefault:var",
          "docComment": "/**\n * Equal to `KColor(1, 1, 1, 1)`.\n *\n * If you need to mutate this, make a copy first with the `copyKColor` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "KColorDefault: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "KColorDefault",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!kColorEquals:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function kColorEquals(kColor1: "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": ", kColor2: "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "kColor1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "kColor2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "kColorEquals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!keyboardToString:function(1)",
          "docComment": "/**\n * Helper function to get the string that would be typed if someone pressed the corresponding key.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function keyboardToString(keyboard: "
            },
            {
              "kind": "Reference",
              "text": "Keyboard",
              "canonicalReference": "isaac-typescript-definitions!Keyboard:enum"
            },
            {
              "kind": "Content",
              "text": ", uppercase: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keyboard",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "uppercase",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "keyboardToString"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_CARD:var",
          "docComment": "/**\n * Will change depending on how many modded cards there are.\n *\n * Equal to `itemConfig.GetCards().Size - 1`. (We subtract one to account for `Card.NULL`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_CARD: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_CARD",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_COLLECTIBLE_TYPE:var",
          "docComment": "/**\n * Will change depending on how many modded collectibles there are.\n *\n * Equal to `itemConfig.GetCollectibles().Size - 1`. (`Size` includes invalid collectibles, like 666. We subtract one to account for `CollectibleType.NULL`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_COLLECTIBLE_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_COLLECTIBLE_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_HORSE_PILL_COLOR:var",
          "docComment": "/**\n * Equal to `PillColor.HORSE_WHITE_YELLOW`.\n *\n * Note that `PillColor.HORSE_GOLD` is technically higher, but that is not considered for the purposes of this constant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_HORSE_PILL_COLOR = "
            },
            {
              "kind": "Reference",
              "text": "PillColor.HORSE_WHITE_YELLOW",
              "canonicalReference": "isaac-typescript-definitions!PillColor.HORSE_WHITE_YELLOW:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_HORSE_PILL_COLOR",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_NORMAL_PILL_COLOR:var",
          "docComment": "/**\n * Equal to `PillColor.WHITE_YELLOW`.\n *\n * Note that `PillColor.GOLD` is technically higher, but that is not considered for the purposes of this constant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_NORMAL_PILL_COLOR = "
            },
            {
              "kind": "Reference",
              "text": "PillColor.WHITE_YELLOW",
              "canonicalReference": "isaac-typescript-definitions!PillColor.WHITE_YELLOW:member"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_NORMAL_PILL_COLOR",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_PILL_EFFECT:var",
          "docComment": "/**\n * Will change depending on how many modded pill effects there are.\n *\n * Equal to `itemConfig.GetPillEffects().Size - 1`. (We subtract one to account for `PillEffect.NULL`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_PILL_EFFECT: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_PILL_EFFECT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_ROOM_TYPE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_ROOM_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_ROOM_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_STAGE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_STAGE: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_STAGE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_TRINKET_TYPE:var",
          "docComment": "/**\n * Will change depending on how many modded cards there are.\n *\n * Equal to `itemConfig.GetTrinkets().Size - 1`. (We subtract one to account for `TrinketType.NULL`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_TRINKET_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_TRINKET_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_VANILLA_CHARACTER:var",
          "docComment": "/**\n * Calculated from the `PlayerType` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_VANILLA_CHARACTER: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_VANILLA_CHARACTER",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_VANILLA_COLLECTIBLE_TYPE:var",
          "docComment": "/**\n * Calculated from the `CollectibleType` enum.\n *\n * Note that this cannot be calculated from the length of the enum, because unlike all of the other enums, collectible types are not contiguous.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_VANILLA_COLLECTIBLE_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_VANILLA_COLLECTIBLE_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_VANILLA_PILL_EFFECT:var",
          "docComment": "/**\n * Calculated from the `PillEffect` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_VANILLA_PILL_EFFECT: "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_VANILLA_PILL_EFFECT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LAST_VANILLA_TRINKET_TYPE:var",
          "docComment": "/**\n * Calculated from the `TrinketType` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LAST_VANILLA_TRINKET_TYPE: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LAST_VANILLA_TRINKET_TYPE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!lerp:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function lerp(a: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", pos: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "pos",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "lerp"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!lerpAngleDegrees:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function lerpAngleDegrees(aStart: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", aEnd: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", percent: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "aStart",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "aEnd",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "percent",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "lerpAngleDegrees"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LEVEL_GRID_COLUMN_HEIGHT:var",
          "docComment": "/**\n * The floor is represented by a 13x13 grid. Room indexes start at 0. The first column is represented by grid indexes 0, 13, 26, and so on.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LEVEL_GRID_COLUMN_HEIGHT = "
            },
            {
              "kind": "Content",
              "text": "13"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LEVEL_GRID_COLUMN_HEIGHT",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!LEVEL_GRID_ROW_WIDTH:var",
          "docComment": "/**\n * The floor is represented by a 13x13 grid. Room indexes start at 0. The first row is represented by grid indexes from 0 to 12. The second row is represented by grid indexes from 13 to 25, and so on.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LEVEL_GRID_ROW_WIDTH = "
            },
            {
              "kind": "Content",
              "text": "13"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "LEVEL_GRID_ROW_WIDTH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!lockDoor:function(1)",
          "docComment": "/**\n * Helper function to reset an unlocked door back to a locked state. Doing this is non-trivial because in addition to calling the `GridEntityDoor.SetLocked` method, you must also:\n *\n * - Set the `VisitedCount` of the room's `RoomDescription` to 0. - Set the variant to `DoorVariant.DOOR_LOCKED`. - Close the door.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function lockDoor(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "lockDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!log:function(1)",
          "docComment": "/**\n * Helper function to avoid typing out `Isaac.DebugString()`.\n *\n * If you have the \"--luadebug\" launch flag turned on or the Racing+ sandbox enabled, then this function will also prepend the function name and the line number before the string.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function log(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", msg: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "msg",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "log"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logAllEntities:function(1)",
          "docComment": "/**\n * Helper function for printing out every entity (or filtered entity) in the current room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logAllEntities(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", includeBackgroundEffects: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", entityTypeFilter?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeBackgroundEffects",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "entityTypeFilter",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "logAllEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logAllGridEntities:function(1)",
          "docComment": "/**\n * Helper function for printing out every grid entity (or filtered grid entity) in the current room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logAllGridEntities(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", includeWalls: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", gridEntityTypeFilter?: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "includeWalls",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "gridEntityTypeFilter",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "logAllGridEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logArray:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logArray<T>(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", array: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "logArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logColor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logColor(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", color: "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logDamageFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every damage flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logDamageFlags(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", flags: "
            },
            {
              "kind": "Reference",
              "text": "DamageFlag",
              "canonicalReference": "isaac-typescript-definitions!DamageFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DamageFlag",
              "canonicalReference": "isaac-typescript-definitions!DamageFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "logDamageFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logEntities:function(1)",
          "docComment": "/**\n * Helper function for logging an array of specific entities.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logEntities(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", entities: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "logEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logEntity:function(1)",
          "docComment": "/**\n * Helper function to log information about a specific entity.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logEntity(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logEntityFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every entity flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logEntityFlags(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", flags: "
            },
            {
              "kind": "Reference",
              "text": "EntityFlag",
              "canonicalReference": "isaac-typescript-definitions!EntityFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EntityFlag",
              "canonicalReference": "isaac-typescript-definitions!EntityFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "logEntityFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logEntityID:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logEntityID(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logEntityID"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logError:function(1)",
          "docComment": "/**\n * Helper function to log an error message and also print it to the console for better visibility.\n *\n * This is useful in situations where using the `error` function would be dangerous (since it prevents all of the subsequent code in the callback from running).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logError(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", msg: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "msg",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logError"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logFlags<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", flags: "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", flagEnum: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, T>"
            },
            {
              "kind": "Content",
              "text": ", description?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "flagEnum",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": false
            },
            {
              "parameterName": "description",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "logFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logGameStateFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every game state flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logGameStateFlags(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "logGameStateFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logGridEntities:function(1)",
          "docComment": "/**\n * Helper function for logging an array of specific grid entities.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logGridEntities(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", gridEntities: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridEntities",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "logGridEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logGridEntity:function(1)",
          "docComment": "/**\n * Helper function for log information about a specific grid entity.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logGridEntity(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logGridEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logKColor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logKColor(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", kColor: "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "kColor",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logKColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logLevelStateFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every level state flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logLevelStateFlags(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "logLevelStateFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logMap:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logMap(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "logMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logNewGlobals:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logNewGlobals(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "logNewGlobals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logPlayerEffects:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logPlayerEffects(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logPlayerEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logPlayerHealth:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logPlayerHealth(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logPlayerHealth"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logProjectileFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every projectile flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logProjectileFlags(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", flags: "
            },
            {
              "kind": "Reference",
              "text": "ProjectileFlag",
              "canonicalReference": "isaac-typescript-definitions!ProjectileFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ProjectileFlag",
              "canonicalReference": "isaac-typescript-definitions!ProjectileFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "logProjectileFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logRoom:function(1)",
          "docComment": "/**\n * Helper function for logging information about the current room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logRoom(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "logRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logSeedEffects:function(1)",
          "docComment": "/**\n * Helper function for printing out every seed effect (i.e. Easter Egg) that is turned on for the particular run.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logSeedEffects(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "logSeedEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logSet:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logSet(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "name": "logSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logSounds:function(1)",
          "docComment": "/**\n * Helper function for logging every sound effect that is currently playing.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logSounds(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "logSounds"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logTable:function(1)",
          "docComment": "/**\n * Helper function for logging every key and value of a table. This is a deep log; the function will recursively call itself if it counters a table within a table.\n *\n * This function will only work on tables that have string keys (because it logs the keys in order, instead of randomly). It will throw a run-time error if it encounters a non-string key.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logTable(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", luaTable: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", parentTables?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "luaTable",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "parentTables",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "logTable"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logTableDifferences:function(1)",
          "docComment": "/**\n * Helper function to print out the differences between the entries of two tables. Note that this will only do a shallow comparison.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logTableDifferences<K, V>(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", table1: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ", table2: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "table1",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "table2",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "logTableDifferences"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logTearFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every tear flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logTearFlags(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", flags: "
            },
            {
              "kind": "Reference",
              "text": "TearFlag",
              "canonicalReference": "isaac-typescript-definitions!TearFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TearFlag",
              "canonicalReference": "isaac-typescript-definitions!TearFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "logTearFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logUseFlags:function(1)",
          "docComment": "/**\n * Helper function for printing out every use flag that is turned on. Useful when debugging.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logUseFlags(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", flags: "
            },
            {
              "kind": "Reference",
              "text": "UseFlag",
              "canonicalReference": "isaac-typescript-definitions!UseFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "UseFlag",
              "canonicalReference": "isaac-typescript-definitions!UseFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "logUseFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logUserdata:function(1)",
          "docComment": "/**\n * Helper function to enumerate all of the properties of a \"userdata\" object (i.e. an object from the Isaac API).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logUserdata(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", userdata: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "userdata",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "logUserdata"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!logVector:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function logVector(this: "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ", vector: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", round?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "this",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "vector",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "round",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "logVector"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!mapGetPlayer:function(1)",
          "docComment": "/**\n * Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the `Map.get` method if you have a map of this type.\n *\n * For example:\n * ```ts\n * const v = {\n *   run: {\n *     playersSpeedBoost: new Map<PlayerIndex, int>(),\n *   },\n * };\n *\n * function incrementSpeedBoost(player: EntityPlayer) {\n *   const oldSpeedBoost = mapGetPlayer(v.run.playersSpeedBoost, player);\n *   const newSpeedBoost = oldSpeedBoost + 0.1;\n *   mapSetPlayer(v.run.playersSpeedBoost, player);\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapGetPlayer<V>(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ", V>"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "V | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapGetPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!mapHasPlayer:function(1)",
          "docComment": "/**\n * Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the `Map.has` method if you have a map of this type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapHasPlayer<V>(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ", V>"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapHasPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!mapSetPlayer:function(1)",
          "docComment": "/**\n * Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the `Map.set` method if you have a map of this type.\n *\n * For example:\n * ```ts\n * const v = {\n *   run: {\n *     playersSpeedBoost: new Map<PlayerIndex, int>(),\n *   },\n * };\n *\n * function incrementSpeedBoost(player: EntityPlayer) {\n *   const oldSpeedBoost = mapGetPlayer(v.run.playersSpeedBoost, player);\n *   const newSpeedBoost = oldSpeedBoost + 0.1;\n *   mapSetPlayer(v.run.playersSpeedBoost, player);\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapSetPlayer<V>(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ", V>"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "V"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapSetPlayer"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_LEVEL_GRID_INDEX:var",
          "docComment": "/**\n * The floor is represented by a 13x13 grid. Room indexes start at 0. The first row is represented by grid indexes from 0 to 12. The second row is represented by grid indexes from 13 to 25, and so on. The maximum room index possible is 168. (It is not 169 because we start at 0 instead of 1.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_LEVEL_GRID_INDEX = "
            },
            {
              "kind": "Content",
              "text": "168"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_LEVEL_GRID_INDEX",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_NUM_FAMILIARS:var",
          "docComment": "/**\n * The game has a limit on the number of currently spawned familiars and will refuse to spawn any more if it reaches the limit. Blue flies and blue spiders have a lower priority and will be deleted to make room for other familiars.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_NUM_FAMILIARS = "
            },
            {
              "kind": "Content",
              "text": "64"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_NUM_FAMILIARS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_NUM_INPUTS:var",
          "docComment": "/**\n * The game can only handle up to four different players.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_NUM_INPUTS = "
            },
            {
              "kind": "Content",
              "text": "4"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_NUM_INPUTS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_PLAYER_HEART_CONTAINERS:var",
          "docComment": "/**\n * With Birthright, it is possible for Magdalene to have 18 heart containers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_PLAYER_HEART_CONTAINERS = "
            },
            {
              "kind": "Content",
              "text": "18"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_PLAYER_HEART_CONTAINERS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_PLAYER_SPEED_IN_UNITS:var",
          "docComment": "/**\n * As the player continues to move in a direction, they will accelerate. When going from one wall to another in a 2x2 room at 2.0 speed (the maximum that the speed stat can rise to), the amount of units moved per update frame will climb to around 9.797 as they hit the opposite wall. The constant specifies a value of 9.8 to be safe.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_PLAYER_SPEED_IN_UNITS = "
            },
            {
              "kind": "Content",
              "text": "9.8"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_PLAYER_SPEED_IN_UNITS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_PLAYER_TRINKET_SLOTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_PLAYER_TRINKET_SLOTS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_PLAYER_TRINKET_SLOTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_SPEED_STAT:var",
          "docComment": "/**\n * The maximum speed stat that a player can have. Any additional speed beyond this will not take effect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_SPEED_STAT = "
            },
            {
              "kind": "Content",
              "text": "2"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_SPEED_STAT",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_TAINTED_SAMSON_BERSERK_CHARGE:var",
          "docComment": "/**\n * Corresponds to the maximum value for `EntityPlayer.SamsonBerserkCharge`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_TAINTED_SAMSON_BERSERK_CHARGE = "
            },
            {
              "kind": "Content",
              "text": "100000"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_TAINTED_SAMSON_BERSERK_CHARGE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MAX_VANILLA_CARD:var",
          "docComment": "/**\n * Calculated from the `Card` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAX_VANILLA_CARD: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MAX_VANILLA_CARD",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MIN_PLAYER_SHOT_SPEED_STAT:var",
          "docComment": "/**\n * If you set `EntityPlayer.ShotSpeed` lower than this value, it will have no effect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MIN_PLAYER_SHOT_SPEED_STAT = "
            },
            {
              "kind": "Content",
              "text": "0.6"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MIN_PLAYER_SHOT_SPEED_STAT",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MIN_PLAYER_SPEED_STAT:var",
          "docComment": "/**\n * If you set `EntityPlayer.Speed` lower than this value, it will have no effect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MIN_PLAYER_SPEED_STAT = "
            },
            {
              "kind": "Content",
              "text": "0.1"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MIN_PLAYER_SPEED_STAT",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!MINUTE_IN_MILLISECONDS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MINUTE_IN_MILLISECONDS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MINUTE_IN_MILLISECONDS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!ModCallbackCustom:enum",
          "docComment": "/**\n * - The Isaac API offers a lot of callbacks, but a lot of times there isn't one for the specific thing that you are looking to do. So, `isaacscript-common` adds a bunch of new callbacks that you can use. - The extra callbacks are efficient such that no code is executed until there is one or more subscriptions. - You must upgrade your mod with the `upgradeMod` helper function before using a custom callback.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ModCallbackCustom "
            }
          ],
          "releaseTag": "Public",
          "name": "ModCallbackCustom",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_AMBUSH_FINISHED:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when a Challenge Room or Boss Rush is started. Specifically, this happens on the first frame that `Room.IsAmbushDone` is true.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if for the `AmbushType` provided.\n * ```ts\n * function postAmbushFinished(ambushType: AmbushType): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_AMBUSH_FINISHED = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_AMBUSH_FINISHED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_AMBUSH_STARTED:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when a Challenge Room or Boss Rush is completed. Specifically, this happens on the first frame that `Room.IsAmbushActive` is true.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if for the `AmbushType` provided.\n * ```ts\n * function postAmbushStarted(ambushType: AmbushType): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_AMBUSH_STARTED = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_AMBUSH_STARTED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_BOMB_EXPLODED:member",
              "docComment": "/**\n * Fires on the `POST_BOMB_UPDATE` callback that it explodes.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the bomb variant matches the `BombVariant` provided.\n * ```ts\n * function postBombDetonated(bomb: EntityBomb): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_BOMB_EXPLODED = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_BOMB_EXPLODED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_BOMB_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_BOMB_UPDATE` frame for each bomb.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_BOMB_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the bomb variant matches the `BombVariant` provided.\n * ```ts\n * function postBombInitLate(bomb: EntityBomb): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_BOMB_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_BOMB_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_BONE_SWING:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback when one of Forgotten's bone clubs is swung or thrown.\n * ```ts\n * function postBoneSwing(boneClub: EntityKnife): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_BONE_SWING = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_BONE_SWING"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_COLLECTIBLE_EMPTY:member",
              "docComment": "/**\n * Fires from the `POST_PICKUP_UPDATE` callback when a collectible goes from a non-zero sub-type to `CollectibleType.NULL` (i.e. an \"empty\" pedestal).\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the collectible type changed from the `CollectibleType` provided.\n * ```ts\n * function postCollectibleEmpty(\n *   collectible: EntityPickupCollectible,\n *   oldCollectibleType: CollectibleType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_COLLECTIBLE_EMPTY = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_COLLECTIBLE_EMPTY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_COLLECTIBLE_INIT_FIRST:member",
              "docComment": "/**\n * Fires from the `POST_PICKUP_INIT` callback on the first time that a player has seen the respective collectible on the run. For more details on how this is calculated, see the documentation for the `getCollectibleIndex` helper function.\n *\n * This callback is useful because collectibles will despawn upon leaving the room and respawn upon re-entering the room. Additionally, when playing as Tainted Isaac, the `POST_PICKUP_INIT` callback will fire every time the item shifts.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the collectible type matches the `CollectibleType` provided.\n * ```ts\n * function postCollectibleInitLate(collectible: EntityPickup): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_COLLECTIBLE_INIT_FIRST = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_COLLECTIBLE_INIT_FIRST"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_CURSED_TELEPORT:member",
              "docComment": "/**\n * Fires from the `POST_PLAYER_RENDER` callback on the first frame that the \"TeleportUp\" animation begins playing after a player triggers a Cursed Eye teleport or a Cursed Skull teleport. (Both of these have the same effect in causing Isaac to be teleported to a random room.)\n * ```ts\n * function postCursedTeleport(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_CURSED_TELEPORT = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_CURSED_TELEPORT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_CUSTOM_DOOR_ENTER:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when a player enters the loading zone of a custom door created with the `spawnCustomDoor` helper function.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `DoorVariant` provided.\n * ```ts\n * function postCustomDoorEnter(\n *   player: EntityPlayer,\n *   effectVariant: int,\n *   doorSlot: DoorSlot,\n *   direction: Direction,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_CUSTOM_DOOR_ENTER = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_CUSTOM_DOOR_ENTER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_CUSTOM_REVIVE:member",
              "docComment": "/**\n * Fires from the `POST_PLAYER_UPDATE` callback after the player has finished the death animation, has teleported to the previous room, and is ready to play the animation for the modded revival item. The `revivalType` will match the value returned from the `PRE_CUSTOM_REVIVE` callback.\n *\n * In this callback, you must play an animation with something along the lines of `player.AnimateCollectible(CollectibleTypeCustom.COLLECTIBLE_MY_REVIVAL_ITEM);`, otherwise the animation for a 1-Up will play.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the revival type matches the one provided.\n * ```ts\n * function postCustomRevive(player: EntityPlayer, revivalType: int): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_CUSTOM_REVIVE = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_CUSTOM_REVIVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_DICE_ROOM_ACTIVATED:member",
              "docComment": "/**\n * Fires from the `EFFECT_POST_UPDATE` callback after a player has entered the range of a Dice Room floor.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the `DiceFloorSubType` type matches the one provided.\n * ```ts\n * function postDiceRoomActivated(\n *   player: EntityPlayer,\n *   diceFloorSubType: DiceFloorSubType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_DICE_ROOM_ACTIVATED = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_DICE_ROOM_ACTIVATED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_DOOR_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a door exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postDoorRender(door: GridEntityDoor): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_DOOR_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_DOOR_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_DOOR_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a door exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postDoorUpdate(door: GridEntityDoor): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_DOOR_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_DOOR_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_EFFECT_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_EFFECT_UPDATE` frame for each effect.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_EFFECT_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the effect variant matches the `EffectVariant` provided.\n * ```ts\n * function postEffectInitLate(effect: EntityEffect): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_EFFECT_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_EFFECT_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_EFFECT_STATE_CHANGED:member",
              "docComment": "/**\n * Fires from the `POST_EFFECT_UPDATE` callback when an effect's state has changed from what it was on the previous frame.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `EffectVariant` provided.\n * ```ts\n * function postEffectStateChanged(\n *   effect: EntityEffect,\n *   previousState: int,\n *   currentState: int,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_EFFECT_STATE_CHANGED = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_EFFECT_STATE_CHANGED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_ESAU_JR:member",
              "docComment": "/**\n * Fires one `POST_UPDATE` frame after the player has used the Esau Jr. item. (The player is not updated to the new character until a game frame has passed.)\n * ```ts\n * function postEsauJr(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_ESAU_JR = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_ESAU_JR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_FAMILIAR_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `FAMILIAR_UPDATE` frame for each familiar.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_TEAR_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the familiar variant matches the `FamiliarVariant` provided.\n * ```ts\n * function postFamiliarInitLate(familiar: EntityFamiliar): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_FAMILIAR_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_FAMILIAR_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_FAMILIAR_STATE_CHANGED:member",
              "docComment": "/**\n * Fires from the `POST_FAMILIAR_UPDATE` callback when a familiar's state has changed from what it was on the previous frame.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `FamiliarVariant` provided.\n * ```ts\n * function postFamiliarStateChanged(\n *   familiar: EntityFamiliar,\n *   previousState: int,\n *   currentState: int,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_FAMILIAR_STATE_CHANGED = "
                },
                {
                  "kind": "Content",
                  "text": "17"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_FAMILIAR_STATE_CHANGED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_FIRST_ESAU_JR:member",
              "docComment": "/**\n * Fires one `POST_UPDATE` frame after the player has first used the Esau Jr. item. (The player is not updated to the new character until a game frame has passed.)\n *\n * This callback is useful because there is no way to get access to the Esau Jr. character entity before the player has actually used the Esau Jr. item.\n * ```ts\n * function postFirstEsauJr(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_FIRST_ESAU_JR = "
                },
                {
                  "kind": "Content",
                  "text": "18"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_FIRST_ESAU_JR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_FIRST_FLIP:member",
              "docComment": "/**\n * Fires after the player has used the Flip item for the first time. Unlike the vanilla `USE_ITEM` callback, this callback will return the player object for the new Lazarus (not the one who used the Flip item).\n *\n * This callback is useful because there is no way to get access to the \"flipped\" character entity before the player has actually used the Flip item.\n * ```ts\n * function postFirstFlip(newLazarus: EntityPlayer, oldLazarus: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_FIRST_FLIP = "
                },
                {
                  "kind": "Content",
                  "text": "19"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_FIRST_FLIP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_FLIP:member",
              "docComment": "/**\n * Fires after the player has used the Flip item. Unlike the vanilla `USE_ITEM` callback, this callback will return the player object for the new Lazarus (not the one who used the Flip item).\n *\n * This callback is useful because there is no way to get access to the \"flipped\" character entity before the player has actually used the Flip item.\n * ```ts\n * function postFlip(newLazarus: EntityPlayer, oldLazarus: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_FLIP = "
                },
                {
                  "kind": "Content",
                  "text": "20"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_FLIP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GAME_STARTED_REORDERED:member",
              "docComment": "/**\n * Similar to the vanilla callback of the same name, but fires in the correct order with respect to the `POST_NEW_LEVEL` and the `POST_NEW_ROOM` callbacks:\n *\n * `POST_GAME_STARTED_REORDERED` --> `POST_NEW_LEVEL_REORDERED` --> `POST_NEW_ROOM_REORDERED`\n * ```ts\n * function postGameStartedReordered(isContinued: boolean): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GAME_STARTED_REORDERED = "
                },
                {
                  "kind": "Content",
                  "text": "21"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GAME_STARTED_REORDERED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GREED_MODE_WAVE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when the Greed Mode wave increases.\n * ```ts\n * function postGreedModeWave(oldWave: int, newWave: int): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GREED_MODE_WAVE = "
                },
                {
                  "kind": "Content",
                  "text": "22"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GREED_MODE_WAVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_BROKEN:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when a grid entity changes to a state that corresponds to the broken state for the respective grid entity type.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityBroken(gridEntity: GridEntity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_BROKEN = "
                },
                {
                  "kind": "Content",
                  "text": "23"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_BROKEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_COLLISION:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when a new entity collides with a grid entity.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityCollision(\n *   gridEntity: GridEntity,\n *   entity: Entity,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_COLLISION = "
                },
                {
                  "kind": "Content",
                  "text": "24"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_COLLISION"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_BROKEN:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when a grid entity created with the `spawnCustomGridEntity` helper function is hit by an explosion.\n *\n * In most cases, you will want to remove the grid entity inside of this callback in order to prevent further \"broken\" callbacks from firing. (This would not be the case if you were trying to emulate a super tinted rock that takes multiple explosions to destroy, for example.)\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityCustomBroken(\n *   gridEntity: GridEntity,\n *   gridEntityTypeCustom: GridEntityType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_CUSTOM_BROKEN = "
                },
                {
                  "kind": "Content",
                  "text": "25"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_CUSTOM_BROKEN"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_COLLISION:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback a new entity collides with a grid entity created with the `spawnCustomGridEntity` helper function.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityCustomRender(\n *   gridEntity: GridEntity,\n *   gridEntityTypeCustom: GridEntityType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_CUSTOM_COLLISION = "
                },
                {
                  "kind": "Content",
                  "text": "26"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_CUSTOM_COLLISION"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a grid entity created with the `spawnCustomGridEntity` helper function exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityCustomRender(\n *   gridEntity: GridEntity,\n *   gridEntityTypeCustom: GridEntityType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_CUSTOM_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "27"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_CUSTOM_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a grid entity created with the `spawnCustomGridEntity` helper function exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityCustomUpdate(\n *   gridEntity: GridEntity,\n *   gridEntityTypeCustom: GridEntityType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_CUSTOM_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "28"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_CUSTOM_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_INIT:member",
              "docComment": "/**\n * Fires when a new grid entity is initialized. Specifically, this is either:\n *\n * - in the `POST_NEW_ROOM` callback (firing every time a room is entered, even if the entity was previously there on a previous room entry) - in the `POST_UPDATE` callback (if the entity appeared mid-way through the room, like when the trapdoor appears after defeating It Lives!)\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityInit(gridEntity: GridEntity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_INIT = "
                },
                {
                  "kind": "Content",
                  "text": "29"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_INIT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_REMOVE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when a new grid entity is removed. Specifically, this on the frame after it no longer exists (where it did exist a frame ago).\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityRemove(\n *   gridIndex: int,\n *   gridEntityType: GridEntityType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_REMOVE = "
                },
                {
                  "kind": "Content",
                  "text": "30"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_REMOVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a grid entity exists.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postGridEntityRender(gridEntity: GridEntity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "31"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_STATE_CHANGED:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when a grid entity changes its state.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided.\n * ```ts\n * function postGridEntityStateChanged(\n *   gridEntity: GridEntity,\n *   oldState: int,\n *   newState: int,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_STATE_CHANGED = "
                },
                {
                  "kind": "Content",
                  "text": "32"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_STATE_CHANGED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_GRID_ENTITY_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a grid entity exists.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `GridEntityType` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postGridEntityUpdate(gridEntity: GridEntity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_GRID_ENTITY_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "33"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_GRID_ENTITY_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_HOLY_MANTLE_REMOVED:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when the player loses a Holy Mantle temporary collectible effect.\n *\n * This callback is useful because you might want to have code that happens when the player is hit from an enemy. Normally, you would accomplish this via the `ENTITY_TAKE_DMG` callback, but that callback never fires if the player has a Holy Mantle shield.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerInitReordered(\n *   player: EntityPlayer,\n *   oldNumHolyMantles: int,\n *   newNumHolyMantles: int,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_HOLY_MANTLE_REMOVED = "
                },
                {
                  "kind": "Content",
                  "text": "34"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_HOLY_MANTLE_REMOVED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_ITEM_DISCHARGE:member",
              "docComment": "/**\n * Fires from `POST_PEFFECT_UPDATE` callback when the player loses charge on their active collectible item, implying that the item was just used.\n *\n * This callback is useful because the `USE_ITEM` callback does not fire when The Candle, Red Candle, and Bob's Rotten Brain are discharged.\n *\n * Note that this callback will not fire if the active item is both discharged and swapped for another item / discharged on the same frame, like in the case of Alabaster Box.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `CollectibleType` provided.\n * ```ts\n * function postItemDischarge(\n *   player: EntityPlayer,\n *   collectibleType: CollectibleType,\n *   activeSlot: ActiveSlot,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_ITEM_DISCHARGE = "
                },
                {
                  "kind": "Content",
                  "text": "35"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_ITEM_DISCHARGE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_ITEM_PICKUP:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when an item is no longer queued (i.e. when the animation of the player holding the item above their head is finished and the item is actually added to the player's inventory).\n *\n * Note that this callback will only fire once per Forgotten/Soul pair.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `ItemType` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the `CollectibleType` or the `TrinketType` matches the sub-type provided.\n * ```ts\n * function postItemPickup(\n *   player: EntityPlayer,\n *   pickingUpItem: PickingUpItem,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_ITEM_PICKUP = "
                },
                {
                  "kind": "Content",
                  "text": "36"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_ITEM_PICKUP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_KNIFE_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_KNIFE_UPDATE` frame for each knife.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_KNIFE_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the knife variant matches the `KnifeVariant` provided.\n * ```ts\n * function postKnifeInitLate(knife: EntityKnife): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_KNIFE_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "37"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_KNIFE_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_LASER_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_LASER_UPDATE` frame for each laser.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_LASER_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the laser variant matches the `LaserVariant` provided.\n * ```ts\n * function postLaserInitLate(laser: EntityLaser): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_LASER_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "38"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_LASER_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_NEW_LEVEL_REORDERED:member",
              "docComment": "/**\n * The same as the vanilla callback of the same name, but fires in the correct order with respect to the `POST_GAME_STARTED` and the `POST_NEW_ROOM` callbacks:\n *\n * `POST_GAME_STARTED_REORDERED` --> `POST_NEW_LEVEL_REORDERED` --> `POST_NEW_ROOM_REORDERED`\n *\n * If some specific cases, mods can change the current level during run initialization (on the 0th frame). However, due to how the callback reordering works, the custom `POST_NEW_LEVEL_REORDERED` callback will never fire on the 0th frame. To get around this, call the `forceNewLevelCallback()` function before changing levels to temporarily force the callback to fire.\n * ```ts\n * function postNewLevelReordered(): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_NEW_LEVEL_REORDERED = "
                },
                {
                  "kind": "Content",
                  "text": "39"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_NEW_LEVEL_REORDERED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_NEW_ROOM_EARLY:member",
              "docComment": "/**\n * Fires on the first `POST_NEW_ROOM` or `PRE_ENTITY_SPAWN` callback where being in a new room is detected. This is useful because the vanilla `POST_NEW_ROOM` callback fires only after entities in the room have been initialized and updated once, which means that it is possible for entity-related code to run before room-related-initialization has been performed.\n * ```ts\n * function postNewRoomEarly(): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_NEW_ROOM_EARLY = "
                },
                {
                  "kind": "Content",
                  "text": "40"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_NEW_ROOM_EARLY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_NEW_ROOM_REORDERED:member",
              "docComment": "/**\n * The same as the vanilla callback of the same name, but fires in the correct order with respect to the `POST_GAME_STARTED` and the `POST_NEW_LEVEL` callbacks:\n *\n * `POST_GAME_STARTED_REORDERED` --> `POST_NEW_LEVEL_REORDERED` --> `POST_NEW_ROOM_REORDERED`\n *\n * If some specific cases, mods can change the current room during run initialization (on the 0th frame). However, due to how the callback reordering works, the custom `POST_NEW_ROOM_REORDERED` callback will never fire on the 0th frame. To get around this, call the `forceNewRoomCallback()` function before changing levels to temporarily force the callback to fire.\n * ```ts\n * function postNewRoomReordered(): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_NEW_ROOM_REORDERED = "
                },
                {
                  "kind": "Content",
                  "text": "41"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_NEW_ROOM_REORDERED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_NPC_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `NPC_UPDATE` frame for each NPC.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_NPC_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the NPC's entity type matches the entity type provided.\n * ```ts\n * function postNPCInitLate(npc: EntityNPC): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_NPC_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "42"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_NPC_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_NPC_STATE_CHANGED:member",
              "docComment": "/**\n * Fires from the `POST_NPC_UPDATE` callback when an NPC's state has changed from what it was on the previous frame.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `EntityType` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postNPCStateChanged(\n *   npc: EntityNPC,\n *   previousState: int,\n *   currentState: int,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_NPC_STATE_CHANGED = "
                },
                {
                  "kind": "Content",
                  "text": "43"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_NPC_STATE_CHANGED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED:member",
              "docComment": "/**\n * Similar to the vanilla callback of the same name, but fires after the `POST_GAME_STARTED` callback fires (if the player is being updated on the 0th game frame of the run).\n *\n * This callback is useful for two reasons:\n *\n * 1. Normally, `POST_PEFFECT_UPDATE` fires before `POST_GAME_STARTED`. Since mod variables are often initialized at the beginning of the `POST_GAME_STARTED` callback, this can cause problems. 1. Some functions do not work (or crash the game) when called before the `POST_NEW_ROOM` callback. For example, since the level is not generated yet, you will not be able to access any rooms.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPEffectUpdateReordered(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PEFFECT_UPDATE_REORDERED = "
                },
                {
                  "kind": "Content",
                  "text": "44"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PEFFECT_UPDATE_REORDERED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PICKUP_COLLECT:member",
              "docComment": "/**\n * Fires on the first `POST_RENDER` frame that a pickup plays the \"Collect\" animation.\n *\n * Use this callback to know when a pickup is added to the player's inventory or health.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the pickup variant matches the `PickupVariant` provided.\n * ```ts\n * function postPickupCollect(pickup: EntityPickup, player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PICKUP_COLLECT = "
                },
                {
                  "kind": "Content",
                  "text": "45"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PICKUP_COLLECT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PICKUP_INIT_FIRST:member",
              "docComment": "/**\n * Fires from the `POST_PICKUP_INIT` callback on the first time that a player has seen the respective pickup on the run.\n *\n * This callback is useful because pickups will despawn upon leaving the room and respawn upon re-entering the room.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the collectible type matches the `PickupVariant` provided.\n * ```ts\n * function postPickupInitFirst(pickup: EntityPickup): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PICKUP_INIT_FIRST = "
                },
                {
                  "kind": "Content",
                  "text": "46"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PICKUP_INIT_FIRST"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PICKUP_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_PICKUP_UPDATE` frame for each pickup.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_PICKUP_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the pickup variant matches the `PickupVariant` provided.\n * ```ts\n * function postPickupInitLate(pickup: EntityPickup): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PICKUP_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "47"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PICKUP_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PICKUP_STATE_CHANGED:member",
              "docComment": "/**\n * Fires from the `POST_PICKUP_UPDATE` callback when a pickup's state has changed from what it was on the previous frame.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `PickupVariant` provided.\n * ```ts\n * function postPickupStateChanged(\n *   pickup: EntityPickup,\n *   previousState: int,\n *   currentState: int,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PICKUP_STATE_CHANGED = "
                },
                {
                  "kind": "Content",
                  "text": "48"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PICKUP_STATE_CHANGED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PIT_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a pit exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postPitRender(pit: GridEntityPit): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PIT_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "49"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PIT_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PIT_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a pit exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postPitUpdate(pit: GridEntityPit): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PIT_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "50"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PIT_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_CHANGE_HEALTH:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when a player's health (i.e. hearts) is different than what it was on the previous frame. For more information, see the `PlayerHealth` enum.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerChangeHealth(\n *   player: EntityPlayer,\n *   healthType: HealthType,\n *   difference: int,\n *   oldValue: int,\n *   newValue: int,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_CHANGE_HEALTH = "
                },
                {
                  "kind": "Content",
                  "text": "51"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_CHANGE_HEALTH"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_CHANGE_STAT:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when one of the player's stats change from what they were on the previous frame.\n *\n * The type of `oldValue` and `newValue` will depend on what kind of stat it is. For example, `StatType.FLYING` will be a boolean. (You can use the \"Types\" helper functions to narrow the type.)\n *\n * For `StatType.TEAR_FLAG`, `StatType.TEAR_COLOR`, `StatType.FLYING`, and `StatType.SIZE`, the `difference` argument will always be a value of 0, since the type of these stats are not numbers. (For these cases, you should examine the `oldValue` and `newValue` arguments accordingly.)\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerChangeStat(\n *   player: EntityPlayer,\n *   statType: StatType,\n *   difference: int,\n *   oldValue: number | boolean | BitFlags<TearFlag> | Color | Vector,\n *   newValue: number | boolean | BitFlags<TearFlag> | Color | Vector,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_CHANGE_STAT = "
                },
                {
                  "kind": "Content",
                  "text": "52"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_CHANGE_STAT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_CHANGE_TYPE:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when a player entity changes its player type (i.e. character) from what it was on the previous frame. For example, it will fire after using Clicker, after dying with the Judas' Shadow collectible, etc.\n *\n * Notably, it does not fire after the player uses the Flip item or the Esau Jr. item, because those items cause separate player entities to be created. Use the `POST_FLIP` and `POST_ESAU_JR` callbacks to handle those situations.\n * ```ts\n * function postPlayerChangeType(\n *   player: EntityPlayer,\n *   oldCharacter: PlayerType,\n *   newCharacter: PlayerType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_CHANGE_TYPE = "
                },
                {
                  "kind": "Content",
                  "text": "53"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_CHANGE_TYPE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when a player's collectible count is higher than what it was on the previous frame.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the collectible matches the `CollectibleType` provided.\n * ```ts\n * function postPlayerCollectibleAdded(\n *   player: EntityPlayer,\n *   collectibleType: CollectibleType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_COLLECTIBLE_ADDED = "
                },
                {
                  "kind": "Content",
                  "text": "54"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_COLLECTIBLE_ADDED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when a player's collectible count is lower than what it was on the previous frame.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the collectible matches the `CollectibleType` provided.\n * ```ts\n * function postPlayerCollectibleRemoved(\n *   player: EntityPlayer,\n *   collectibleType: CollectibleType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_COLLECTIBLE_REMOVED = "
                },
                {
                  "kind": "Content",
                  "text": "55"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_COLLECTIBLE_REMOVED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE:member",
              "docComment": "/**\n * Fires from the `ENTITY_TAKE_DMG` callback when a player takes fatal damage. Return false to prevent the fatal damage.\n *\n * Note that this function does properly take into account Guppy's Collar, Broken Ankh, Spirit Shackles, and Mysterious Paper. It also takes into account using The Bible on Satan.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerFatalDamage(player: EntityPlayer): boolean | undefined {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_FATAL_DAMAGE = "
                },
                {
                  "kind": "Content",
                  "text": "56"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_FATAL_DAMAGE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_INIT_FIRST:member",
              "docComment": "/**\n * Fires on the first `POST_PEFFECT_UPDATE_REORDERED` frame for each player, similar to the `POST_PLAYER_INIT_LATE` callback, with two changes:\n *\n * - This will not fire for \"child\" players (e.g. non-real players like the Strawman Keeper). - This will fire when the player enters a Genesis room and all of their items are taken away.\n *\n * You should use this callback for any player-related initialization logic, like giving the character their starting items for the run. (You do not want to use the vanilla `POST_PLAYER_INIT` callback for this because it fires when a run is continued.)\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerInitFirst(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_INIT_FIRST = "
                },
                {
                  "kind": "Content",
                  "text": "57"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_INIT_FIRST"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_PEFFECT_UPDATE_REORDERED` frame for each player.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_PLAYER_INIT` callback.\n *\n * For initializing a player with custom items and so forth, use the `POST_PLAYER_INIT_FIRST` callback instead to handle the case of a Genesis room.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerInitLate(pickup: EntityPickup): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "58"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_RENDER_REORDERED:member",
              "docComment": "/**\n * Similar to the vanilla callback of the same name, but fires after the `POST_GAME_STARTED` callback fires (if the player is spawning on the 0th game frame of the run).\n *\n * This callback is useful for two reasons:\n *\n * 1. Normally, `POST_PLAYER_RENDER` fires before `POST_GAME_STARTED`. Since mod variables are often initialized at the beginning of the `POST_GAME_STARTED` callback, this can cause problems. 1. Some functions do not work (or crash the game) when called before the `POST_NEW_ROOM` callback. For example, since the level is not generated yet, you will not be able to access any rooms.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerRenderReordered(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_RENDER_REORDERED = "
                },
                {
                  "kind": "Content",
                  "text": "59"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_RENDER_REORDERED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PLAYER_UPDATE_REORDERED:member",
              "docComment": "/**\n * Similar to the vanilla callback of the same name, but fires after the `POST_GAME_STARTED` callback fires (if the player is being updated on the 0th game frame of the run).\n *\n * This callback is useful for two reasons:\n *\n * 1. Normally, `POST_PLAYER_UPDATE` fires before `POST_GAME_STARTED`. Since mod variables are often initialized at the beginning of the `POST_GAME_STARTED` callback, this can cause problems. 1. Some functions do not work (or crash the game) when called before the `POST_NEW_ROOM` callback. For example, since the level is not generated yet, you will not be able to access any rooms.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postPlayerUpdateReordered(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PLAYER_UPDATE_REORDERED = "
                },
                {
                  "kind": "Content",
                  "text": "60"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PLAYER_UPDATE_REORDERED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_POOP_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a poop exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postPoopRender(poop: GridEntityPoop): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_POOP_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "61"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_POOP_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_POOP_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a poop exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postPoopUpdate(poop: GridEntityPoop): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_POOP_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "62"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_POOP_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PRESSURE_PLATE_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a pressure plate exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postPressurePlateRender(pressurePlate: GridEntityPressurePlate): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PRESSURE_PLATE_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "63"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PRESSURE_PLATE_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PRESSURE_PLATE_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a pressure plate exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postPressurePlateUpdate(pressurePlate: GridEntityPressurePlate): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PRESSURE_PLATE_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "64"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PRESSURE_PLATE_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PROJECTILE_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_PROJECTILE_UPDATE` frame for each projectile.\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_PROJECTILE_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the projectile variant matches the `ProjectileVariant` provided.\n * ```ts\n * function postProjectileInitLate(projectile: EntityProjectile): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PROJECTILE_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "65"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PROJECTILE_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_PURCHASE:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when a player first picks up a new item. The pickup returned in the callback is assumed to be the first pickup that no longer exists.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `PickupVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if it matches the sub-type provided.\n * ```ts\n * function postPurchase(player: EntityPlayer, pickup: EntityPickup): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_PURCHASE = "
                },
                {
                  "kind": "Content",
                  "text": "66"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_PURCHASE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_ROCK_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a rock exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postRockRender(rock: GridEntityRock): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_ROCK_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "67"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_ROCK_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_ROCK_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a rock exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postRockUpdate(rock: GridEntityRock): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_ROCK_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "68"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_ROCK_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_ROOM_CLEAR_CHANGED:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback when the clear state of a room changes.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the room clear state matches the boolean provided.\n * ```ts\n * function postRoomClearChanged(roomClear: boolean): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_ROOM_CLEAR_CHANGED = "
                },
                {
                  "kind": "Content",
                  "text": "69"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_ROOM_CLEAR_CHANGED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SACRIFICE:member",
              "docComment": "/**\n * Fires from the `ENTITY_TAKE_DMG` callback when a player takes damage from spikes in a Sacrifice Room.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function postSacrifice(player: EntityPlayer, numSacrifices: int): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SACRIFICE = "
                },
                {
                  "kind": "Content",
                  "text": "70"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SACRIFICE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SLOT_ANIMATION_CHANGED:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback when a slot entity's animation changes.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `SlotVariant` provided.\n * ```ts\n * function postSlotAnimationChanged(slot: Entity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SLOT_ANIMATION_CHANGED = "
                },
                {
                  "kind": "Content",
                  "text": "71"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SLOT_ANIMATION_CHANGED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SLOT_DESTROYED:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback when a slot plays the animation that indicates that it has broken.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `SlotVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the destruction type matches the `SlotDestructionType` provided.\n * ```ts\n * function postSlotDestroyed(slot: Entity, slotDestructionType: SlotDestructionType): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SLOT_DESTROYED = "
                },
                {
                  "kind": "Content",
                  "text": "72"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SLOT_DESTROYED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SLOT_INIT:member",
              "docComment": "/**\n * Fires when a new slot entity is initialized. Specifically, this is either:\n *\n * - in the `POST_NEW_ROOM` callback (firing every time a room is entered, even if the entity was previously there on a previous room entry) - in the `POST_UPDATE` callback (if the entity appeared mid-way through the room, like when a Wheel of Fortune card is used)\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `SlotVariant` provided.\n * ```ts\n * function postSlotInit(slot: Entity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SLOT_INIT = "
                },
                {
                  "kind": "Content",
                  "text": "73"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SLOT_INIT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SLOT_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a slot entity exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `SlotVariant` provided.\n * ```ts\n * function postSlotRender(slot: Entity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SLOT_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "74"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SLOT_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SLOT_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a slot entity exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `SlotVariant` provided.\n * ```ts\n * function postSlotUpdate(slot: Entity): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SLOT_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "75"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SLOT_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SPIKES_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that spikes exist.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postSpikesRender(spikes: GridEntitySpikes): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SPIKES_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "76"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SPIKES_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_SPIKES_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that spikes exist.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postSpikesUpdate(spikes: GridEntitySpikes): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_SPIKES_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "77"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_SPIKES_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_TEAR_INIT_LATE:member",
              "docComment": "/**\n * Fires on the first `POST_TEAR_UPDATE` frame for each tear (which is when `EntityTear.FrameCount` is equal to 0).\n *\n * This callback is useful because many attributes cannot be set or retrieved properly in the normal `POST_TEAR_INIT` callback.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the tear variant matches the `TearVariant` provided.\n * ```ts\n * function postTearInitLate(tear: EntityTear): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_TEAR_INIT_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "78"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_TEAR_INIT_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_TEAR_INIT_VERY_LATE:member",
              "docComment": "/**\n * Fires on the second `POST_TEAR_UPDATE` frame for each tear (which is when `EntityTear.FrameCount` is equal to 1).\n *\n * This callback is useful because Incubus tears are not distinguishable until the second frame.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if the tear variant matches the `TearVariant` provided.\n * ```ts\n * function postTearInitVeryLate(tear: EntityTear): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_TEAR_INIT_VERY_LATE = "
                },
                {
                  "kind": "Content",
                  "text": "79"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_TEAR_INIT_VERY_LATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_TNT_RENDER:member",
              "docComment": "/**\n * Fires from the `POST_RENDER` callback on every frame that a TNT exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postTNTRender(tnt: GridEntityTNT): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_TNT_RENDER = "
                },
                {
                  "kind": "Content",
                  "text": "80"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_TNT_RENDER"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_TNT_UPDATE:member",
              "docComment": "/**\n * Fires from the `POST_UPDATE` callback on every frame that a TNT exists.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the variant provided.\n * ```ts\n * function postTNTUpdate(tnt: GridEntityTNT): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_TNT_UPDATE = "
                },
                {
                  "kind": "Content",
                  "text": "81"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_TNT_UPDATE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_TRANSFORMATION:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when a player gains or loses a new transformation.\n *\n * Note that this callback will only fire once per Forgotten/Soul pair.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `PlayerForm` provided.\n * ```ts\n * function postTransformation(\n *   player: EntityPlayer,\n *   playerForm: PlayerForm,\n *   hasForm: boolean,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_TRANSFORMATION = "
                },
                {
                  "kind": "Content",
                  "text": "82"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_TRANSFORMATION"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.POST_TRINKET_BREAK:member",
              "docComment": "/**\n * Fires from `ENTITY_TAKE_DMG` callback when a Wishbone or a Walnut breaks.\n *\n * When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `TrinketType` provided.\n * ```ts\n * function postTrinketBreak(\n *   player: EntityPlayer,\n *   trinketType: TrinketType,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POST_TRINKET_BREAK = "
                },
                {
                  "kind": "Content",
                  "text": "83"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POST_TRINKET_BREAK"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.PRE_BERSERK_DEATH:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback on the frame before a Berserk effect ends when the player is predicted to die (e.g. they currently have no health left or they took damage in a \"Lost\" form).\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function preBerserkDeath(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PRE_BERSERK_DEATH = "
                },
                {
                  "kind": "Content",
                  "text": "84"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PRE_BERSERK_DEATH"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.PRE_CUSTOM_REVIVE:member",
              "docComment": "/**\n * Fires from the `POST_PLAYER_FATAL_DAMAGE` callback when a player is about to die. If you want to initiate a custom revival, return an integer that corresponds to the item or type of revival that you are doing. Otherwise, return undefined to continue the fatal damage.\n *\n * This callback is useful because reviving the player after the game things that player should have died will result in the save data for the run getting deleted.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if the player matches the `PlayerVariant` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the player matches the `PlayerType` provided.\n * ```ts\n * function preCustomRevive(player: EntityPlayer): int | undefined {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PRE_CUSTOM_REVIVE = "
                },
                {
                  "kind": "Content",
                  "text": "85"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PRE_CUSTOM_REVIVE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.PRE_ITEM_PICKUP:member",
              "docComment": "/**\n * Fires from the `POST_PEFFECT_UPDATE` callback when an item becomes queued (i.e. when the player begins to hold the item above their head).\n *\n * Note that this callback will only fire once per Forgotten/Soul pair.\n *\n * - When registering the callback, takes an optional second argument that will make the callback only fire if it matches the `ItemType` provided. - When registering the callback, takes an optional third argument that will make the callback only fire if the `CollectibleType` or the `TrinketType` matches the ID provided.\n * ```ts\n * function preItemPickup(\n *   player: EntityPlayer,\n *   pickingUpItem: PickingUpItem,\n * ): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PRE_ITEM_PICKUP = "
                },
                {
                  "kind": "Content",
                  "text": "86"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PRE_ITEM_PICKUP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!ModCallbackCustom.PRE_NEW_LEVEL:member",
              "docComment": "/**\n * Fires on the `POST_RENDER` frame before the player is taken to a new floor. Only fires when a player jumps into a trapdoor or enters a heaven door (beam of light). Does not fire on the first floor of the run. Does not fire when the player reloads/reseeds the current floor (i.e. Forget Me Now, 5-pip dice room).\n *\n * This callback passes the `EntityPlayer` object for the player who jumped into the trapdoor or entered the heaven door, if needed.\n * ```ts\n * function preNewLevel(player: EntityPlayer): void {}\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PRE_NEW_LEVEL = "
                },
                {
                  "kind": "Content",
                  "text": "87"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PRE_NEW_LEVEL"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "isaacscript-common!ModUpgraded:class",
          "docComment": "/**\n * `isaacscript-common` has many custom callbacks that you can use in your mods. Instead of hijacking the vanilla `Mod` object, we provide a `ModUpgraded` object for you to use, which extends the base class and adds a new method of `AddCallbackCustom`.\n *\n * To upgrade your mod, use the `upgradeMod` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ModUpgraded implements "
            },
            {
              "kind": "Reference",
              "text": "Mod",
              "canonicalReference": "isaac-typescript-definitions!~__global.Mod:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ModUpgraded",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "isaacscript-common!ModUpgraded:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ModUpgraded` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(mod: "
                },
                {
                  "kind": "Reference",
                  "text": "Mod",
                  "canonicalReference": "isaac-typescript-definitions!~__global.Mod:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mod",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!ModUpgraded#AddCallback:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AddCallback<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "ModCallback",
                  "canonicalReference": "isaac-typescript-definitions!ModCallback:enum"
                },
                {
                  "kind": "Content",
                  "text": ">(modCallback: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "AddCallbackParameter",
                  "canonicalReference": "isaac-typescript-definitions!~__global.AddCallbackParameter:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "modCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "AddCallback"
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!ModUpgraded#AddCallbackCustom:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AddCallbackCustom<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "ModCallbackCustom",
                  "canonicalReference": "isaacscript-common!ModCallbackCustom:enum"
                },
                {
                  "kind": "Content",
                  "text": ">(modCallbackCustom: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "AddCallbackParameterCustom",
                  "canonicalReference": "isaacscript-common!AddCallbackParameterCustom:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "modCallbackCustom",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "AddCallbackCustom"
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!ModUpgraded#HasData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HasData(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "HasData"
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!ModUpgraded#LoadData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LoadData(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "LoadData"
            },
            {
              "kind": "Property",
              "canonicalReference": "isaacscript-common!ModUpgraded#Mod:member",
              "docComment": "/**\n * We store a copy of the original mod object so that we can re-implement its functions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Mod: "
                },
                {
                  "kind": "Reference",
                  "text": "Mod",
                  "canonicalReference": "isaac-typescript-definitions!~__global.Mod:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Mod",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "isaacscript-common!ModUpgraded#Name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!ModUpgraded#RemoveCallback:member(1)",
              "docComment": "/**\n * This method does not care about the tertiary argument. Regardless of the conditions of how you registered the callback, it will be removed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RemoveCallback<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "ModCallback",
                  "canonicalReference": "isaac-typescript-definitions!ModCallback:enum"
                },
                {
                  "kind": "Content",
                  "text": ">(modCallback: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "AddCallbackParameter",
                  "canonicalReference": "isaac-typescript-definitions!~__global.AddCallbackParameter:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T][0]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "modCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "RemoveCallback"
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!ModUpgraded#RemoveData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RemoveData(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "RemoveData"
            },
            {
              "kind": "Method",
              "canonicalReference": "isaacscript-common!ModUpgraded#SaveData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SaveData(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "SaveData"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!movePlayersToCenter:function(1)",
          "docComment": "/**\n * Helper function to move all of the players to where they would normally go when arriving at a new floor. (In normal mode, this is the center of the room. In Greed Mode, this is below the top door.)\n *\n * If there is more than one player, they will be distributed around the center in a circle.\n *\n * This function emulates what happens in the vanilla game when you travel to a new floor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function movePlayersToCenter(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "movePlayersToCenter"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!musicManager:var",
          "docComment": "/**\n * A cached version of the class returned from the `MusicManager()` constructor.\n *\n * Use this instead of invoking the constructor again for a miniscule performance increase.\n *\n * Caching the results of this constructor is safe, but caching other classes (like `Level` or `Room`) is not safe and can lead to the game crashing in certain situations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "musicManager: "
            },
            {
              "kind": "Reference",
              "text": "MusicManager",
              "canonicalReference": "isaac-typescript-definitions!~__global.MusicManager:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "musicManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NEW_FLOOR_STARTING_POSITION_GREED_MODE:var",
          "docComment": "/**\n * This is near the top door.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NEW_FLOOR_STARTING_POSITION_GREED_MODE: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NEW_FLOOR_STARTING_POSITION_GREED_MODE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NEW_FLOOR_STARTING_POSITION_NORMAL_MODE:var",
          "docComment": "/**\n * This is in the center of the room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NEW_FLOOR_STARTING_POSITION_NORMAL_MODE: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NEW_FLOOR_STARTING_POSITION_NORMAL_MODE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NEW_RUN_PLAYER_STARTING_POSITION:var",
          "docComment": "/**\n * This is next to the bottom door. Presumably, the player does not start in the center of the room (like they do when getting to a new stage) so that the controls graphic is more visible.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NEW_RUN_PLAYER_STARTING_POSITION: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NEW_RUN_PLAYER_STARTING_POSITION",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!newChargeBarSprites:function(1)",
          "docComment": "/**\n * Constructor for a `ChargeBarSprites` object. For more information, see the `renderChargeBar` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function newChargeBarSprites(maxCharges: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ChargeBarSprites",
              "canonicalReference": "isaacscript-common!ChargeBarSprites:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "maxCharges",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "newChargeBarSprites"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!newPickingUpItem:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function newPickingUpItem(): "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItem",
              "canonicalReference": "isaacscript-common!PickingUpItem:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "newPickingUpItem"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!newPlayerHealth:function(1)",
          "docComment": "/**\n * Returns a `PlayerHealth` object with all 0s.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function newPlayerHealth(): "
            },
            {
              "kind": "Reference",
              "text": "PlayerHealth",
              "canonicalReference": "isaacscript-common!PlayerHealth:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "newPlayerHealth"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!newRNG:function(1)",
          "docComment": "/**\n * Helper function to initialize an RNG object using Blade's recommended shift index.\n *\n * @param seed - The seed to initialize it with. Default is `getRandomSeed()`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function newRNG(seed?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seed",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "newRNG"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!newRoom:function(1)",
          "docComment": "/**\n * Helper function to generate a new room on the floor at a valid dead end attached to a normal room.\n *\n * Under the hood, this function uses the `Level.MakeRedRoomDoor` method to create the room.\n *\n * The newly created room will have data corresponding to the game's randomly generated red room. If you want to modify this, use the `setRoomData` helper function.\n *\n * @returns The room grid index of the new room or undefined if the floor had no valid dead ends to place a room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function newRoom(): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "newRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!newTSTLClass:function(1)",
          "docComment": "/**\n * Initializes a new TypeScriptToLua class in the situation where you do not know what kind of class it is. This function requires that you provide an instantiated class of the same type, as it will use the class constructor that is present on the other object's metatable to initialize the new class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function newTSTLClass(oldClass: "
            },
            {
              "kind": "Reference",
              "text": "TSTLClass",
              "canonicalReference": "isaacscript-common!TSTLClass:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TSTLClass",
              "canonicalReference": "isaacscript-common!TSTLClass:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "oldClass",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "newTSTLClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!nextSeed:function(1)",
          "docComment": "/**\n * Helper function to get the next seed value.\n *\n * This function is useful when you are working with seed values directly over RNG objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function nextSeed(seed: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "seed",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "nextSeed"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_CARDS:var",
          "docComment": "/**\n * Will change depending on how many modded cards there are.\n *\n * Equal to `itemConfig.GetCards().Size - 1`. (We subtract one to account for `Card.NULL`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_CARDS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_CARDS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_COLLECTIBLE_TYPES:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_COLLECTIBLE_TYPES: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_COLLECTIBLE_TYPES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_DIMENSIONS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_DIMENSIONS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_DIMENSIONS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_MODDED_CARDS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_MODDED_CARDS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_MODDED_CARDS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_MODDED_COLLECTIBLE_TYPES:var",
          "docComment": "/**\n * Unlike vanilla collectible types, modded collectible types are always contiguous.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_MODDED_COLLECTIBLE_TYPES: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_MODDED_COLLECTIBLE_TYPES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_MODDED_PILL_EFFECTS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_MODDED_PILL_EFFECTS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_MODDED_PILL_EFFECTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_MODDED_TRINKET_TYPES:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_MODDED_TRINKET_TYPES: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_MODDED_TRINKET_TYPES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_NORMAL_PILL_COLORS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_NORMAL_PILL_COLORS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_NORMAL_PILL_COLORS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_PILL_EFFECTS:var",
          "docComment": "/**\n * Will change depending on how many modded pill effects there are.\n *\n * Equal to `itemConfig.GetPillEffects().Size - 1`. (We subtract one to account for `PillEffect.NULL`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_PILL_EFFECTS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_PILL_EFFECTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_PILLS_IN_POOL:var",
          "docComment": "/**\n * The pill pool for each run is comprised of one effect for each unique pill color (minus gold and horse pills.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_PILLS_IN_POOL: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_PILLS_IN_POOL",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_TRINKET_TYPES:var",
          "docComment": "/**\n * Will change depending on how many modded cards there are.\n *\n * Equal to `itemConfig.GetTrinkets().Size - 1`. (We subtract one to account for `TrinketType.NULL`.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_TRINKET_TYPES: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_TRINKET_TYPES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_VANILLA_CARDS:var",
          "docComment": "/**\n * Calculated from the `Card` enum. `Card.NULL` is not included.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_VANILLA_CARDS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_VANILLA_CARDS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_VANILLA_COLLECTIBLE_TYPES:var",
          "docComment": "/**\n * Calculated from the `CollectibleType` enum. `CollectibleType.NULL` is not included.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_VANILLA_COLLECTIBLE_TYPES: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_VANILLA_COLLECTIBLE_TYPES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_VANILLA_PILL_EFFECTS:var",
          "docComment": "/**\n * Calculated from the `PillEffect` enum.\n *\n * (There is no `PillEffect.NULL` in the custom enum, so we don't have to subtract one here.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_VANILLA_PILL_EFFECTS: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_VANILLA_PILL_EFFECTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!NUM_VANILLA_TRINKET_TYPES:var",
          "docComment": "/**\n * Calculated from the `TrinketType` enum. `TrinketType.NULL` is not included.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUM_VANILLA_TRINKET_TYPES: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUM_VANILLA_TRINKET_TYPES",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onAscent:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onAscent(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onAscent"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onCathedral:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onCathedral(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onCathedral"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onChest:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onChest(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onChest"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onDarkRoom:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onDarkRoom(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onDarkRoom"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!ONE_BY_ONE_ROOM_GRID_SIZE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ONE_BY_ONE_ROOM_GRID_SIZE = "
            },
            {
              "kind": "Content",
              "text": "135"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ONE_BY_ONE_ROOM_GRID_SIZE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onFinalFloor:function(1)",
          "docComment": "/**\n * Returns whether or not the player is on the \"final floor\" of the particular run. The final floor is defined as one that prevents the player from entering the I AM ERROR room on.\n *\n * For example, when using Undefined on The Chest, it has a 50% chance of teleporting the player to the Secret Room and a 50% chance of teleporting the player to the Super Secret Room, because the I AM ERROR room is never entered into the list of possibilities.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onFinalFloor(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onFinalFloor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onRepentanceStage:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onRepentanceStage(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onRepentanceStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onSetSeed:function(1)",
          "docComment": "/**\n * Whether or not the player is playing on a set seed (i.e. that they entered in a specific seed by pressing tab on the character selection screen). When the player resets the game on a set seed, the game will not switch to a different seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onSetSeed(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onSetSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!onSheol:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function onSheol(): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "onSheol"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!openAllDoors:function(1)",
          "docComment": "/**\n * For the purposes of this function, doors to Secret Rooms or Super Secret Rooms that have not been discovered yet will not be opened.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function openAllDoors(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "openAllDoors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!openDoorFast:function(1)",
          "docComment": "/**\n * Use this instead of the `GridEntityDoor.Open` method if you want the door to immediately open without an animation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function openDoorFast(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "openDoorFast"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!parseEntityID:function(1)",
          "docComment": "/**\n * Helper function to parse a string that contains an entity type, a variant, and a sub-type, separated by periods.\n *\n * For example, passing \"45.0.1\" would return an array of [45, 0, 1].\n *\n * Returns undefined if the string cannot be parsed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseEntityID(entityID: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "] | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityID",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "parseEntityID"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!parseEntityTypeVariantString:function(1)",
          "docComment": "/**\n * Helper function to parse a string that contains an entity type and a variant separated by a period.\n *\n * For example, passing \"45.0\" would return an array of [45, 0].\n *\n * Returns undefined if the string cannot be parsed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseEntityTypeVariantString(entityTypeVariantString: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "] | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityTypeVariantString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "parseEntityTypeVariantString"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!pause:function(1)",
          "docComment": "/**\n * Helper function to emulate what happens when the player pauses the game. Use the `unpause` function to return things back to normal.\n *\n * Under the hood, this function: - uses the Pause collectible on every game frame - disables any player inputs (except for `ButtonAction.MENU_CONFIRM` and `ButtonAction.CONSOLE`)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pause(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "pause"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!PickingUpItem:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PickingUpItem = "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItemNull",
              "canonicalReference": "isaacscript-common!PickingUpItemNull:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItemCollectible",
              "canonicalReference": "isaacscript-common!PickingUpItemCollectible:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItemTrinket",
              "canonicalReference": "isaacscript-common!PickingUpItemTrinket:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PickingUpItem",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!PickingUpItemCollectible:interface",
          "docComment": "/**\n * Part of `PickingUpItem`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PickingUpItemCollectible "
            }
          ],
          "releaseTag": "Public",
          "name": "PickingUpItemCollectible",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PickingUpItemCollectible#itemType:member",
              "docComment": "/**\n * Needed so that we can distinguish between picking up a collectible and a trinket.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemType: "
                },
                {
                  "kind": "Reference",
                  "text": "ItemType.PASSIVE",
                  "canonicalReference": "isaac-typescript-definitions!ItemType.PASSIVE:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ItemType.ACTIVE",
                  "canonicalReference": "isaac-typescript-definitions!ItemType.ACTIVE:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ItemType.FAMILIAR",
                  "canonicalReference": "isaac-typescript-definitions!ItemType.FAMILIAR:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "itemType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PickingUpItemCollectible#subType:member",
              "docComment": "/**\n * Equal to either the collectible type, the trinket type, or 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subType: "
                },
                {
                  "kind": "Reference",
                  "text": "CollectibleType",
                  "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!PickingUpItemNull:interface",
          "docComment": "/**\n * Part of `PickingUpItem`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PickingUpItemNull "
            }
          ],
          "releaseTag": "Public",
          "name": "PickingUpItemNull",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PickingUpItemNull#itemType:member",
              "docComment": "/**\n * Needed so that we can distinguish between picking up a collectible and a trinket.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemType: "
                },
                {
                  "kind": "Reference",
                  "text": "ItemType.NULL",
                  "canonicalReference": "isaac-typescript-definitions!ItemType.NULL:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "itemType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PickingUpItemNull#subType:member",
              "docComment": "/**\n * Equal to either the collectible type, the trinket type, or 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subType: "
                },
                {
                  "kind": "Content",
                  "text": "0"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!PickingUpItemTrinket:interface",
          "docComment": "/**\n * Part of `PickingUpItem`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PickingUpItemTrinket "
            }
          ],
          "releaseTag": "Public",
          "name": "PickingUpItemTrinket",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PickingUpItemTrinket#itemType:member",
              "docComment": "/**\n * Needed so that we can distinguish between picking up a collectible and a trinket.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemType: "
                },
                {
                  "kind": "Reference",
                  "text": "ItemType.TRINKET",
                  "canonicalReference": "isaac-typescript-definitions!ItemType.TRINKET:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "itemType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PickingUpItemTrinket#subType:member",
              "docComment": "/**\n * Equal to either the collectible type, the trinket type, or 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subType: "
                },
                {
                  "kind": "Reference",
                  "text": "TrinketType",
                  "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!PickupIndex:type",
          "docComment": "/**\n * `PickupIndex` is a specific type of number that represents a unique identifier for a pickup. Mods can signify that data structures handle collectibles by using this type.\n *\n * For more information, see the documentation for the `getPickupIndex` function.\n *\n * For example:\n * ```ts\n * const pickupNameMap = new Map<PickupIndex, string>();\n * ```\n *\n * This type is branded for extra type safety.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PickupIndex = "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    readonly __pickupIndexBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PickupIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!pickupIndexInit:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pickupIndexInit(mod: "
            },
            {
              "kind": "Reference",
              "text": "ModUpgraded",
              "canonicalReference": "isaacscript-common!ModUpgraded:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mod",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "pickupIndexInit"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!PILL_EFFECT_MAP:var",
          "docComment": "/**\n * Maps pill effect names to the values of the `PillEffect` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PILL_EFFECT_MAP: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "PillEffect",
              "canonicalReference": "isaac-typescript-definitions!PillEffect:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PILL_EFFECT_MAP",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!playChargeSoundEffect:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function playChargeSoundEffect(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", activeSlot: "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "activeSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "playChargeSoundEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!playerAddCollectible:function(1)",
          "docComment": "/**\n * Helper function to add one or more collectibles to a player.\n *\n * This function is variadic, meaning that you can supply as many collectible types as you want to add.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function playerAddCollectible(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", ...collectibleTypes: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleTypes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "playerAddCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!playerConvertBlackHeartsToSoulHearts:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function playerConvertBlackHeartsToSoulHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "playerConvertBlackHeartsToSoulHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!playerConvertSoulHeartsToBlackHearts:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function playerConvertSoulHeartsToBlackHearts(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "playerConvertSoulHeartsToBlackHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!playerHasCollectible:function(1)",
          "docComment": "/**\n * Helper function to check to see if a player has one or more collectibles.\n *\n * This function is variadic, meaning that you can supply as many collectible types as you want to check for. Returns true if the player has any of the supplied collectible types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function playerHasCollectible(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", ...collectibleTypes: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleTypes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "playerHasCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!playerHasHealthLeft:function(1)",
          "docComment": "/**\n * Helper function to see if the player is out of health.\n *\n * Specifically, this function will return false if the player has 0 red hearts, 0 soul/black hearts, and 0 bone hearts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function playerHasHealthLeft(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "playerHasHealthLeft"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!PlayerHealth:interface",
          "docComment": "/**\n * This is used by the `getPlayerHealth` and `setPlayerHealth` helper functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PlayerHealth "
            }
          ],
          "releaseTag": "Public",
          "name": "PlayerHealth",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#bloodCharges:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bloodCharges: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bloodCharges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#boneHearts:member",
              "docComment": "/**\n * For bone hearts to apply, they also have to be specified in the `soulHeartTypes` array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "boneHearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "boneHearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#brokenHearts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "brokenHearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "brokenHearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#eternalHearts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eternalHearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eternalHearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#goldenHearts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "goldenHearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "goldenHearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#hearts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#maxHearts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxHearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxHearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#rottenHearts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rottenHearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rottenHearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#soulCharges:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "soulCharges: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "soulCharges",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#soulHearts:member",
              "docComment": "/**\n * For soul hearts to apply, they also have to be specified in the `soulHeartTypes` array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "soulHearts: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "soulHearts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PlayerHealth#soulHeartTypes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "soulHeartTypes: "
                },
                {
                  "kind": "Reference",
                  "text": "SoulHeartType",
                  "canonicalReference": "isaacscript-common!SoulHeartType:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "soulHeartTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!PlayerIndex:type",
          "docComment": "/**\n * `PlayerIndex` is a specific type of number that represents a unique identifier for a player. Mods can signify that data structures handle `EntityPlayer` by using this type.\n *\n * For more information, see the documentation for the `getPlayerIndex` function.\n *\n * For example:\n * ```ts\n * const playersNameMap = new Map<PlayerIndex, string>();\n * ```\n *\n * This type is branded for extra type safety.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PlayerIndex = "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    readonly __playerIndexBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PlayerIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!PocketItemDescription:interface",
          "docComment": "/**\n * This is used by the `getPocketItems` and related helper functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PocketItemDescription "
            }
          ],
          "releaseTag": "Public",
          "name": "PocketItemDescription",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PocketItemDescription#slot:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slot: "
                },
                {
                  "kind": "Reference",
                  "text": "PocketItemSlot",
                  "canonicalReference": "isaac-typescript-definitions!PocketItemSlot:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "slot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PocketItemDescription#subType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subType: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!PocketItemDescription#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "PocketItemType",
                  "canonicalReference": "isaacscript-common!PocketItemType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!PocketItemType:enum",
          "docComment": "/**\n * This is used in the various pocket item helper functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PocketItemType "
            }
          ],
          "releaseTag": "Public",
          "name": "PocketItemType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!PocketItemType.ACTIVE_ITEM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ACTIVE_ITEM = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ACTIVE_ITEM"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!PocketItemType.CARD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CARD = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CARD"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!PocketItemType.DICE_BAG_DICE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DICE_BAG_DICE = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DICE_BAG_DICE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!PocketItemType.EMPTY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EMPTY = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "EMPTY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!PocketItemType.PILL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PILL = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PILL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!PocketItemType.UNDETERMINABLE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UNDETERMINABLE = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UNDETERMINABLE"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!preventCollectibleRotation:function(1)",
          "docComment": "/**\n * Helper function to prevent a collectible from being affected by Tainted Isaac's rotation mechanic. (This mechanic also happens from Glitched Crown and Binge Eater.) This is useful because quest items that are manually spawned by mods will be automatically be affected by this mechanic.\n *\n * It is required to pass the intended collectible type to this function since it is possible for collectibles to rotate on the first frame that they are spawned.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function preventCollectibleRotation(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "preventCollectibleRotation"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!printConsole:function(1)",
          "docComment": "/**\n * Helper function to print something to the in-game console. Use this instead of invoking the `Isaac.ConsoleOutput` method directly because it will automatically insert a newline at the end of the message (which `Isaac.ConsoleOutput` does not do by default).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function printConsole(msg: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "msg",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "printConsole"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!printEnabled:function(1)",
          "docComment": "/**\n * Helper function to print whether something was enabled or disabled to the in-game console.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function printEnabled(enabled: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", description: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "enabled",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "description",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "printEnabled"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!registerCharacterHealthConversion:function(1)",
          "docComment": "/**\n * Helper function to make a character that has the same health mechanic as Blue Baby (red heart containers --> soul hearts) or Dark Judas (red heart containers --> black hearts).\n *\n * Call this function once at the beginning of your mod to declare the health conversion type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerCharacterHealthConversion(playerType: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": ", conversionHeartSubType: "
            },
            {
              "kind": "Reference",
              "text": "ConversionHeartSubType",
              "canonicalReference": "isaacscript-common!ConversionHeartSubType:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "conversionHeartSubType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "registerCharacterHealthConversion"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!registerCharacterStats:function(1)",
          "docComment": "/**\n * Helper function to manage the stats for a vanilla or custom character. Call this function once at the beginning of your mod to declare the starting stats.\n *\n * You must provide this function with a map of CacheFlag to the default stat amount. For example, the default amount of damage is 3.5. To make a custom character start with 4.5 damage:\n * ```ts\n * const fooDefaultStats = new Map<CacheFlag, number>([\n *   [CacheFlag.DAMAGE, 4.5],\n * ])\n * registerCharacterStats(PlayerTypeCustom.FOO, fooDefaultStats);\n * ```\n *\n * Note that the format for the `CacheFlag.FIRE_DELAY` value should be in the tears stat format, not the `MaxFireDelay` format.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerCharacterStats(playerType: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": ", statMap: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": ", number> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": ", number>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "playerType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "statMap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "isOptional": false
            }
          ],
          "name": "registerCharacterStats"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!registerCustomBoss:function(1)",
          "docComment": "/**\n * By default, unknown bosses will be drawn on the boss \"versus\" screen as \"???\". If your custom stage has custom bosses, you can use this function to register the corresponding graphic file files for them.\n *\n * For reference: - The vanilla name sprite for Monstro is located at: `resources/gfx/ui/boss/bossname_20.0_monstro.png` - The vanilla portrait sprite for Monstro is located at: `resources/gfx/ui/boss/portrait_20.0_monstro.png`\n *\n * (Note that boss metadata like this cannot be specified with the rest of the custom stage metadata in the \"tsconfig.json\" file because there is not a way to retrieve the name of an entity at run-time.)\n *\n * @param entityType - The entity type of the custom boss.\n *\n * @param variant - The variant of the custom boss.\n *\n * @param subType - The sub-type of the custom boss.\n *\n * @param namePNGPath - The full path to the PNG file that contains the name of the boss that will be displayed on the top of the boss \"versus\" screen.\n *\n * @param portraitPNGPath - The full path to the PNG file that contains the portrait of the boss that will be displayed on the right side of the boss \"versus\" screen.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerCustomBoss(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", namePNGPath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", portraitPNGPath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "namePNGPath",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "portraitPNGPath",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "name": "registerCustomBoss"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!registerHotkey:function(1)",
          "docComment": "/**\n * Helper function to run arbitrary code when you press and release a specific keyboard key.\n *\n * This can be used to easily set up custom hotkeys to facilitate custom game features or to assist in debugging.\n *\n * @param keyboardOrFunc - Either the key that you want to trigger the hotkey or a function that returns the key that will trigger the hotkey. Normally, you would just specify the key directly, but you can use a function for situations where the key can change (like if end-users can specify a custom hotkey using Mod Config Menu).\n *\n * @param triggerFunc - A function containing the arbitrary code that you want to execute when the hotkey is triggered.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerHotkey(keyboardOrFunc: "
            },
            {
              "kind": "Reference",
              "text": "Keyboard",
              "canonicalReference": "isaac-typescript-definitions!Keyboard:enum"
            },
            {
              "kind": "Content",
              "text": " | (() => "
            },
            {
              "kind": "Reference",
              "text": "Keyboard",
              "canonicalReference": "isaac-typescript-definitions!Keyboard:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined)"
            },
            {
              "kind": "Content",
              "text": ", triggerFunc: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keyboardOrFunc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "triggerFunc",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "registerHotkey"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!reloadRoom:function(1)",
          "docComment": "/**\n * Helper function to reload the current room using `Game.StartRoomTransition`.\n *\n * This is useful for canceling the \"goto\" console command or to make the `Level.SetStage` method take effect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reloadRoom(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "reloadRoom"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllBatteries:function(1)",
          "docComment": "/**\n * Helper function to remove all of the batteries in the room.\n *\n * @param batterySubType - Optional. If specified, will only remove the batteries that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of cards.\n *\n * @returns The batteries that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllBatteries(batterySubType?: "
            },
            {
              "kind": "Reference",
              "text": "BatterySubType",
              "canonicalReference": "isaac-typescript-definitions!BatterySubType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBattery",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBattery:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "batterySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllBatteries"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllBombPickups:function(1)",
          "docComment": "/**\n * Helper function to remove all of the bomb pickups in the room. (Specifically, this refers to bomb pickups, not the `EntityBomb` class.)\n *\n * @param bombSubType - Optional. If specified, will only remove bombs that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of bombs.\n *\n * @returns The bombs that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllBombPickups(bombSubType?: "
            },
            {
              "kind": "Reference",
              "text": "BombSubType",
              "canonicalReference": "isaac-typescript-definitions!BombSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBomb:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllBombPickups"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllBombs:function(1)",
          "docComment": "/**\n * Helper function to remove all of the bombs in the room. (Specifically, this refers to the `EntityBomb` class, not bomb pickups.)\n *\n * @param bombVariant - Optional. If specified, will only remove the bombs that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove the bombs that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of bombs.\n *\n * @returns An array of the bombs that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllBombs(bombVariant?: "
            },
            {
              "kind": "Reference",
              "text": "BombVariant",
              "canonicalReference": "isaac-typescript-definitions!BombVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityBomb:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllBombs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllCards:function(1)",
          "docComment": "/**\n * Helper function to remove all of the cards in the room.\n *\n * @param card - Optional. If specified, will only remove cards that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of cards.\n *\n * @returns The cards that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllCards(card?: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCard",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCard:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllCards"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllCharacters:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllCharacters(string: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", character: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "string",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "removeAllCharacters"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllCoins:function(1)",
          "docComment": "/**\n * Helper function to remove all of the coins in the room.\n *\n * @param coinSubType - Optional. If specified, will only remove coins that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of coins.\n *\n * @returns The coins that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllCoins(coinSubType?: "
            },
            {
              "kind": "Reference",
              "text": "CoinSubType",
              "canonicalReference": "isaac-typescript-definitions!CoinSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCoin",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCoin:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "coinSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllCoins"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllCollectibles:function(1)",
          "docComment": "/**\n * Helper function to remove all of the collectibles in the room.\n *\n * @param collectibleType - Optional. If specified, will only remove collectibles that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of collectibles.\n *\n * @returns The collectibles that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllCollectibles(collectibleType?: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCollectible",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCollectible:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllCollectibles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllDoors:function(1)",
          "docComment": "/**\n * Helper function to remove all of the doors in the room. By default, it will remove every door. You can optionally specify one or more room types to remove only the doors that match the specified room types.\n *\n * @returns The number of doors removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllDoors(...roomTypes: "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "removeAllDoors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllEffects:function(1)",
          "docComment": "/**\n * Helper function to remove all of the effects in the room.\n *\n * @param effectVariant - Optional. If specified, will only remove the effects that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove the effects that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of effects.\n *\n * @returns An array of the effects that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllEffects(effectVariant?: "
            },
            {
              "kind": "Reference",
              "text": "EffectVariant",
              "canonicalReference": "isaac-typescript-definitions!EffectVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effectVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllFamiliars:function(1)",
          "docComment": "/**\n * Helper function to remove all of the familiars in the room.\n *\n * @param familiarVariant - Optional. If specified, will only remove the familiars that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove the familiars that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of familiars.\n *\n * @returns An array of the familiars that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllFamiliars(familiarVariant?: "
            },
            {
              "kind": "Reference",
              "text": "FamiliarVariant",
              "canonicalReference": "isaac-typescript-definitions!FamiliarVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "familiarVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllFamiliars"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllGridExcept:function(1)",
          "docComment": "/**\n * Helper function to all grid entities in the room except for ones matching the grid entity types provided.\n *\n * Note that this function will automatically update the room. (This means that you can spawn new grid entities on the same tile on the same frame, if needed.)\n *\n * For example:\n * ```ts\n * removeAllGridEntitiesExceptFor(\n *   GridEntityType.WALL,\n *   GridEntityType.DOOR,\n * );\n * ```\n *\n * @returns The grid entities that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllGridExcept(...gridEntityTypes: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityTypes",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "removeAllGridExcept"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllHearts:function(1)",
          "docComment": "/**\n * Helper function to remove all of the heart pickup entities in the room.\n *\n * @param heartSubType - Optional. If specified, will only remove hearts that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of hearts.\n *\n * @returns The hearts that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllHearts(heartSubType?: "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupHeart",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupHeart:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "heartSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllKeys:function(1)",
          "docComment": "/**\n * Helper function to remove all of the keys in the room.\n *\n * @param keySubType - Optional. If specified, will only remove keys that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of keys.\n *\n * @returns The keys that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllKeys(keySubType?: "
            },
            {
              "kind": "Reference",
              "text": "KeySubType",
              "canonicalReference": "isaac-typescript-definitions!KeySubType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupKey",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupKey:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllKeys"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllKnives:function(1)",
          "docComment": "/**\n * Helper function to remove all of the knives in the room.\n *\n * @param knifeVariant - Optional. If specified, will only remove the knives that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove the knives that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of knives.\n *\n * @returns An array of the knives that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllKnives(knifeVariant?: "
            },
            {
              "kind": "Reference",
              "text": "KnifeVariant",
              "canonicalReference": "isaac-typescript-definitions!KnifeVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityKnife",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityKnife:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "knifeVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllKnives"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllLasers:function(1)",
          "docComment": "/**\n * Helper function to remove all of the lasers in the room.\n *\n * @param laserVariant - Optional. If specified, will only remove the lasers that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove the lasers that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of lasers.\n *\n * @returns An array of the lasers that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllLasers(laserVariant?: "
            },
            {
              "kind": "Reference",
              "text": "LaserVariant",
              "canonicalReference": "isaac-typescript-definitions!LaserVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityLaser",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityLaser:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "laserVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllLasers"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllMatchingEntities:function(1)",
          "docComment": "/**\n * Helper function to remove all of the matching entities in the room.\n *\n * @param entityType - The entity type to match.\n *\n * @param entityVariant - Optional. The variant to match. Default is -1, which matches every variant.\n *\n * @param entitySubType - Optional. The sub-type to match. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of collectibles.\n *\n * @returns An array of the entities that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllMatchingEntities(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", entityVariant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", entitySubType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "entityVariant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "entitySubType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            }
          ],
          "name": "removeAllMatchingEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllMatchingGridEntities:function(1)",
          "docComment": "/**\n * Helper function to remove all of the grid entities in the room that match the grid entity types provided.\n *\n * Note that this function will automatically update the room. (This means that you can spawn new grid entities on the same tile on the same frame, if needed.)\n *\n * For example:\n * ```ts\n * removeAllMatchingGridEntities(\n *   GridEntityType.ROCK,\n *   GridEntityType.BLOCK,\n *   GridEntityType.ROCK_TINTED,\n * );\n * ```\n *\n * @returns An array of the grid entities removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllMatchingGridEntities(...gridEntityType: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "removeAllMatchingGridEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllNPCs:function(1)",
          "docComment": "/**\n * Helper function to remove all of the NPCs in the room.\n *\n * @param entityType - Optional. If specified, will only remove the NPCs that match the type. Default is -1, which matches every type.\n *\n * @param variant - Optional. If specified, will only remove the NPCs that match the variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove the NPCs that match the sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of NPCs.\n *\n * @returns An array of the NPCs that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllNPCs(entityType?: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "removeAllNPCs"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllPickups:function(1)",
          "docComment": "/**\n * Helper function to remove all of the pickups in the room.\n *\n * @param pickupVariant - Optional. If specified, will only remove pickups that match this variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove pickups that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of pickups.\n *\n * @returns An array of the pickups that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllPickups(pickupVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PickupVariant",
              "canonicalReference": "isaac-typescript-definitions!PickupVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickupVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllPickups"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllPills:function(1)",
          "docComment": "/**\n * Helper function to remove all of the pills in the room.\n *\n * @param pillColor - Optional. If specified, will only remove pills that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of pills.\n *\n * @returns The pills that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllPills(pillColor?: "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupPill",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupPill:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllPills"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllPits:function(1)",
          "docComment": "/**\n * Helper function to remove all of the `GridEntityPit` in the room.\n *\n * @param pitVariant - Optional. If specified, will only remove the pits that match this variant. Default is -1, which matches every variant.\n *\n * @param updateRoom - Optional. Whether or not to update the room after the pits are removed. Default is false. For more information, see the description of the `removeGridEntities` helper function.\n *\n * @param cap - Optional. If specified, will only remove the given amount of pits.\n *\n * @returns The pits that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllPits(pitVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PitVariant",
              "canonicalReference": "isaac-typescript-definitions!PitVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", updateRoom?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPit",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPit:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pitVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllPits"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllPlayerHealth:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllPlayerHealth(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "removeAllPlayerHealth"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllPoops:function(1)",
          "docComment": "/**\n * Helper function to remove all of the `GridEntityPoop` in the room.\n *\n * Note that poops can either be an entity or a grid entity, depending on the situation. This function will only remove the grid entity poops.\n *\n * @param poopVariant - Optional. If specified, will only remove the poops that match this variant. Default is -1, which matches every variant.\n *\n * @param updateRoom - Optional. Whether or not to update the room after the poops are removed. Default is false. For more information, see the description of the `removeGridEntities` helper function.\n *\n * @param cap - Optional. If specified, will only remove the given amount of poops.\n *\n * @returns The poops that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllPoops(poopVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PoopGridEntityVariant",
              "canonicalReference": "isaac-typescript-definitions!PoopGridEntityVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", updateRoom?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPoop:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "poopVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllPoops"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllPressurePlates:function(1)",
          "docComment": "/**\n * Helper function to remove all of the `GridEntityPressurePlate` in the room.\n *\n * @param pressurePlateVariant - Optional. If specified, will only remove the pressure plates that match this variant. Default is -1, which matches every variant.\n *\n * @param updateRoom - Optional. Whether or not to update the room after the pressure plates are removed. Default is false. For more information, see the description of the `removeGridEntities` helper function.\n *\n * @param cap - Optional. If specified, will only remove the given amount of pressure plates.\n *\n * @returns The pressure plates that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllPressurePlates(pressurePlateVariant?: "
            },
            {
              "kind": "Reference",
              "text": "PressurePlateVariant",
              "canonicalReference": "isaac-typescript-definitions!PressurePlateVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", updateRoom?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPressurePlate",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPressurePlate:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pressurePlateVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllPressurePlates"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllProjectiles:function(1)",
          "docComment": "/**\n * Helper function to remove all of the projectiles in the room.\n *\n * @param projectileVariant - Optional. If specified, will only remove projectiles that match this variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove projectiles that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of projectiles.\n *\n * @returns An array of the projectiles that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllProjectiles(projectileVariant?: "
            },
            {
              "kind": "Reference",
              "text": "ProjectileVariant",
              "canonicalReference": "isaac-typescript-definitions!ProjectileVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "projectileVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllProjectiles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllRedHearts:function(1)",
          "docComment": "/**\n * Helper function to remove all of the red heart pickup entities in the room.\n *\n * @param cap - Optional. If specified, will only remove the given amount of hearts.\n *\n * @returns The red hearts that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllRedHearts(cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupHeart",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupHeart:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "removeAllRedHearts"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllRocks:function(1)",
          "docComment": "/**\n * Helper function to remove all of the `GridEntityRock` in the room.\n *\n * @param variant - Optional. If specified, will only remove the rocks that match this variant. Default is -1, which matches every variant. Note that this is not the same thing as the `RockVariant` enum, since that only applies to `GridEntityType.ROCK`, and other types of grid entities can be the `GridEntityRock` class.\n *\n * @param updateRoom - Optional. Whether or not to update the room after the rocks are removed. Default is false. For more information, see the description of the `removeGridEntities` helper function.\n *\n * @param cap - Optional. If specified, will only remove the given amount of rocks.\n *\n * @returns The rocks that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllRocks(variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", updateRoom?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityRock",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityRock:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllRocks"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllSacks:function(1)",
          "docComment": "/**\n * Helper function to remove all of the sacks (i.e. grab bags) in the room.\n *\n * @param sackSubType - Optional. If specified, will only remove sacks that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of sacks.\n *\n * @returns The sacks that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllSacks(sackSubType?: "
            },
            {
              "kind": "Reference",
              "text": "SackSubType",
              "canonicalReference": "isaac-typescript-definitions!SackSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupSack",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupSack:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sackSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllSacks"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllSlots:function(1)",
          "docComment": "/**\n * Helper function to remove all of the slots in the room.\n *\n * @param slotVariant - Optional. If specified, will only remove slots that match this variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove slots that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of slots.\n *\n * @returns An array of the slots that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllSlots(slotVariant?: "
            },
            {
              "kind": "Reference",
              "text": "SlotVariant",
              "canonicalReference": "isaac-typescript-definitions!SlotVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slotVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllSlots"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllSpikes:function(1)",
          "docComment": "/**\n * Helper function to remove all of the `GridEntitySpikes` in the room.\n *\n * @param variant - Optional. If specified, will only remove the spikes that match this variant. Default is -1, which matches every variant.\n *\n * @param updateRoom - Optional. Whether or not to update the room after the spikes are removed. Default is false. For more information, see the description of the `removeGridEntities` helper function.\n *\n * @param cap - Optional. If specified, will only remove the given amount of spikes.\n *\n * @returns The spikes that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllSpikes(variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", updateRoom?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntitySpikes",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntitySpikes:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllSpikes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllTears:function(1)",
          "docComment": "/**\n * Helper function to remove all of the tears in the room.\n *\n * @param tearVariant - Optional. If specified, will only remove tears that match this variant. Default is -1, which matches every variant.\n *\n * @param subType - Optional. If specified, will only remove tears that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of tears.\n *\n * @returns An array of the tears that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllTears(tearVariant?: "
            },
            {
              "kind": "Reference",
              "text": "TearVariant",
              "canonicalReference": "isaac-typescript-definitions!TearVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityTear",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityTear:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tearVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllTears"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllTNT:function(1)",
          "docComment": "/**\n * Helper function to remove all of the `GridEntityTNT` in the room.\n *\n * @param variant - Optional. If specified, will only remove the TNTs that match this variant. Default is -1, which matches every variant.\n *\n * @param updateRoom - Optional. Whether or not to update the room after the TNTs are removed. Default is false. For more information, see the description of the `removeGridEntities` helper function.\n *\n * @param cap - Optional. If specified, will only remove the given amount of TNTs.\n *\n * @returns The TNTs that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllTNT(variant?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", updateRoom?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityTNT",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityTNT:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "removeAllTNT"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeAllTrinkets:function(1)",
          "docComment": "/**\n * Helper function to remove all of the trinkets in the room.\n *\n * @param trinketType - Optional. If specified, will only remove trinkets that match this sub-type. Default is -1, which matches every sub-type.\n *\n * @param cap - Optional. If specified, will only remove the given amount of trinkets.\n *\n * @returns The trinkets that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllTrinkets(trinketType?: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupTrinket",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupTrinket:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removeAllTrinkets"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeCollectibleCostume:function(1)",
          "docComment": "/**\n * Helper function to remove a collectible costume from a player. Use this helper function to avoid having to request the collectible from the item config.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeCollectibleCostume(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "removeCollectibleCostume"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeCollectibleFromItemTracker:function(1)",
          "docComment": "/**\n * Helper function to put a message in the log.txt file to let the Rebirth Item Tracker know that it should remove an item.\n *\n * The \"item tracker\" in this function does not refer to the in-game item tracker, but rather to the Python program located at: https://github.com/Rchardon/RebirthItemTracker\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeCollectibleFromItemTracker(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "removeCollectibleFromItemTracker"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeCollectiblePickupDelay:function(1)",
          "docComment": "/**\n * Helper function to remove all pickup delay on a collectible. By default, collectibles have a 20 frame delay before they can be picked up by a player.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeCollectiblePickupDelay(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "removeCollectiblePickupDelay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeConsoleCommand:function(1)",
          "docComment": "/**\n * Helper function to remove a custom console command.\n *\n * The standard library comes with many existing console commands that are useful for debugging. If you want to disable one of them, use this function.\n *\n * Before using this function, you must first run the `enableExtraConsoleCommands` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeConsoleCommand(commandName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "commandName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "removeConsoleCommand"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeCustomGrid:function(1)",
          "docComment": "/**\n * Helper function to remove a custom grid entity created by the `spawnCustomGrid` function.\n *\n * @param gridIndexOrPositionOrGridEntity - You can specify the custom grid entity to remove by providing the grid index, the room position, or the grid entity itself.\n *\n * @param updateRoom - Optional. Whether or not to update the room after the grid entity is removed. Default is true. This is generally a good idea because if the room is not updated, you will be unable to spawn another grid entity on the same tile until a frame has passed. However, doing this is expensive, since it involves a call to `Isaac.GetRoomEntities`, so set it to false if you need to run this function multiple times.\n *\n * @returns The grid entity that was removed. Returns undefined if no grid entity was found at the given location or if the given grid entity was not a custom grid entity.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeCustomGridEntity(gridIndexOrPositionOrGridEntity: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": ", updateRoom?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPositionOrGridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "removeCustomGrid"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeDeadEyeMultiplier:function(1)",
          "docComment": "/**\n * Helper function to remove the Dead Eye multiplier from a player.\n *\n * Note that each time the `EntityPlayer.ClearDeadEyeCharge` method is called, it only has a chance of working, so this function calls it 100 times to be safe.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeDeadEyeMultiplier(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "removeDeadEyeMultiplier"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeDoor:function(1)",
          "docComment": "/**\n * Helper function to remove a single door.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeDoor(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "door",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "removeDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeDoors:function(1)",
          "docComment": "/**\n * Helper function to remove the doors provided.\n *\n * This function is variadic, meaning that you can specify as many doors as you want to remove.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeDoors(...doors: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doors",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "removeDoors"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeEntities:function(1)",
          "docComment": "/**\n * Helper function to remove all of the entities in the supplied array.\n *\n * @param entities - The array of entities to remove.\n *\n * @param cap - Optional. If specified, will only remove the given amount of entities.\n *\n * @returns An array of the entities that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeEntities<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyEntity",
              "canonicalReference": "isaacscript-common!AnyEntity:type"
            },
            {
              "kind": "Content",
              "text": ">(entities: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "removeEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeFadeIn:function(1)",
          "docComment": "/**\n * Removes the fade-in that occurs at the beginning of a run. If this behavior is desired, call this function once at the beginning of your mod.\n *\n * This is useful for debugging, when you are resetting the game often.\n *\n * You can restore the vanilla behavior with the `restoreFadeIn` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeFadeIn(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "removeFadeIn"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeFlag:function(1)",
          "docComment": "/**\n * Helper function to remove a bit flag from an existing set of bit flags.\n *\n * This is a variadic function, so pass as many flags as you want to remove.\n *\n * For example:\n * ```ts\n * // Remove spectral tears from the player, if present\n * const player = Isaac.GetPlayer();\n * player.TearFlags = removeFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL);\n * ```\n *\n * @param flags - The existing set of bit flags.\n *\n * @param flagsToRemove - One or more bit flags to remove, each as a separate argument.\n *\n * @returns The combined bit flags.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeFlag<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(flags: "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", ...flagsToRemove: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "flags",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "flagsToRemove",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "removeFlag"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeGridEntities:function(1)",
          "docComment": "/**\n * Helper function to remove all of the grid entities in the supplied array.\n *\n * @param gridEntities - The array of grid entities to remove.\n *\n * @param updateRoom - Whether or not to update the room after the grid entities are removed. This is generally a good idea because if the room is not updated, you will be unable to spawn another grid entity on the same tile until a frame has passed. However, doing this is expensive, since it involves a call to `Isaac.GetRoomEntities`, so set this to false if you need to run this function multiple times.\n *\n * @param cap - Optional. If specified, will only remove the given amount of entities.\n *\n * @returns An array of the entities that were removed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeGridEntities<T extends "
            },
            {
              "kind": "Reference",
              "text": "AnyGridEntity",
              "canonicalReference": "isaacscript-common!AnyGridEntity:type"
            },
            {
              "kind": "Content",
              "text": ">(gridEntities: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", updateRoom: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", cap?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntities",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "cap",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "removeGridEntities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeGridEntity:function(1)",
          "docComment": "/**\n * Helper function to remove a grid entity by providing the grid entity object or the grid index inside of the room.\n *\n * If removing a Devil Statue or an Angel Statue, this will also remove the associated effect (`EffectVariant.DEVIL` (6) or `EffectVariant.ANGEL` (9), respectively.)\n *\n * @param gridEntityOrGridIndex - The grid entity or grid index to remove.\n *\n * @param updateRoom - Whether or not to update the room after the grid entity is removed. This is generally a good idea because if the room is not updated, you will be unable to spawn another grid entity on the same tile until a frame has passed. However, doing this is expensive, since it involves a call to `Isaac.GetRoomEntities`, so set this to false if you need to run this function multiple times.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeGridEntity(gridEntityOrGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", updateRoom: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityOrGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "updateRoom",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "removeGridEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removePersistentEntity:function(1)",
          "docComment": "/**\n * Helper function to stop an entity spawned with the `spawnPersistentEntity` helper function from respawning.\n *\n * @param persistentEntityIndex - The index that was returned by the `spawnPersistentEntity` function.\n *\n * @param removeEntity - Optional. True by default. Set to false if you want to stop an entity from being persistent but you don't want to actually remove the currently-spawned entity from the room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removePersistentEntity(persistentEntityIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", removeEntity?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "persistentEntityIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "removeEntity",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "removePersistentEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeSubstring:function(1)",
          "docComment": "/**\n * Helper function to remove one or more substrings from a string, if they exist. Returns the modified string.\n *\n * This function is variadic, meaning that you can pass as many substrings as you want to remove.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeSubstring(string: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", ...substrings: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "string",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "substrings",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "removeSubstring"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!removeTrinketCostume:function(1)",
          "docComment": "/**\n * Helper function to remove a trinket costume from a player. Use this helper function to avoid having to request the trinket from the item config.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeTrinketCostume(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "removeTrinketCostume"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!RENDER_FRAMES_PER_SECOND:var",
          "docComment": "/**\n * Render frames are what is returned by the `Isaac.GetFrameCount` method.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "RENDER_FRAMES_PER_SECOND = "
            },
            {
              "kind": "Content",
              "text": "60"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "RENDER_FRAMES_PER_SECOND",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!renderChargeBar:function(1)",
          "docComment": "/**\n * Helper function to render a charge bar on the screen. First, call the `newChargeBarSprites` function to initialize the sprites, and then call this function on every render frame.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function renderChargeBar(sprites: "
            },
            {
              "kind": "Reference",
              "text": "ChargeBarSprites",
              "canonicalReference": "isaacscript-common!ChargeBarSprites:interface"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", normalCharges: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", batteryCharges: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sprites",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "normalCharges",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "batteryCharges",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "renderChargeBar"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!reorderedCallbacksSetStage:function(1)",
          "docComment": "/**\n * Helper function to manually set the variable that the reordered callback logic uses to track the current stage and stage type.\n *\n * This is useful because if the stage is changed with the `Game.SetStage` method, the reordered callbacks will stop working.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reorderedCallbacksSetStage(stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ", stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "stageType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "reorderedCallbacksSetStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!repeat:function(1)",
          "docComment": "/**\n * Helper function to repeat code N times. This is faster to type and cleaner than using a for loop.\n *\n * For example:\n * ```ts\n * const player = Isaac.GetPlayer();\n * repeat(10, () => {\n *   player.AddCollectible(CollectibleType.STEVEN);\n * });\n * ```\n *\n * The repeated function is passed the index of the iteration, if needed:\n * ```ts\n * repeat(3, (i) => {\n *   print(i); // Prints \"0\", \"1\", \"2\"\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function repeat(n: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", func: "
            },
            {
              "kind": "Content",
              "text": "(i: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "repeat"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!rerollEnemy:function(1)",
          "docComment": "/**\n * Helper function to reroll an enemy. Use this instead of the vanilla \"Game.RerollEnemy\" function if you want the rerolled enemy to be returned.\n *\n * @param entity - The entity to reroll.\n *\n * @returns If the game failed to reroll the enemy, returns undefined. Otherwise, returns the rerolled entity.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rerollEnemy(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "rerollEnemy"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!resetPickingUpItem:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function resetPickingUpItem(pickingUpItem: "
            },
            {
              "kind": "Reference",
              "text": "PickingUpItem",
              "canonicalReference": "isaacscript-common!PickingUpItem:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickingUpItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "resetPickingUpItem"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!restart:function(1)",
          "docComment": "/**\n * Helper function to restart the run using the console command of \"restart\". If the player is playing a seeded run, then it will restart the game to the beginning of the seed. Otherwise, it will put the player on a run with an entirely new seed.\n *\n * You can optionally specify a `PlayerType` to restart the game as that character.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function restart(character?: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "restart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!restartNextRenderFrame:function(1)",
          "docComment": "/**\n * Helper function to restart on the next render frame. Useful because it is impossible to restart the game inside of the `POST_NEW_ROOM`, `POST_NEW_LEVEL`, or `POST_GAME_STARTED` callbacks when a run is first starting.\n *\n * You can optionally specify a `PlayerType` to restart the game as that character.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function restartNextRenderFrame(character?: "
            },
            {
              "kind": "Reference",
              "text": "PlayerType",
              "canonicalReference": "isaac-typescript-definitions!PlayerType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "restartNextRenderFrame"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!restoreFadeIn:function(1)",
          "docComment": "/**\n * Disables the fade-in remover. Only useful if you have previously called the `removeFadeIn` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function restoreFadeIn(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "restoreFadeIn"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!rngEquals:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rngEquals(rng1: "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", rng2: "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rng1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "rng2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "rngEquals"
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!RockAltType:enum",
          "docComment": "/**\n * This is used in the various rock alt type helper functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum RockAltType "
            }
          ],
          "releaseTag": "Public",
          "name": "RockAltType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!RockAltType.BUCKET_DOWNPOUR:member",
              "docComment": "/**\n * Destroying buckets in Downpour give different outcomes than in Dross.\n *\n * See: https://bindingofisaacrebirth.fandom.com/wiki/Rocks#Buckets\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BUCKET_DOWNPOUR = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BUCKET_DOWNPOUR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!RockAltType.BUCKET_DROSS:member",
              "docComment": "/**\n * Destroying buckets in Dross give different outcomes than in Downpour.\n *\n * See: https://bindingofisaacrebirth.fandom.com/wiki/Rocks#Buckets\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BUCKET_DROSS = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "BUCKET_DROSS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!RockAltType.MUSHROOM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MUSHROOM = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MUSHROOM"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!RockAltType.POLYP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "POLYP = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "POLYP"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!RockAltType.SKULL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SKULL = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SKULL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!RockAltType.URN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "URN = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "URN"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!ROOM_TYPE_MAP:var",
          "docComment": "/**\n * Maps room type names to room types.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ROOM_TYPE_MAP: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "RoomType",
              "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ROOM_TYPE_MAP",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!RoomDescription:interface",
          "docComment": "/**\n * This is used by the room history feature of the standard library.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RoomDescription "
            }
          ],
          "releaseTag": "Public",
          "name": "RoomDescription",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#roomGridIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomGridIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomGridIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#roomListIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomListIndex: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomListIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#roomName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#roomSubType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomSubType: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomSubType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#roomType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomType: "
                },
                {
                  "kind": "Reference",
                  "text": "RoomType",
                  "canonicalReference": "isaac-typescript-definitions!RoomType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#roomVariant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomVariant: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomVariant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#roomVisitedCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roomVisitedCount: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "roomVisitedCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#stage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stage: "
                },
                {
                  "kind": "Reference",
                  "text": "LevelStage",
                  "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#stageID:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stageID: "
                },
                {
                  "kind": "Reference",
                  "text": "StageID",
                  "canonicalReference": "isaac-typescript-definitions!StageID:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stageID",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!RoomDescription#stageType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stageType: "
                },
                {
                  "kind": "Reference",
                  "text": "StageType",
                  "canonicalReference": "isaac-typescript-definitions!StageType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stageType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!roomExists:function(1)",
          "docComment": "/**\n * Helper function to check if a room exists at the given room grid index. (A room will exist if it has non-undefined data in the room descriptor.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function roomExists(roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "roomExists"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!roomGridIndexToXY:function(1)",
          "docComment": "/**\n * Helper function to get the coordinates of a given grid index. The floor is represented by a 13x13 grid.\n *\n * - Since the starting room is in the center, the starting room grid index of 84 is equal to coordinates of (6, 6). - The top-left grid index of 0 is equal to coordinates of: (12, 0) - The top-right grid index of 12 is equal to coordinates of: (0, 0) - The bottom-left grid index of 156 is equal to coordinates of: (0, 12) - The bottom-right grid index of 168 is equal to coordinates of: (12, 12)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function roomGridIndexToXY(roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "[x: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "roomGridIndexToXY"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!roomHistoryInit:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function roomHistoryInit(mod: "
            },
            {
              "kind": "Reference",
              "text": "ModUpgraded",
              "canonicalReference": "isaacscript-common!ModUpgraded:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mod",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "roomHistoryInit"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!roomUpdateSafe:function(1)",
          "docComment": "/**\n * If the `Room.Update` method is called in a `POST_NEW_ROOM` callback, then some entities will slide around (such as the player). Since those entity velocities are already at zero, setting them to zero will have no effect. Thus, a generic solution is to record all of the entity positions/velocities before updating the room, and then restore those positions/velocities.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function roomUpdateSafe(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "roomUpdateSafe"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!round:function(1)",
          "docComment": "/**\n * If rounding fails, this function returns 0. From: http://lua-users.org/wiki/SimpleRound\n *\n * @param num - The number to round.\n *\n * @param numDecimalPlaces - Default is 0.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function round(num: "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ", numDecimalPlaces?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "float",
              "canonicalReference": "!float:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "numDecimalPlaces",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "round"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!runDeepCopyTests:function(1)",
          "docComment": "/**\n * Run the suite of tests that prove that the \"deepCopy\" helper function works properly.\n *\n * This function is only useful if you are troubleshooting the \"deepCopy\" function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runDeepCopyTests(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "runDeepCopyTests"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!runInNGameFrames:function(1)",
          "docComment": "/**\n * Supply a function to run N game frames from now in the `POST_UPDATE` callback.\n *\n * For a usage example, see the documentation for the `runNextGameFrame`, which is used in a similar way.\n *\n * Note that this function will not handle saving and quitting. If a player saving and quitting before the deferred function fires would cause a bug in your mod, then you should handle deferred functions manually using serializable data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runInNGameFrames(func: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ", gameFrames: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gameFrames",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "runInNGameFrames"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!runInNRenderFrames:function(1)",
          "docComment": "/**\n * Supply a function to run N render frames from now in the `POST_RENDER` callback.\n *\n * For a usage example, see the documentation for the `runNextGameFrame`, which is used in a similar way.\n *\n * Note that this function will not handle saving and quitting. If a player saving and quitting before the deferred function fires would cause a bug in your mod, then you should handle deferred functions manually using serializable data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runInNRenderFrames(func: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ", renderFrames: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "renderFrames",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "runInNRenderFrames"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!runMergeTests:function(1)",
          "docComment": "/**\n * Run the suite of tests that prove that the \"merge\" function works properly. (This function is not exported but is used internally in the save data manager.)\n *\n * This function is only useful if you are troubleshooting the save data manager.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runMergeTests(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "runMergeTests"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!runNextGameFrame:function(1)",
          "docComment": "/**\n * Supply a function to run on the next `POST_UPDATE` callback.\n *\n * For example:\n * ```ts\n * const NUM_EXPLODER_EXPLOSIONS = 5;\n *\n * function useItemExploder(player: EntityPlayer) {\n *   playSound(\"exploderBegin\");\n *   explode(player, NUM_EXPLODER_EXPLOSIONS);\n * }\n *\n * function explode(player: EntityPlayer, numFramesLeft: int) {\n *   Isaac.Explode(player, undefined, 1);\n *   numFramesLeft -= 1;\n *   if (numFramesLeft === 0) {\n *     runNextFrame(() => {\n *       explode(player, numFramesLeft);\n *     });\n *   }\n * }\n * ```\n *\n * Note that this function will not handle saving and quitting. If a player saving and quitting before the deferred function fires would cause a bug in your mod, then you should handle deferred functions manually using serializable data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runNextGameFrame(func: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "runNextGameFrame"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!runNextRenderFrame:function(1)",
          "docComment": "/**\n * Supply a function to run on the next `POST_RENDER` callback.\n *\n * For a usage example, see the documentation for the `runNextGameFrame`, which is used in a similar way.\n *\n * Note that this function will not handle saving and quitting.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runNextRenderFrame(func: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "runNextRenderFrame"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!SaveData:interface",
          "docComment": "/**\n * This is the format of the object that you give to the save data manager. It will contains all of the variables for the particular mod feature.\n *\n * Depending on which object keys you use, the variables will be automatically reset at certain times and automatically saved to disk.\n *\n * Each sub-object of save data has a string as a key and arbitrary data as a value. However, the data has to be serializable. Specifically, this means that you can only use the following types:\n *\n * - `boolean` - `number` - `string` - `undefined` (will be skipped over when saving) - `null` (will be skipped over when saving) - `Map` / `DefaultMap` - `Set` - serializable Isaac API classes (such as `Color`) - TSTL classes (i.e. classes that you made yourself) - sub-objects or a `LuaMap` that contains the above values\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SaveData<Persistent = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", Run = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", Level = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Persistent",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "Run",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "typeParameterName": "Level",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "SaveData",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!SaveData#level:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "level?: "
                },
                {
                  "kind": "Reference",
                  "text": "Serializable",
                  "canonicalReference": "isaacscript-common!~Serializable:type"
                },
                {
                  "kind": "Content",
                  "text": "<Level>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "level",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!SaveData#persistent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "persistent?: "
                },
                {
                  "kind": "Reference",
                  "text": "Serializable",
                  "canonicalReference": "isaacscript-common!~Serializable:type"
                },
                {
                  "kind": "Content",
                  "text": "<Persistent>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "persistent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!SaveData#room:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "room?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "room",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!SaveData#run:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "run?: "
                },
                {
                  "kind": "Reference",
                  "text": "Serializable",
                  "canonicalReference": "isaacscript-common!~Serializable:type"
                },
                {
                  "kind": "Content",
                  "text": "<Run>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "run",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!SaveDataKey:enum",
          "docComment": "/**\n * These are the types of keys that you can put on the local variables that you feed to the save data manager.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SaveDataKey "
            }
          ],
          "releaseTag": "Public",
          "name": "SaveDataKey",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SaveDataKey.LEVEL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LEVEL = "
                },
                {
                  "kind": "Content",
                  "text": "\"level\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LEVEL"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SaveDataKey.PERSISTENT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PERSISTENT = "
                },
                {
                  "kind": "Content",
                  "text": "\"persistent\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "PERSISTENT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SaveDataKey.ROOM:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ROOM = "
                },
                {
                  "kind": "Content",
                  "text": "\"room\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ROOM"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SaveDataKey.RUN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RUN = "
                },
                {
                  "kind": "Content",
                  "text": "\"run\""
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RUN"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!saveDataManager:function(1)",
          "docComment": "/**\n * This is the entry point to the save data manager, a system which provides two major features:\n *\n * 1. automatic resetting of variables on a new run, on a new level, or on a new room (as desired) 2. automatic saving and loading of all tracked data to the \"save#.dat\" file\n *\n * You feed this function with an anonymous object containing your variables, and then it will automatically manage them for you. (See below for an example.)\n *\n * The save data manager is meant to be called once for each feature of your mod. In other words, you should not put all of the data for your mod on the same object. Instead, scope your variables locally to a single file that contains a mod feature, and then call this function to register them. For example:\n * ```ts\n * // in file: feature1.ts\n * import { saveDataManager } from \"isaacscript-common\";\n *\n * // Declare local variables for this file or feature.\n * const v = {\n *   // These variables are never reset; manage them yourself at will.\n *   persistent: {\n *     foo1: 0,\n *   },\n *\n *   // These variables are reset at the beginning of every run.\n *   run: {\n *     foo2: 0,\n *   },\n *\n *   // These variables are reset at the beginning of every level.\n *   level: {\n *     foo3: 0,\n *   },\n *\n *   // These variables are reset at the beginning of every room.\n *   room: {\n *     foo4: 0,\n *   },\n * };\n * // Every child object is optional; only create the ones that you need.\n *\n * // Register the variables with the save data manager. (We need to provide a string key that\n * // matches the name of this file.)\n * function feature1Init() {\n *   saveDataManager(\"feature1\", v);\n * }\n *\n * // Elsewhere in the file, use your variables.\n * function feature1Function() {\n *   if (v.run.foo1 > 0) {\n *     // Insert code here.\n *   }\n * }\n * ```\n *\n * - Save data is loaded from disk in the `POST_PLAYER_INIT` callback (i.e. the first callback that can possibly run). - Save data is recorded to disk in the `PRE_GAME_EXIT` callback.\n *\n * You can put lots of data types on your variable objects, but not everything is supported. For the specific things that are supported, see the documentation for the `deepCopy` helper function.\n *\n * Note that before using the save data manager, you must call the `upgradeMod` function. (Upgrade your mod before registering any of your own callbacks so that the save data manager will run before any of your code does.)\n *\n * If you want the save data manager to load data before the `POST_PLAYER_INIT` callback (i.e. in the main menu), then you should explicitly call the `saveDataManagerLoad` function. (The save data manager cannot do this on its own because it cannot know when your mod features are finished initializing.)\n *\n * Finally, some features may have variables that need to be automatically reset per run/level, but not saved to disk on game exit. (For example, if they contain functions or other non-serializable data.) For these cases, set the second argument to `() => false`.\n *\n * @param key - The name of the file or feature that is submitting data to be managed by the save data manager. The save data manager will throw an error if the key is already registered.\n *\n * @param v - An object that corresponds to the `SaveData` interface. The object is conventionally called \"v\" for brevity. (\"v\" is short for \"local variables\").\n *\n * @param conditionalFunc - Optional. A function to run to check if this save data should be written to disk. Default is `() => true`, meaning that this save data will always be written to disk. Use a conditional function for the situations when the local variables are for a feature that the end-user can disable. (If the feature is disabled, then there would be no point in writing any of the variables to the \"save#.dat\" file.) You can also specify `false` to this argument in order to completely disable saving data. (Specifying `false` will allow you to use non-serializable objects in your save data, such as `EntityPtr`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function saveDataManager<Persistent, Run, Level>(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", // This is the overload for the standard case with serializable data.\nv: "
            },
            {
              "kind": "Reference",
              "text": "SaveData",
              "canonicalReference": "isaacscript-common!SaveData:interface"
            },
            {
              "kind": "Content",
              "text": "<Persistent, Run, Level>"
            },
            {
              "kind": "Content",
              "text": ", conditionalFunc?: "
            },
            {
              "kind": "Content",
              "text": "() => boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "conditionalFunc",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "Persistent",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Run",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Level",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "saveDataManager"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!saveDataManager:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function saveDataManager(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", // This is the overload for the case when saving data is disabled.\nv: "
            },
            {
              "kind": "Reference",
              "text": "SaveData",
              "canonicalReference": "isaacscript-common!SaveData:interface"
            },
            {
              "kind": "Content",
              "text": ", conditionalFunc: "
            },
            {
              "kind": "Content",
              "text": "false"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "conditionalFunc",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "saveDataManager"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!saveDataManagerLoad:function(1)",
          "docComment": "/**\n * The save data manager will automatically load variables from disk at the appropriate times (i.e. when a new run is started). Use this function to explicitly force the save data manager to load all of its variables from disk immediately.\n *\n * Obviously, doing this will overwrite the current data, so using this function can potentially result in lost state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function saveDataManagerLoad(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "saveDataManagerLoad"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!saveDataManagerReset:function(1)",
          "docComment": "/**\n * The save data manager will automatically reset variables at the appropriate times (i.e. when a player enters a new room). Use this function to explicitly force the save data manager to reset a specific variable group.\n *\n * For example:\n * ```ts\n * const v = {\n *   room: {\n *     foo: 123,\n *   },\n * };\n *\n * saveDataManager(\"file1\", v);\n *\n * // Then, later on, to explicit reset all of the \"room\" variables:\n * saveDataManagerReset(\"file1\", \"room\");\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function saveDataManagerReset(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", childObjectKey: "
            },
            {
              "kind": "Reference",
              "text": "SaveDataKey",
              "canonicalReference": "isaacscript-common!SaveDataKey:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "childObjectKey",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "saveDataManagerReset"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!saveDataManagerSave:function(1)",
          "docComment": "/**\n * The save data manager will automatically save variables to disk at the appropriate times (i.e. when the run is exited). Use this function to explicitly force the save data manager to write all of its variables to disk immediately.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function saveDataManagerSave(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "saveDataManagerSave"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!saveDataManagerSetGlobal:function(1)",
          "docComment": "/**\n * - Sets the global variable of \"g\" equal to all of the save data variables for this mod. - Sets the global variable of \"gd\" equal to all of the save data default variables for this mod.\n *\n * This can make debugging easier, as you can access the variables from the game's debug console. e.g. `l print(g.feature1.foo)`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function saveDataManagerSetGlobal(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "saveDataManagerSetGlobal"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!SECOND_IN_MILLISECONDS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "SECOND_IN_MILLISECONDS = "
            },
            {
              "kind": "Content",
              "text": "1000"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "SECOND_IN_MILLISECONDS",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!SerializationType:enum",
          "docComment": "/**\n * This is used with the `deepCopy` and `merge` functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SerializationType "
            }
          ],
          "releaseTag": "Public",
          "name": "SerializationType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SerializationType.DESERIALIZE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DESERIALIZE = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DESERIALIZE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SerializationType.NONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NONE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NONE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SerializationType.SERIALIZE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SERIALIZE = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SERIALIZE"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!serializeBitSet128:function(1)",
          "docComment": "/**\n * Helper function to convert a `BitSet128` object to a `SerializedBitSet128` object. (This is used by the save data manager when writing data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serializeBitSet128(bitSet128: "
            },
            {
              "kind": "Reference",
              "text": "BitSet128",
              "canonicalReference": "!BitSet128:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SerializedBitSet128",
              "canonicalReference": "isaacscript-common!SerializedBitSet128:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bitSet128",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "serializeBitSet128"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!serializeColor:function(1)",
          "docComment": "/**\n * Helper function to convert a `Color` object to a `SerializedColor` object. (This is used by the save data manager when writing data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serializeColor(color: "
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "!Color:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SerializedColor",
              "canonicalReference": "isaacscript-common!SerializedColor:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "serializeColor"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!SerializedBitSet128:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SerializedBitSet128 = "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown> & {\n    readonly __serializedBitSet128Brand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SerializedBitSet128",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!SerializedColor:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SerializedColor = "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown> & {\n    readonly __serializedColorBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SerializedColor",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!SerializedIsaacAPIClass:type",
          "docComment": "/**\n * This is a type representing an Isaac API class like `Color` or `RNG` that has been written to the \"save#.dat\" file. It is used by the save data manager when reading and writing to that file.\n *\n * For the list of supported classes, see the `CopyableIsaacAPIClassType` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SerializedIsaacAPIClass = "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown> & {\n    readonly __serializedIsaacAPIClassBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SerializedIsaacAPIClass",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!SerializedKColor:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SerializedKColor = "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown> & {\n    readonly __serializedKColorBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SerializedKColor",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!SerializedRNG:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SerializedRNG = "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown> & {\n    readonly __serializedRNGBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SerializedRNG",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!SerializedVector:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SerializedVector = "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<string, unknown> & {\n    readonly __serializedVectorBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SerializedVector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!serializeIsaacAPIClass:function(1)",
          "docComment": "/**\n * Helper function to generically serialize an Isaac API class without knowing what specific type of class it is. (This is used by the save data manager when writing data to the \"save#.dat\" file.)\n *\n * For the list of supported classes, see the `CopyableIsaacAPIClassType` enum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serializeIsaacAPIClass(isaacAPIClass: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "isaacAPIClass",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "serializeIsaacAPIClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!serializeKColor:function(1)",
          "docComment": "/**\n * Helper function to convert a `KColor` object to a `SerializedKColor` object. (This is used by the save data manager when writing data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serializeKColor(kColor: "
            },
            {
              "kind": "Reference",
              "text": "KColor",
              "canonicalReference": "!KColor:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SerializedKColor",
              "canonicalReference": "isaacscript-common!SerializedKColor:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "kColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "serializeKColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!serializeRNG:function(1)",
          "docComment": "/**\n * Helper function to convert a `RNG` object to a `SerializedRNG` object. (This is used by the save data manager when writing data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serializeRNG(rng: "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SerializedRNG",
              "canonicalReference": "isaacscript-common!SerializedRNG:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rng",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "serializeRNG"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!serializeVector:function(1)",
          "docComment": "/**\n * Helper function to convert a `Vector` object to a `SerializedVector` object. (This is used by the save data manager when writing data from the \"save#.dat\" file.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serializeVector(vector: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SerializedVector",
              "canonicalReference": "isaacscript-common!SerializedVector:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "serializeVector"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setActiveItem:function(1)",
          "docComment": "/**\n * Helper function to set an active collectible to a particular slot. This has different behavior than calling the `player.AddCollectible` method with the `activeSlot` argument, because this function will not shift existing items into the Schoolbag and it handles `ActiveSlot.SLOT_POCKET2`.\n *\n * Note that if an item is set to `ActiveSlot.SLOT_POCKET2`, it will disappear after being used and will be automatically removed upon entering a new room.\n *\n * @param player - The player to give the item to.\n *\n * @param collectibleType - The collectible type of the item to give.\n *\n * @param activeSlot - The slot to set.\n *\n * @param charge - Optional. The argument of charges to set. If not specified, the item will be set with maximum charges.\n *\n * @param keepInPools - Optional. Whether or not to remove the item from pools. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setActiveItem(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", activeSlot: "
            },
            {
              "kind": "Reference",
              "text": "ActiveSlot",
              "canonicalReference": "isaac-typescript-definitions!ActiveSlot:enum"
            },
            {
              "kind": "Content",
              "text": ", charge?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", keepInPools?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "activeSlot",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "charge",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "keepInPools",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "setActiveItem"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setAddPlayer:function(1)",
          "docComment": "/**\n * Helper function to make using sets with an type of `PlayerIndex` easier. Use this instead of the `Set.add` method if you have a set of this type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setAddPlayer(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "setAddPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setAllRNGToSeed:function(1)",
          "docComment": "/**\n * Helper function to iterate over the provided object and set the seed for all of the values that are RNG objects equal to a particular seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setAllRNGToSeed(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", seed: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seed",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setAllRNGToSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setAllRNGToStartSeed:function(1)",
          "docComment": "/**\n * Helper function to iterate over the provided object and set the seed for all of the values that are RNG objects equal to the start seed for the current run.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setAllRNGToStartSeed(object: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setAllRNGToStartSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setBackdrop:function(1)",
          "docComment": "/**\n * Helper function to set the backdrop of the current room.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setBackdrop(backdropType: "
            },
            {
              "kind": "Reference",
              "text": "BackdropType",
              "canonicalReference": "isaac-typescript-definitions!BackdropType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "backdropType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setBackdrop"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setBlindfold:function(1)",
          "docComment": "/**\n * Helper function to blindfold the player by using a hack with the challenge variable.\n *\n * The method used in this function was discovered by im_tem.\n *\n * @param player - The player to apply or remove the blindfold state from.\n *\n * @param enabled - Whether or not to apply or remove the blindfold.\n *\n * @param modifyCostume - Optional. Whether to add or remove the blindfold costume. Default is true.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setBlindfold(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", enabled: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", modifyCostume?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "enabled",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "modifyCostume",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "setBlindfold"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setBombDisplay:function(1)",
          "docComment": "/**\n * After using the \"bombDisplay\" console command, text will be drawn on each bomb for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setBombDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(bomb: "
            },
            {
              "kind": "Reference",
              "text": "EntityBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityBomb:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setBombDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setCollectibleBlind:function(1)",
          "docComment": "/**\n * Helper function to set a collectible sprite to a question mark (i.e. how collectibles look when the player has Curse of the Blind).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setCollectibleBlind(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setCollectibleBlind"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setCollectibleEmpty:function(1)",
          "docComment": "/**\n * Helper function to remove the collectible from a collectible pedestal and make it appear as if a player has already taken the item. This is accomplished by changing the sub-type to `CollectibleType.NULL` and then setting the sprite to an empty/missing PNG file.\n *\n * For more information, see the documentation for the \"clearSprite\" helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setCollectibleEmpty(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setCollectibleEmpty"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setCollectibleGlitched:function(1)",
          "docComment": "/**\n * Helper function to change a collectible into a \"glitched\" item (like the ones that appear when the player has TMTRAINER).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setCollectibleGlitched(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setCollectibleGlitched"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setCollectibleSprite:function(1)",
          "docComment": "/**\n * Helper function to change the sprite of a collectible pedestal entity.\n *\n * For more information about removing the collectible sprite, see the documentation for the \"clearSprite\" helper function.\n *\n * @param collectible - The collectible whose sprite you want to modify.\n *\n * @param pngPath - Equal to either the spritesheet path to load (e.g. \"gfx/items/collectibles/collectibles_001_thesadonion.png\") or undefined. If undefined, the sprite will be removed, making it appear like the collectible has already been taken by the player.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setCollectibleSprite(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ", pngPath: "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "pngPath",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setCollectibleSprite"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setCollectiblesRerolledForItemTracker:function(1)",
          "docComment": "/**\n * Helper function to put a message in the log.txt file to let the Rebirth Item Tracker know that the build has been rerolled.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setCollectiblesRerolledForItemTracker(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "setCollectiblesRerolledForItemTracker"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setCollectibleSubType:function(1)",
          "docComment": "/**\n * Helper function to change the collectible on a pedestal. Simply updating the `SubType` field is not sufficient because the sprite will not change.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setCollectibleSubType(collectible: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ", newCollectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectible",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "newCollectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setCollectibleSubType"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setCustomStage:function(1)",
          "docComment": "/**\n * Helper function to warp to a custom stage/level.\n *\n * Custom stages/levels must first be defined in the \"tsconfig.json\" file. See the documentation for more details: https://isaacscript.github.io/main/custom-stages/\n *\n * @param name - The name of the custom stage, corresponding to what is in the \"tsconfig.json\" file.\n *\n * @param firstFloor - Optional. Whether to go to the first floor or the second floor. For example, if you have a custom stage emulating Caves, then the first floor would be Caves 1, and the second floor would be Caves 2. Default is true.\n *\n * @param verbose - Optional. Whether to log additional information about the rooms that are chosen. Default is false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setCustomStage(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", firstFloor?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", verbose?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "firstFloor",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "verbose",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "setCustomStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setDeletePlayer:function(1)",
          "docComment": "/**\n * Helper function to make using sets with an type of `PlayerIndex` easier. Use this instead of the `Set.delete` method if you have a set of this type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setDeletePlayer(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "setDeletePlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setDisplayFlags:function(1)",
          "docComment": "/**\n * Helper function to set the minimap `DisplayFlag` value for multiple rooms at once.\n *\n * This function automatically calls the `Level.UpdateVisibility` after setting the flags so that the changes will be immediately visible.\n *\n * @param displayFlagsMap - A map of the display flags that is indexed by the room's safe grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setDisplayFlags(displayFlagsMap: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DisplayFlag",
              "canonicalReference": "isaac-typescript-definitions!DisplayFlag:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "displayFlagsMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "setDisplayFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setDoorDisplay:function(1)",
          "docComment": "/**\n * After using the \"poopDisplay\" console command, text will be drawn on each poop for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setDoorDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(door: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setDoorDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setEffectDisplay:function(1)",
          "docComment": "/**\n * After using the \"effectDisplay\" console command, text will be drawn on each effect for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setEffectDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(effect: "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setEffectDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setEntityPositions:function(1)",
          "docComment": "/**\n * Helper function to set the position of every entity in the room based on a map of positions. If an entity is found that does not have matching element in the provided map, then that entity will be skipped.\n *\n * This function is useful for rewinding entity positions at a later time. Also see `getEntityPositions`.\n *\n * @param entityPositions - The map providing the positions for every entity.\n *\n * @param entities - Optional. If provided, will only set the positions of the provided entities. Use this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method multiple times.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setEntityPositions(entityPositions: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PtrHash",
              "canonicalReference": "!PtrHash:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", entities?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityPositions",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "setEntityPositions"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setEntityRandomColor:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setEntityRandomColor(entity: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setEntityRandomColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setEntityVelocities:function(1)",
          "docComment": "/**\n * Helper function to set the velocity of every entity in the room based on a map of velocities. If an entity is found that does not have matching element in the provided map, then that entity will be skipped.\n *\n * This function is useful for rewinding entity velocities at a later time. Also see `getEntityVelocities`.\n *\n * @param entityVelocities - The map providing the velocities for every entity.\n *\n * @param entities - Optional. If provided, will only set the velocities of the provided entities. Use this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method multiple times.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setEntityVelocities(entityVelocities: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PtrHash",
              "canonicalReference": "!PtrHash:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", entities?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityVelocities",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isOptional": false
            },
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "setEntityVelocities"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setFamiliarDisplay:function(1)",
          "docComment": "/**\n * After using the \"familiarDisplay\" console command, text will be drawn on each familiar for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setFamiliarDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(familiar: "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setFamiliarDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setFamiliarNoSirenSteal:function(1)",
          "docComment": "/**\n * Blacklists a familiar from being stolen by The Siren boss. This should be called once at the beginning of every run.\n *\n * @param familiarVariant - The familiar variant to blacklist.\n *\n * @param familiarSubType - The sub-type to blacklist. Optional. The default is to blacklist all sub-types of the given variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setFamiliarNoSirenSteal(familiarVariant: "
            },
            {
              "kind": "Reference",
              "text": "FamiliarVariant",
              "canonicalReference": "isaac-typescript-definitions!FamiliarVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", familiarSubType?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "familiarVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "familiarSubType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "setFamiliarNoSirenSteal"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setFloorDisplayFlags:function(1)",
          "docComment": "/**\n * Alias for the `setDisplayFlags` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setFloorDisplayFlags(displayFlagsMap: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DisplayFlag",
              "canonicalReference": "isaac-typescript-definitions!DisplayFlag:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "displayFlagsMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "setFloorDisplayFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setGridEntityInvisible:function(1)",
          "docComment": "/**\n * Helper function to make a grid entity invisible. This is accomplished by setting its sprite to an empty/missing PNG file.\n *\n * For more information, see the documentation for the `clearSprite` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setGridEntityInvisible(gridEntity: "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntity",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setGridEntityInvisible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setHasPlayer:function(1)",
          "docComment": "/**\n * Helper function to make using sets with an type of `PlayerIndex` easier. Use this instead of the `Set.has` method if you have a set of this type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setHasPlayer(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlayerIndex",
              "canonicalReference": "isaacscript-common!PlayerIndex:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ", player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "setHasPlayer"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setIntervalGameFrames:function(1)",
          "docComment": "/**\n * Supply a function to be repeatedly run on an interval of N game frames in the `POST_UPDATE` callback. The function will continue to be fired until `false` is returned from the function.\n *\n * This is similar to the `setInterval` vanilla JavaScript function, except there is no corresponding `clearInterval` function. (Instead, the return value from the supplied function is used to stop the interval.)\n *\n * Note that this function will not handle saving and quitting. You must manually restart any intervals if the player saves and quits in the middle of a run.\n *\n * @param func - The function to repeatedly run on an interval.\n *\n * @param gameFrames - The amount of game frames to wait between each run.\n *\n * @param runImmediately - Whether or not to execute the function right now before waiting for the interval.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setIntervalGameFrames(func: "
            },
            {
              "kind": "Content",
              "text": "() => boolean"
            },
            {
              "kind": "Content",
              "text": ", gameFrames: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", runImmediately: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gameFrames",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "runImmediately",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "setIntervalGameFrames"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setIntervalRenderFrames:function(1)",
          "docComment": "/**\n * Supply a function to be repeatedly run on an interval of N render frames in the `POST_RENDER` callback. The function will continue to be fired until `false` is returned from the function.\n *\n * This is similar to the `setInterval` vanilla JavaScript function, except there is no corresponding `clearInterval` function. (Instead, the return value from the supplied function is used to stop the interval.)\n *\n * Note that this function will not handle saving and quitting. You must manually restart any intervals if the player saves and quits in the middle of a run.\n *\n * @param func - The function to repeatedly run on an interval.\n *\n * @param renderFrames - The amount of game frames to wait between each run.\n *\n * @param runImmediately - Whether or not to execute the function right now before waiting for the interval.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setIntervalRenderFrames(func: "
            },
            {
              "kind": "Content",
              "text": "() => boolean"
            },
            {
              "kind": "Content",
              "text": ", renderFrames: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", runImmediately: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "renderFrames",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "runImmediately",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "setIntervalRenderFrames"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setKnifeDisplay:function(1)",
          "docComment": "/**\n * After using the \"knifeDisplay\" console command, text will be drawn on each knife for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setKnifeDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(knife: "
            },
            {
              "kind": "Reference",
              "text": "EntityKnife",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityKnife:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setKnifeDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setLaserDisplay:function(1)",
          "docComment": "/**\n * After using the \"laserDisplay\" console command, text will be drawn on each laser for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setLaserDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(laser: "
            },
            {
              "kind": "Reference",
              "text": "EntityLaser",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityLaser:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setLaserDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setLogFunctionsGlobal:function(1)",
          "docComment": "/**\n * Converts every `isaacscript-common` function that begins with \"log\" to a global function.\n *\n * This is useful when printing out variables from the in-game debug console.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setLogFunctionsGlobal(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "setLogFunctionsGlobal"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setNPCDisplay:function(1)",
          "docComment": "/**\n * After using the \"npcDisplay\" console command, text will be drawn on each NPC for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setNPCDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(npc: "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setNPCDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setPickupDisplay:function(1)",
          "docComment": "/**\n * After using the \"pickupDisplay\" console command, text will be drawn on each pickup for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPickupDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(pickup: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setPickupDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setPitDisplay:function(1)",
          "docComment": "/**\n * After using the \"pitDisplay\" console command, text will be drawn on each pit for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPitDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(pit: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPit",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPit:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setPitDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setPlayerDisplay:function(1)",
          "docComment": "/**\n * After using the \"playerDisplay\" console command, text will be drawn on each player for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPlayerDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setPlayerDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setPlayerHealth:function(1)",
          "docComment": "/**\n * Helper function to set a player's health to a specific state. You can use this in combination with the `getPlayerHealth` function to restore the player's health back to a certain configuration at a later time.\n *\n * Based on the `REVEL.LoadHealth` function in the Revelations mod.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPlayerHealth(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", playerHealth: "
            },
            {
              "kind": "Reference",
              "text": "PlayerHealth",
              "canonicalReference": "isaacscript-common!PlayerHealth:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "playerHealth",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setPlayerHealth"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setPoopDisplay:function(1)",
          "docComment": "/**\n * After using the \"poopDisplay\" console command, text will be drawn on each poop for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPoopDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(poop: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPoop:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setPoopDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setPressurePlateDisplay:function(1)",
          "docComment": "/**\n * After using the \"pressurePlateDisplay\" console command, text will be drawn on each pressure plate for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setPressurePlateDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(pressurePlate: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPressurePlate",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPressurePlate:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setPressurePlateDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setProjectileDisplay:function(1)",
          "docComment": "/**\n * After using the \"projectileDisplay\" console command, text will be drawn on each projectile for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setProjectileDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(projectile: "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setProjectileDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setRockDisplay:function(1)",
          "docComment": "/**\n * After using the \"rockDisplay\" console command, text will be drawn on each rock for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setRockDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(rock: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityRock",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityRock:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setRockDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setRoomCleared:function(1)",
          "docComment": "/**\n * Helper function to convert an uncleared room to a cleared room in the `POST_NEW_ROOM` callback. This is useful because if enemies are removed in this callback, a room drop will be awarded and the doors will start closed and then open.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setRoomCleared(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "setRoomCleared"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setRoomData:function(1)",
          "docComment": "/**\n * Helper function to set the data for a given room. This will change the room type, contents, and so on.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setRoomData(roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", roomData: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RoomConfig",
              "canonicalReference": "isaac-typescript-definitions!~__global.RoomConfig:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "roomData",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "setRoomData"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setRoomDisplayFlags:function(1)",
          "docComment": "/**\n * Helper function to set a particular room's minimap display flags (e.g. whether or not it is visible and so on).\n *\n * @param roomGridIndex - Set to undefined to use the current room index.\n *\n * @param displayFlags - The bit flags value to set. (See the `DisplayFlag` enum.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setRoomDisplayFlags(roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", displayFlags: "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DisplayFlag",
              "canonicalReference": "isaac-typescript-definitions!DisplayFlag:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "displayFlags",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "setRoomDisplayFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setRoomUncleared:function(1)",
          "docComment": "/**\n * Helper function to emulate what happens when you bomb an Angel Statue or push a Reward Plate that spawns an NPC.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setRoomUncleared(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "setRoomUncleared"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setSeed:function(1)",
          "docComment": "/**\n * Helper function to set a seed to an RNG object using Blade's recommended shift index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setSeed(rng: "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", seed: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rng",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seed",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setSlotDisplay:function(1)",
          "docComment": "/**\n * After using the \"slotDisplay\" console command, text will be drawn on each slot for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setSlotDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(slot: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setSlotDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setSpikesDisplay:function(1)",
          "docComment": "/**\n * After using the \"spikesDisplay\" console command, text will be drawn on each spikes for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setSpikesDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(spikes: "
            },
            {
              "kind": "Reference",
              "text": "GridEntitySpikes",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntitySpikes:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setSpikesDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setStage:function(1)",
          "docComment": "/**\n * Helper function to warp to a new stage/level.\n *\n * @param stage - The stage number to warp to.\n *\n * @param stageType - The stage type to warp to.\n *\n * @param reseed - Optional. Whether or not to reseed the floor upon arrival. Default is false. Set this to true if you are warping to the same stage but a different stage type (or else the floor layout will be identical to the old floor).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setStage(stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ", stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": ", reseed?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stage",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "stageType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "reseed",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "setStage"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setTearDisplay:function(1)",
          "docComment": "/**\n * After using the \"tearDisplay\" console command, text will be drawn on each tear for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setTearDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(tear: "
            },
            {
              "kind": "Reference",
              "text": "EntityTear",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityTear:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setTearDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setTNTDisplay:function(1)",
          "docComment": "/**\n * After using the \"tntDisplay\" console command, text will be drawn on each TNT for debugging purposes. Use this function to specify a callback function that will returns the string that should be drawn.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this console command to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setTNTDisplay(textCallback: "
            },
            {
              "kind": "Content",
              "text": "(tnt: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityTNT",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityTNT:interface"
            },
            {
              "kind": "Content",
              "text": ") => string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textCallback",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setTNTDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setToBitFlags:function(1)",
          "docComment": "/**\n * Helper function to convert a set of flags to a single `BitFlags` object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setToBitFlags<T extends "
            },
            {
              "kind": "Reference",
              "text": "BitFlag",
              "canonicalReference": "!BitFlag:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BitFlag128",
              "canonicalReference": "!BitFlag128:type"
            },
            {
              "kind": "Content",
              "text": ">(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BitFlags",
              "canonicalReference": "!BitFlags:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "setToBitFlags"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setTrinketSprite:function(1)",
          "docComment": "/**\n * Helper function to change the sprite of a trinket entity.\n *\n * For more information about removing the trinket sprite, see the documentation for the \"clearSprite\" helper function.\n *\n * @param trinket - The trinket whose sprite you want to modify.\n *\n * @param pngPath - Equal to either the spritesheet path to load (e.g. \"gfx/items/trinkets/trinket_001_swallowedpenny.png\") or undefined. If undefined, the sprite will be removed, making it appear like the collectible has already been taken by the player.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setTrinketSprite(trinket: "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ", pngPath: "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinket",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "pngPath",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "setTrinketSprite"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!setUnseeded:function(1)",
          "docComment": "/**\n * Helper function to change the run status to that of an unseeded run with a new random seed.\n *\n * This is useful to revert the behavior where playing on a set and restarting the game will not take you to a new seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setUnseeded(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "setUnseeded"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!sfxManager:var",
          "docComment": "/**\n * A cached version of the class returned from the `SFXManager()` constructor.\n *\n * Use this instead of invoking the constructor again for a miniscule performance increase.\n *\n * Caching the results of this constructor is safe, but caching other classes (like `Level` or `Room`) is not safe and can lead to the game crashing in certain situations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sfxManager: "
            },
            {
              "kind": "Reference",
              "text": "SFXManager",
              "canonicalReference": "isaac-typescript-definitions!~__global.SFXManager:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "sfxManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!shuffleArray:function(1)",
          "docComment": "/**\n * Shallow copies and shuffles the array using the Fisher-Yates algorithm. Returns the copied array.\n *\n * From: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @param originalArray - The array to shuffle.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function shuffleArray<T>(originalArray: "
            },
            {
              "kind": "Content",
              "text": "T[] | readonly T[]"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "originalArray",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "shuffleArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!shuffleArrayInPlace:function(1)",
          "docComment": "/**\n * Shuffles the provided array in-place using the Fisher-Yates algorithm.\n *\n * From: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n *\n * @param array - The array to shuffle.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function shuffleArrayInPlace<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "shuffleArrayInPlace"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!sign:function(1)",
          "docComment": "/**\n * @returns 1 if n is positive, -1 if n is negative, or 0 if n is 0.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sign(n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "sign"
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!SlotDestructionType:enum",
          "docComment": "/**\n * This is used in the `POST_SLOT_DESTROYED` custom callback.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SlotDestructionType "
            }
          ],
          "releaseTag": "Public",
          "name": "SlotDestructionType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SlotDestructionType.COLLECTIBLE_PAYOUT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "COLLECTIBLE_PAYOUT = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "COLLECTIBLE_PAYOUT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!SlotDestructionType.NORMAL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NORMAL = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NORMAL"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!smeltTrinket:function(1)",
          "docComment": "/**\n * Helper function to smelt a trinket. Before smelting, this function will automatically remove the trinkets that the player is holding, if any, and then give them back after the new trinket is smelted.\n *\n * @param player - The player to smelt the trinkets to.\n *\n * @param trinketType - The trinket type to smelt.\n *\n * @param numTrinkets - Optional. If specified, will smelt the given number of trinkets. Use this to avoid calling this function multiple times. Default is 1.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function smeltTrinket(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ", numTrinkets?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "numTrinkets",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "smeltTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!smeltTrinkets:function(1)",
          "docComment": "/**\n * Helper function to smelt two or more different trinkets. If you want to smelt one trinket (or multiple copies of one trinket), then use the `smeltTrinket` helper function instead.\n *\n * This function is variadic, meaning that you can pass as many trinket types as you want to smelt.\n *\n * Before smelting, this function will automatically remove the trinkets that the player is holding, if any, and then give them back after the new trinket is smelted.\n *\n * @param player - The player to smelt the trinkets to.\n *\n * @param trinketTypes - The trinket types to smelt.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function smeltTrinkets(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", ...trinketTypes: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "trinketTypes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "smeltTrinkets"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!SoulHeartType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SoulHeartType = "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType.SOUL",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType.SOUL:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType.BLACK",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType.BLACK:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType.BONE",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType.BONE:member"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SoulHeartType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawn:function(1)",
          "docComment": "/**\n * Helper function to spawn an entity. Use this instead of the `Isaac.Spawn` method if you do not need to specify the velocity or spawner.\n *\n * Also see the `spawnWithSeed` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawn(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 18
              },
              "isOptional": true
            }
          ],
          "name": "spawn"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBattery:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.LIL_BATTERY` (90).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBattery(batterySubType: "
            },
            {
              "kind": "Reference",
              "text": "BatterySubType",
              "canonicalReference": "isaac-typescript-definitions!BatterySubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBattery",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBattery:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "batterySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnBattery"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBatteryWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.LIL_BATTERY` (90) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBatteryWithSeed(batterySubType: "
            },
            {
              "kind": "Reference",
              "text": "BatterySubType",
              "canonicalReference": "isaac-typescript-definitions!BatterySubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBattery",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBattery:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "batterySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnBatteryWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBomb:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.BOMB` (4).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBomb(bombVariant: "
            },
            {
              "kind": "Reference",
              "text": "BombVariant",
              "canonicalReference": "isaac-typescript-definitions!BombVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityBomb:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnBomb"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBombPickup:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.BOMB` (40).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBombPickup(bombSubType: "
            },
            {
              "kind": "Reference",
              "text": "BombSubType",
              "canonicalReference": "isaac-typescript-definitions!BombSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBomb:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnBombPickup"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBombPickupWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.BOMB` (40) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBombPickupWithSeed(bombSubType: "
            },
            {
              "kind": "Reference",
              "text": "BombSubType",
              "canonicalReference": "isaac-typescript-definitions!BombSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupBomb:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnBombPickupWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBombWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.BOMB` (4) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBombWithSeed(bombVariant: "
            },
            {
              "kind": "Reference",
              "text": "BombVariant",
              "canonicalReference": "isaac-typescript-definitions!BombVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityBomb",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityBomb:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bombVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnBombWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBoss:function(1)",
          "docComment": "/**\n * Helper function to spawn a boss.\n *\n * Use this function instead of `spawnNPC` since it handles automatically spawning multiple segments for multi-segment bosses.\n *\n * By default, this will spawn Chub (and his variants) with 3 segments, Lokii with 2 copies, Gurglings/Turdlings with 2 copies, and other multi-segment bosses with 4 segments. You can customize this via the \"numSegments\" argument.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBoss(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", numSegments?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 21,
            "endIndex": 22
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 18
              },
              "isOptional": true
            },
            {
              "parameterName": "numSegments",
              "parameterTypeTokenRange": {
                "startIndex": 19,
                "endIndex": 20
              },
              "isOptional": true
            }
          ],
          "name": "spawnBoss"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnBossWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a boss with a specific seed.\n *\n * For more information, see the documentation for the `spawnBoss` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnBossWithSeed(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", numSegments?: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 20,
            "endIndex": 21
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "isOptional": true
            },
            {
              "parameterName": "numSegments",
              "parameterTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "isOptional": true
            }
          ],
          "name": "spawnBossWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCard:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.TAROT_CARD` (300).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCard(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCard",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCard:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnCard"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCardWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.TAROT_CARD` (300) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCardWithSeed(card: "
            },
            {
              "kind": "Reference",
              "text": "Card",
              "canonicalReference": "isaac-typescript-definitions!Card:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCard",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCard:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "card",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnCardWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCoin:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.COIN` (20).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCoin(coinSubType: "
            },
            {
              "kind": "Reference",
              "text": "CoinSubType",
              "canonicalReference": "isaac-typescript-definitions!CoinSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCoin",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCoin:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "coinSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnCoin"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCoinWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.COIN` (20) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCoinWithSeed(coinSubType: "
            },
            {
              "kind": "Reference",
              "text": "CoinSubType",
              "canonicalReference": "isaac-typescript-definitions!CoinSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCoin",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCoin:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "coinSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnCoinWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCollectible:function(1)",
          "docComment": "/**\n * Helper function to spawn a collectible. Use this instead of the `Game.Spawn` method because it handles the cases of Tainted Keeper collectibles costing coins and preventing quest items from being rotated by Tainted Isaac's rotation mechanic. (Rotation prevention will only occur in upgraded mods.)\n *\n * @param collectibleType - The collectible type to spawn.\n *\n * @param position - The position to spawn the collectible at.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n *\n * @param options - Optional. Set to true to make the collectible a \"There's Options\" style collectible. Default is false.\n *\n * @param forceFreeItem - Optional. Set to true to disable the logic that gives the item a price for Tainted Keeper. Default is false.\n *\n * @param spawner - Optional.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCollectible(collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", forceFreeItem?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupCollectible",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupCollectible:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "forceFreeItem",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCustomDoor:function(1)",
          "docComment": "/**\n * Helper function to spawn a custom door. This is intended to be called from the `POST_NEW_ROOM` callback when the player enters a room that should have a custom door. (You could also call it from another callback if you want the door to appear e.g. after clearing all enemies.)\n *\n * Like other entities, the door is not persistent, so you must spawn it every time when re-entering the room.\n *\n * Handle when a player enters the door by hooking the custom `POST_CUSTOM_DOOR_ENTER` callback.\n *\n * The custom door is an `EntityEffect`. You can manually open or close the door by modifying its state. (The values to use correspond to the `DoorState` enum.)\n *\n * This function will throw a run-time error if: - the door slot already has a vanilla door - the door slot already has a custom door - the tile at the door slot does not have a wall\n *\n * Before using this function, you must first initialize the effect/door variant with the `initCustomDoor` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCustomDoor(effectVariant: "
            },
            {
              "kind": "Reference",
              "text": "EffectVariant",
              "canonicalReference": "isaac-typescript-definitions!EffectVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", doorSlot: "
            },
            {
              "kind": "Reference",
              "text": "DoorSlot",
              "canonicalReference": "isaac-typescript-definitions!DoorSlot:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effectVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "doorSlot",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnCustomDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCustomGrid:function(1)",
          "docComment": "/**\n * Helper function to spawn a custom grid entity. Custom grid entities are persistent in that they will reappear if the player leaves and re-enters the room. (It will be manually respawned in the `POST_NEW_ROOM` callback.)\n *\n * This is an IsaacScript feature because the vanilla game does not support any custom grid entities. Under the hood, IsaacScript accomplishes this by using decorations with an arbitrary non-zero variant to represent custom grid entities.\n *\n * Once a custom grid entity is spawned, you can take advantage of the custom grid callbacks such as `POST_GRID_ENTITY_CUSTOM_UPDATE`.\n *\n * @param gridEntityTypeCustom - An integer that identifies what kind of grid entity you are creating. It should correspond to a local enum value in your mod. The integer can be any unique value and will not correspond to the actual grid entity type used. (This integer is used in the various custom grid entity callbacks.)\n *\n * @param gridIndexOrPosition - The grid index or position in the room that you want to spawn the grid entity at. If a position is specified, the closest grid index will be used.\n *\n * @param gridCollisionClass - The collision class that you want the custom grid entity to have.\n *\n * @param anm2Path - The path to the ANM2 file to use for the sprite.\n *\n * @param defaultAnimation - Optional. The name of the animation to play after the sprite is initialized and after the player re-enters a room with this grid entity in it. If not specified, the default animation in the anm2 will be used.\n *\n * @param breakable - Optional. Whether or not an explosion will be able to break this grid entity. False by default. Use the `POST_GRID_ENTITY_CUSTOM_BROKEN` callback to detect when it breaks. Due to technical limitations, you can only set the grid entity to be breakable if it has a collision class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCustomGridEntity(gridEntityTypeCustom: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", gridCollisionClass: "
            },
            {
              "kind": "Reference",
              "text": "GridCollisionClass",
              "canonicalReference": "isaac-typescript-definitions!GridCollisionClass:enum"
            },
            {
              "kind": "Content",
              "text": ", anm2Path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", defaultAnimation?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", breakable?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityTypeCustom",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "gridCollisionClass",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "anm2Path",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "defaultAnimation",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "breakable",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnCustomGrid"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnCustomTrapdoor:function(1)",
          "docComment": "/**\n * Helper function to spawn a trapdoor grid entity that will have one or more of the following attributes:\n *\n * - custom destination (or custom logic for after the player enters) - custom graphics - custom logic for opening/closing\n *\n * You can use this function to take the player to your custom stage.\n *\n * Under the hood, the custom trapdoor is represented by a decoration grid entity and is manually respawned every time the player re-enters the room.\n *\n * @param gridIndexOrPosition - The location in the room to spawn the trapdoor.\n *\n * @param destination - Optional. Used to specify where the player will go after jumping into the trapdoor. Can either be a vanilla stage tuple, a custom stage tuple, or undefined. For example, a destination of `[LevelStage.CAVES_1, StageType.ORIGINAL]` corresponds to Caves 1, and a destination of `[\"Slaughterhouse\", 1]` corresponds to a custom stage of Slaughterhouse 1. If the destination is undefined, then the \"normal\" destination corresponding to the current stage and room will be used (e.g. the next floor, in most cases).\n *\n * @param anm2Path - Optional. The path to the anm2 file to use. By default, the vanilla trapdoor anm2 of \"gfx/grid/door_11_trapdoor.anm2\" will be used. The specified anm2 file must have animations called \"Opened\", \"Closed\", and \"Open Animation\".\n *\n * @param spawnOpen - Optional. Whether or not to spawn the trapdoor in an open state. By default, behavior will be used that emulates a vanilla trapdoor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnCustomTrapdoor(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", destination?: "
            },
            {
              "kind": "Reference",
              "text": "TrapdoorDestination",
              "canonicalReference": "isaacscript-common!TrapdoorDestination:type"
            },
            {
              "kind": "Content",
              "text": ", anm2Path?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", spawnOpen?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "destination",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "anm2Path",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawnOpen",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "spawnCustomTrapdoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnDoor:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.DOOR` (16).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnDoor(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnDoor"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnDoorWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.DOOR` (16) with a specific variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnDoorWithVariant(doorVariant: "
            },
            {
              "kind": "Reference",
              "text": "DoorVariant",
              "canonicalReference": "isaac-typescript-definitions!DoorVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityDoor",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityDoor:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "doorVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnDoorWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnEffect:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.EFFECT` (1000).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnEffect(effectVariant: "
            },
            {
              "kind": "Reference",
              "text": "EffectVariant",
              "canonicalReference": "isaac-typescript-definitions!EffectVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effectVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnEffect"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnEffectWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.EFFECT` (1000) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnEffectWithSeed(effectVariant: "
            },
            {
              "kind": "Reference",
              "text": "EffectVariant",
              "canonicalReference": "isaac-typescript-definitions!EffectVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityEffect",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityEffect:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "effectVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnEffectWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnEmptyCollectible:function(1)",
          "docComment": "/**\n * Helper function to spawn an empty collectible. Doing this is tricky since spawning a collectible with `CollectibleType.NULL` will result in spawning a collectible with a random type from the current room's item pool.\n *\n * Instead, this function arbitrarily spawns a collectible with `CollectibleType.SAD_ONION`, and then converts it to an empty pedestal afterward.\n *\n * @param position - The position to spawn the empty collectible at.\n *\n * @param seedOrRNG - The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnEmptyCollectible(position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "spawnEmptyCollectible"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnFamiliar:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.FAMILIAR` (3).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnFamiliar(familiarVariant: "
            },
            {
              "kind": "Reference",
              "text": "FamiliarVariant",
              "canonicalReference": "isaac-typescript-definitions!FamiliarVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "familiarVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnFamiliar"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnFamiliarWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.FAMILIAR` (3) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnFamiliarWithSeed(familiarVariant: "
            },
            {
              "kind": "Reference",
              "text": "FamiliarVariant",
              "canonicalReference": "isaac-typescript-definitions!FamiliarVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityFamiliar",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityFamiliar:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "familiarVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnFamiliarWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnGiantPoop:function(1)",
          "docComment": "/**\n * Helper function to spawn a giant poop. This is performed by spawning each of the four quadrant grid entities in the appropriate positions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnGiantPoop(topLeftGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "topLeftGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "spawnGiantPoop"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnGridEntity:function(1)",
          "docComment": "/**\n * Helper function to spawn a grid entity.\n *\n * This function assumes you want to give the grid entity a variant of 0. If you want to specify a variant, use the `spawnGridEntityWithVariant` helper function instead.\n *\n * Use this instead of the `Isaac.GridSpawn` method since it: - handles giving pits collision - removes existing grid entities on the same tile, if any - allows you to specify either the grid index or the position\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnGridEntity(gridEntityType: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnGridEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnGridEntityWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a grid entity with a specific variant.\n *\n * Use this instead of the `Isaac.GridSpawn` method since it: - handles giving pits collision - removes existing grid entities on the same tile, if any - allows you to specify the grid index or the position\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnGridEntityWithVariant(gridEntityType: "
            },
            {
              "kind": "Reference",
              "text": "GridEntityType",
              "canonicalReference": "isaac-typescript-definitions!GridEntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridEntityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "spawnGridEntityWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnHeart:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.HEART` (10).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnHeart(heartSubType: "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupHeart",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupHeart:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "heartSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnHeart"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnHeartWithSeed:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnHeartWithSeed(heartSubType: "
            },
            {
              "kind": "Reference",
              "text": "HeartSubType",
              "canonicalReference": "isaac-typescript-definitions!HeartSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupHeart",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupHeart:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "heartSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnHeartWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnKey:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.KEY` (30).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnKey(keySubType: "
            },
            {
              "kind": "Reference",
              "text": "KeySubType",
              "canonicalReference": "isaac-typescript-definitions!KeySubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupKey",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupKey:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnKey"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnKeyWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.KEY` (30) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnKeyWithSeed(keySubType: "
            },
            {
              "kind": "Reference",
              "text": "KeySubType",
              "canonicalReference": "isaac-typescript-definitions!KeySubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupKey",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupKey:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keySubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnKeyWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnKnife:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.KNIFE` (8).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnKnife(knifeVariant: "
            },
            {
              "kind": "Reference",
              "text": "KnifeVariant",
              "canonicalReference": "isaac-typescript-definitions!KnifeVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityKnife",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityKnife:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "knifeVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnKnife"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnKnifeWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.KNIFE` (8) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnKnifeWithSeed(knifeVariant: "
            },
            {
              "kind": "Reference",
              "text": "KnifeVariant",
              "canonicalReference": "isaac-typescript-definitions!KnifeVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityKnife",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityKnife:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "knifeVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnKnifeWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnLaser:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.LASER` (7).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnLaser(laserVariant: "
            },
            {
              "kind": "Reference",
              "text": "LaserVariant",
              "canonicalReference": "isaac-typescript-definitions!LaserVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityLaser",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityLaser:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "laserVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnLaser"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnLaserWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.LASER` (7) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnLaserWithSeed(laserVariant: "
            },
            {
              "kind": "Reference",
              "text": "LaserVariant",
              "canonicalReference": "isaac-typescript-definitions!LaserVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityLaser",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityLaser:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "laserVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnLaserWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnNPC:function(1)",
          "docComment": "/**\n * Helper function to spawn an NPC.\n *\n * Note that if you pass a non-NPC `EntityType` to this function, it will cause a run-time error, since the `Entity.ToNPC` method will return undefined.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnNPC(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 18
              },
              "isOptional": true
            }
          ],
          "name": "spawnNPC"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnNPCWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn an NPC with a specific seed.\n *\n * Note that if you pass a non-NPC `EntityType` to this function, it will cause a run-time error, since the `Entity.ToNPC` method will return undefined.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnNPCWithSeed(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityNPC",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityNPC:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 18,
            "endIndex": 19
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "isOptional": true
            }
          ],
          "name": "spawnNPCWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPersistentEntity:function(1)",
          "docComment": "/**\n * Helper function to spawn an entity that will have persistence similar to a pickup.\n *\n * By default, as soon as you leave a room, any spawned entities will be despawned and will not return if the player revisits the room. This means that if you want to have an entity like a pickup, you have to manually respawn it when the player re-enters the room. Use this helper function to avoid having to do any tracking on your own.\n *\n * Conventionally, the word \"persistent\" refers to `EntityFlag.FLAG_PERSISTENT`, which is used on e.g. familiars to make them appear in every room. On the other hand, pickups are also persistent, but they are not present in every room, only one specific room. This function spawns entities like pickups, not familiars.\n *\n * @returns A tuple containing the entity and the persistent entity index. You can use the index with the `removePersistentEntity` function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPersistentEntity(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "["
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "spawnPersistentEntity"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPickup:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPickup(pickupVariant: "
            },
            {
              "kind": "Reference",
              "text": "PickupVariant",
              "canonicalReference": "isaac-typescript-definitions!PickupVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickupVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnPickup"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPickupWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPickupWithSeed(pickupVariant: "
            },
            {
              "kind": "Reference",
              "text": "PickupVariant",
              "canonicalReference": "isaac-typescript-definitions!PickupVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickup",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickup:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pickupVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnPickupWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPill:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.PILL` (70).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPill(pillColor: "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupPill",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupPill:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnPill"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPillWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.PILL` (70) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPillWithSeed(pillColor: "
            },
            {
              "kind": "Reference",
              "text": "PillColor",
              "canonicalReference": "isaac-typescript-definitions!PillColor:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupPill",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupPill:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pillColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnPillWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPit:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.PIT` (7).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPit(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPit",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPit:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnPit"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPitWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.PIT` (7) with a specific variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPitWithVariant(pitVariant: "
            },
            {
              "kind": "Reference",
              "text": "PitVariant",
              "canonicalReference": "isaac-typescript-definitions!PitVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPit",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPit:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pitVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnPitWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPoop:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.POOP` (14).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPoop(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPoop:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnPoop"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPoopWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.POOP` (14) with a specific variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPoopWithVariant(poopVariant: "
            },
            {
              "kind": "Reference",
              "text": "PoopGridEntityVariant",
              "canonicalReference": "isaac-typescript-definitions!PoopGridEntityVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPoop",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPoop:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "poopVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnPoopWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPressurePlate:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.PRESSURE_PLATE` (20).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPressurePlate(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPressurePlate",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPressurePlate:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnPressurePlate"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnPressurePlateWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.PRESSURE_PLATE` (20) with a specific variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnPressurePlateWithVariant(pressurePlateVariant: "
            },
            {
              "kind": "Reference",
              "text": "PressurePlateVariant",
              "canonicalReference": "isaac-typescript-definitions!PressurePlateVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityPressurePlate",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityPressurePlate:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pressurePlateVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnPressurePlateWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnProjectile:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PROJECTILE` (9).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnProjectile(projectileVariant: "
            },
            {
              "kind": "Reference",
              "text": "ProjectileVariant",
              "canonicalReference": "isaac-typescript-definitions!ProjectileVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "projectileVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnProjectile"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnProjectileWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PROJECTILE` (9) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnProjectileWithSeed(projectileVariant: "
            },
            {
              "kind": "Reference",
              "text": "ProjectileVariant",
              "canonicalReference": "isaac-typescript-definitions!ProjectileVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityProjectile",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityProjectile:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "projectileVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnProjectileWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnRock:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.ROCK` (2).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnRock(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityRock",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityRock:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnRock"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnRockAltReward:function(1)",
          "docComment": "/**\n * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity breaks.\n *\n * Most of the time, this function will do nothing, similar to how most of the time, when an individual urn is destroyed, nothing will spawn.\n *\n * Note that in vanilla, trinkets will not spawn if they have already been removed from the trinket pool. This function cannot replicate that behavior because there is no way to check to see if a trinket is still in the pool. Thus, it will always have a chance to spawn the respective trinket (e.g. Swallowed Penny from urns).\n *\n * When filled buckets are destroyed, 6 projectiles will always spawn in a random pattern (in addition to any other rewards that are spawned). This function does not account for this, so if you want to specifically emulate destroying a filled bucket, you have to account for the projectiles yourself.\n *\n * The logic in this function is based on the rewards listed on the wiki: https://bindingofisaacrebirth.fandom.com/wiki/Rocks\n *\n * @param position - The place to spawn the reward.\n *\n * @param rockAltType - The type of reward to spawn. For example, `RockAltType.URN` will have a chance at spawning coins and spiders.\n *\n * @param seedOrRNG - Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the `RNG.Next` method will be called. Default is `getRandomSeed()`. Normally, you should pass the `InitSeed` of the grid entity that was broken.\n *\n * @returns Whether or not this function spawned something.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnRockAltReward(position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", rockAltType: "
            },
            {
              "kind": "Reference",
              "text": "RockAltType",
              "canonicalReference": "isaacscript-common!RockAltType:enum"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "rockAltType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "spawnRockAltReward"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnRockWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.ROCK` (2) with a specific variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnRockWithVariant(rockVariant: "
            },
            {
              "kind": "Reference",
              "text": "RockVariant",
              "canonicalReference": "isaac-typescript-definitions!RockVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityRock",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityRock:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "rockVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnRockWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnSack:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.SACK` (69).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnSack(sackSubType: "
            },
            {
              "kind": "Reference",
              "text": "SackSubType",
              "canonicalReference": "isaac-typescript-definitions!SackSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupSack",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupSack:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sackSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnSack"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnSackWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.SACK` (69) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnSackWithSeed(sackSubType: "
            },
            {
              "kind": "Reference",
              "text": "SackSubType",
              "canonicalReference": "isaac-typescript-definitions!SackSubType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupSack",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupSack:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sackSubType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnSackWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnSlot:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.SLOT` (6).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnSlot(slotVariant: "
            },
            {
              "kind": "Reference",
              "text": "SlotVariant",
              "canonicalReference": "isaac-typescript-definitions!SlotVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntitySlot",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntitySlot:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slotVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnSlot"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnSlotWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.SLOT` (6) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnSlotWithSeed(slotVariant: "
            },
            {
              "kind": "Reference",
              "text": "SlotVariant",
              "canonicalReference": "isaac-typescript-definitions!SlotVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntitySlot",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntitySlot:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slotVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnSlotWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnSpikes:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.SPIKES` (8).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnSpikes(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntitySpikes",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntitySpikes:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnSpikes"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnSpikesWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.SPIKES` (8) with a specific variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnSpikesWithVariant(variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntitySpikes",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntitySpikes:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnSpikesWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnTear:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.TEAR` (2).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnTear(tearVariant: "
            },
            {
              "kind": "Reference",
              "text": "TearVariant",
              "canonicalReference": "isaac-typescript-definitions!TearVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityTear",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityTear:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 17,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tearVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "isOptional": true
            }
          ],
          "name": "spawnTear"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnTearWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.EntityType` (2) with a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnTearWithSeed(tearVariant: "
            },
            {
              "kind": "Reference",
              "text": "TearVariant",
              "canonicalReference": "isaac-typescript-definitions!TearVariant:enum"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityTear",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityTear:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 17
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tearVariant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "isOptional": true
            }
          ],
          "name": "spawnTearWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnTNT:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.TNT` (12).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnTNT(gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityTNT",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityTNT:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "spawnTNT"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnTNTWithVariant:function(1)",
          "docComment": "/**\n * Helper function to spawn a `GridEntityType.TNT` (12) with a specific variant.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnTNTWithVariant(variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", gridIndexOrPosition: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntityTNT",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntityTNT:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "gridIndexOrPosition",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "spawnTNTWithVariant"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnTrinket:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.TRINKET` (350).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnTrinket(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG?: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupTrinket",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupTrinket:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 15,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "isOptional": true
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "isOptional": true
            }
          ],
          "name": "spawnTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnTrinketWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.TRINKET` (350) and a specific seed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnTrinketWithSeed(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EntityPickupTrinket",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPickupTrinket:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "isOptional": true
            }
          ],
          "name": "spawnTrinketWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnVoidPortal:function(1)",
          "docComment": "/**\n * Helper function to spawn a Void Portal. This is more complicated than simply spawning a trapdoor with the appropriate variant, as the game does not give it the correct sprite automatically.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnVoidPortal(gridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "GridEntity",
              "canonicalReference": "isaac-typescript-definitions!~__global.GridEntity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "gridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "spawnVoidPortal"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spawnWithSeed:function(1)",
          "docComment": "/**\n * Helper function to spawn an entity. Use this instead of the `Game.Spawn` method if you do not need to specify the velocity or spawner.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spawnWithSeed(entityType: "
            },
            {
              "kind": "Reference",
              "text": "EntityType",
              "canonicalReference": "isaac-typescript-definitions!EntityType:enum"
            },
            {
              "kind": "Content",
              "text": ", variant: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", subType: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", seedOrRNG: "
            },
            {
              "kind": "Reference",
              "text": "Seed",
              "canonicalReference": "!Seed:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RNG",
              "canonicalReference": "!RNG:interface"
            },
            {
              "kind": "Content",
              "text": ", velocity?: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", spawner?: "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Entity",
              "canonicalReference": "isaac-typescript-definitions!~__global.Entity:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 18,
            "endIndex": 19
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "variant",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "subType",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "seedOrRNG",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "velocity",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true
            },
            {
              "parameterName": "spawner",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "isOptional": true
            }
          ],
          "name": "spawnWithSeed"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!spriteEquals:function(1)",
          "docComment": "/**\n * Helper function to check if two sprite layers have the same sprite sheet by using the `Sprite.GetTexel` method.\n *\n * Since checking every single texel in the entire sprite is very expensive, this function requires that you provide a range of specific texels to check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spriteEquals(sprite1: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": ", sprite2: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": ", layerID: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", xStart: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", xFinish: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", xIncrement: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", yStart: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", yFinish: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", yIncrement: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 19,
            "endIndex": 20
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sprite1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "sprite2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "layerID",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "xStart",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "xFinish",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": false
            },
            {
              "parameterName": "xIncrement",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "yStart",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false
            },
            {
              "parameterName": "yFinish",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 16
              },
              "isOptional": false
            },
            {
              "parameterName": "yIncrement",
              "parameterTypeTokenRange": {
                "startIndex": 17,
                "endIndex": 18
              },
              "isOptional": false
            }
          ],
          "name": "spriteEquals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!stageTypeToLetter:function(1)",
          "docComment": "/**\n * Helper function to convert a numerical `StageType` into the letter suffix supplied to the \"stage\" console command. For example, `StageType.REPENTANCE` is the stage type for Downpour, and the console command to go to Downpour is \"stage 1c\", so this function converts `StageType.REPENTANCE` to \"c\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stageTypeToLetter(stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stageType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "stageTypeToLetter"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!startAmbush:function(1)",
          "docComment": "/**\n * Helper function to start a Challenge Room or the Boss Rush.\n *\n * Specifically, this is performed by spawning a sack on top of the player, waiting a game frame, and then removing the sack and the pickups that the sack dropped.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function startAmbush(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "startAmbush"
        },
        {
          "kind": "Enum",
          "canonicalReference": "isaacscript-common!StatType:enum",
          "docComment": "/**\n * This represents the kinds of stats that a player can have.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StatType "
            }
          ],
          "releaseTag": "Public",
          "name": "StatType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.DAMAGE:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.DAMAGE` (1 << 0) and `EntityPlayer.Damage`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DAMAGE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DAMAGE"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.FIRE_DELAY:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.FIRE_DELAY` (1 << 1) and `EntityPlayer.MaxFireDelay`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FIRE_DELAY = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FIRE_DELAY"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.FLYING:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.FLYING` (1 << 7) and `EntityPlayer.CanFly`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FLYING = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "FLYING"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.LUCK:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.LUCK` (1 << 10) and `EntityPlayer.Luck`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LUCK = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "LUCK"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.MOVE_SPEED:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.SPEED` (1 << 4) and `EntityPlayer.MoveSpeed`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MOVE_SPEED = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MOVE_SPEED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.SHOT_SPEED:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.SHOT_SPEED` (1 << 2) and `EntityPlayer.ShotSpeed`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SHOT_SPEED = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SHOT_SPEED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.TEAR_COLOR:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.TEAR_COLOR` (1 << 6) and `EntityPlayer.TearColor`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEAR_COLOR = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEAR_COLOR"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.TEAR_FALLING_ACCELERATION:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.RANGE` (1 << 3) and `EntityPlayer.TearFallingAcceleration`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEAR_FALLING_ACCELERATION = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEAR_FALLING_ACCELERATION"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.TEAR_FALLING_SPEED:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.RANGE` (1 << 3) and `EntityPlayer.TearFallingSpeed`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEAR_FALLING_SPEED = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEAR_FALLING_SPEED"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.TEAR_FLAG:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.TEAR_FLAG` (1 << 5) and `EntityPlayer.TearFlags`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEAR_FLAG = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEAR_FLAG"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.TEAR_HEIGHT:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.RANGE` (1 << 3) and `EntityPlayer.TearHeight`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEAR_HEIGHT = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEAR_HEIGHT"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "isaacscript-common!StatType.TEAR_RANGE:member",
              "docComment": "/**\n * Corresponds to `CacheFlag.RANGE` (1 << 3) and `EntityPlayer.TearRange`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TEAR_RANGE = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TEAR_RANGE"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!StatTypeType:interface",
          "docComment": "/**\n * This is an interface mapping a stat type to the data type. For example, `StatType.DAMAGE` is a `float` type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StatTypeType "
            }
          ],
          "releaseTag": "Public",
          "name": "StatTypeType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"0\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.DAMAGE",
                  "canonicalReference": "isaacscript-common!StatType.DAMAGE:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"0\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"1\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.FIRE_DELAY",
                  "canonicalReference": "isaacscript-common!StatType.FIRE_DELAY:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"1\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"10\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.FLYING",
                  "canonicalReference": "isaacscript-common!StatType.FLYING:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"10\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"11\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.LUCK",
                  "canonicalReference": "isaacscript-common!StatType.LUCK:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"11\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"2\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.SHOT_SPEED",
                  "canonicalReference": "isaacscript-common!StatType.SHOT_SPEED:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"2\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"3\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.TEAR_HEIGHT",
                  "canonicalReference": "isaacscript-common!StatType.TEAR_HEIGHT:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"3\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"4\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.TEAR_RANGE",
                  "canonicalReference": "isaacscript-common!StatType.TEAR_RANGE:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"4\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"5\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.TEAR_FALLING_ACCELERATION",
                  "canonicalReference": "isaacscript-common!StatType.TEAR_FALLING_ACCELERATION:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"5\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"6\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.TEAR_FALLING_SPEED",
                  "canonicalReference": "isaacscript-common!StatType.TEAR_FALLING_SPEED:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"6\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"7\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.MOVE_SPEED",
                  "canonicalReference": "isaacscript-common!StatType.MOVE_SPEED:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "float",
                  "canonicalReference": "!float:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"7\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"8\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.TEAR_FLAG",
                  "canonicalReference": "isaacscript-common!StatType.TEAR_FLAG:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "BitFlags",
                  "canonicalReference": "!BitFlags:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TearFlag",
                  "canonicalReference": "isaac-typescript-definitions!TearFlag:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"8\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!StatTypeType#\"9\":member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "StatType.TEAR_COLOR",
                  "canonicalReference": "isaacscript-common!StatType.TEAR_COLOR:member"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "!Color:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "\"9\"",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!stopAllSoundEffects:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stopAllSoundEffects(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "stopAllSoundEffects"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!sumArray:function(1)",
          "docComment": "/**\n * Helper function to sum every value in an array together.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sumArray(array: "
            },
            {
              "kind": "Content",
              "text": "number[] | readonly number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "sumArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!sumMap:function(1)",
          "docComment": "/**\n * Helper function to sum every value in a map together.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sumMap(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown, number> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown, number>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "sumMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!sumSet:function(1)",
          "docComment": "/**\n * Helper function to sum every value in a set together.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sumSet(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<number> | "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "sumSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!swapArrayElements:function(1)",
          "docComment": "/**\n * Helper function to swap two different array elements. (The elements will be swapped in-place.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function swapArrayElements<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", i: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", j: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "i",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "j",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "swapArrayElements"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!tableHasKeys:function(1)",
          "docComment": "/**\n * Helper function to check if a Lua table has all of the provided keys.\n *\n * This function is variadic, meaning that you can specify as many arguments as you want to check for.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function tableHasKeys(luaMap: "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown>"
            },
            {
              "kind": "Content",
              "text": ", ...keys: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "luaMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "name": "tableHasKeys"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE:var",
          "docComment": "/**\n * After taking damage, `EntityPlayer.SamsonBerserkCharge` is incremented by this amount.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE = "
            },
            {
              "kind": "Content",
              "text": "10000"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!tanh:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function tanh(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "tanh"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!teleport:function(1)",
          "docComment": "/**\n * Helper function to change the current room. It can be used for both teleportation and \"normal\" room transitions, depending on what is passed for the `direction` and `roomTransitionAnim` arguments.\n *\n * Use this function instead of invoking the `Game.StartRoomTransition` method directly so that: - you do not forget to set the `Level.LeaveDoor` field - to prevent crashing on invalid room grid indexes - to automatically handle Curse of the Maze\n *\n * @param roomGridIndex - The room grid index of the destination room.\n *\n * @param direction - Optional. Default is `Direction.NO_DIRECTION`.\n *\n * @param roomTransitionAnim - Optional. Default is `RoomTransitionAnim.TELEPORT`.\n *\n * @param force - Optional. Whether to temporarily disable Curse of the Maze. Default is false. If set to false, then this function may not go to the provided room grid index.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function teleport(roomGridIndex: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": ", direction?: "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": ", roomTransitionAnim?: "
            },
            {
              "kind": "Reference",
              "text": "RoomTransitionAnim",
              "canonicalReference": "isaac-typescript-definitions!RoomTransitionAnim:enum"
            },
            {
              "kind": "Content",
              "text": ", force?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "roomGridIndex",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "direction",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "roomTransitionAnim",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "force",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "teleport"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!temporarilyRemoveTrinket:function(1)",
          "docComment": "/**\n * Helper function to temporarily remove a specific kind of trinket from the player. Use this in combination with the `giveTrinketsBack` function to take away and give back a trinket on the same frame. This function correctly handles multiple trinket slots and ensures that all copies of the trinket are removed, including smelted trinkets.\n *\n * Note that one smelted golden trinket is the same as two smelted normal trinkets.\n *\n * @returns Undefined if the player does not have the trinket, or TrinketSituation if they do.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function temporarilyRemoveTrinket(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TrinketSituation",
              "canonicalReference": "isaacscript-common!TrinketSituation:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "temporarilyRemoveTrinket"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!temporarilyRemoveTrinkets:function(1)",
          "docComment": "/**\n * Helper function to temporarily removes a player's held trinkets, if any. This will not remove any smelted trinkets. Use this in combination with the `giveTrinketsBack` function to take away and give back trinkets on the same frame.\n *\n * @returns Undefined if the player does not have any trinkets, or TrinketSituation if they do.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function temporarilyRemoveTrinkets(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TrinketSituation",
              "canonicalReference": "isaacscript-common!TrinketSituation:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "temporarilyRemoveTrinkets"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!texelEquals:function(1)",
          "docComment": "/**\n * Helper function to check if two texels on a sprite are equivalent to each other.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function texelEquals(sprite1: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": ", sprite2: "
            },
            {
              "kind": "Reference",
              "text": "Sprite",
              "canonicalReference": "!Sprite:interface"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", layerID: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sprite1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "sprite2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "layerID",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "texelEquals"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!todo:function(1)",
          "docComment": "/**\n * Helper function to signify that the enclosing code block is not yet complete. Using this function is similar to writing a \"TODO\" comment, but it has the benefit of preventing ESLint errors due to early returns.\n *\n * When you see this function, it simply means that the programmer intends to add in more code to this spot later.\n *\n * This function is variadic, meaning that you can pass as many arguments as you want. (This is useful as a means to prevent lint warnings.)\n *\n * This function does not actually do anything. (It is an \"empty\" function.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function todo(...args: "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "todo"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleBombDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for bombs. This is the function that runs when you use the \"bombDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleBombDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleBombDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleDoorDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for doors. This is the function that runs when you use the \"doorDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleDoorDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleDoorDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleEffectDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for effects. This is the function that runs when you use the \"effectDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleEffectDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleEffectDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleFamiliarDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for familiars. This is the function that runs when you use the \"familiarDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleFamiliarDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleFamiliarDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleKnifeDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for knives. This is the function that runs when you use the \"knifeDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleKnifeDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleKnifeDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleLaserDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for lasers. This is the function that runs when you use the \"laserDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleLaserDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleLaserDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleNPCDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for NPCs. This is the function that runs when you use the \"npcDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleNPCDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleNPCDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!togglePickupDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for pickups. This is the function that runs when you use the \"pickupDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function togglePickupDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "togglePickupDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!togglePitDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for pits. This is the function that runs when you use the \"pitDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function togglePitDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "togglePitDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!togglePlayerDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for players. This is the function that runs when you use the \"playerDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function togglePlayerDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "togglePlayerDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!togglePoopDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for poop. This is the function that runs when you use the \"poopDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function togglePoopDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "togglePoopDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!togglePressurePlateDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for pressure plates. This is the function that runs when you use the \"pressurePlateDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function togglePressurePlateDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "togglePressurePlateDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleProjectileDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for projectiles. This is the function that runs when you use the \"projectileDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleProjectileDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleProjectileDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleRockDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for rocks. This is the function that runs when you use the \"rockDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleRockDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleRockDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleSlotDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for slots. This is the function that runs when you use the \"slotDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleSlotDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleSlotDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleSpikesDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for spikes. This is the function that runs when you use the \"spikesDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleSpikesDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleSpikesDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleTearDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for tears. This is the function that runs when you use the \"tearDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleTearDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleTearDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!toggleTNTDisplay:function(1)",
          "docComment": "/**\n * Toggles the debug display for TNT. This is the function that runs when you use the \"tntDisplay\" custom console command.\n *\n * Note that you have to run the `enableExtraConsoleCommands` function once at the beginning of your mod in order for this feature to work.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toggleTNTDisplay(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "toggleTNTDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!traceback:function(1)",
          "docComment": "/**\n * Helper function to print a stack trace to the \"log.txt\" file, similar to JavaScript's `console.trace` function.\n *\n * This will only work if the `--luadebug` launch option is enabled or the Racing+ sandbox is enabled.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function traceback(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "traceback"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!TrapdoorDestination:type",
          "docComment": "/**\n * This is the type that you need to specify when using the `spawnCustomTrapdoor` helper function.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TrapdoorDestination = "
            },
            {
              "kind": "Content",
              "text": "[stage: "
            },
            {
              "kind": "Reference",
              "text": "LevelStage",
              "canonicalReference": "isaac-typescript-definitions!LevelStage:enum"
            },
            {
              "kind": "Content",
              "text": ", stageType: "
            },
            {
              "kind": "Reference",
              "text": "StageType",
              "canonicalReference": "isaac-typescript-definitions!StageType:enum"
            },
            {
              "kind": "Content",
              "text": "] | [customStageName: string, floorNum: "
            },
            {
              "kind": "Reference",
              "text": "int",
              "canonicalReference": "!int:type"
            },
            {
              "kind": "Content",
              "text": "]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TrapdoorDestination",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!trimPrefix:function(1)",
          "docComment": "/**\n * Helper function to trim a prefix from a string, if it exists. Returns the trimmed string.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function trimPrefix(string: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", prefix: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "string",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "prefix",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "trimPrefix"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!trimSuffix:function(1)",
          "docComment": "/**\n * Helper function to trim a suffix from a string, if it exists. Returns the trimmed string.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function trimSuffix(string: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", prefix: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "string",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "prefix",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "trimSuffix"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!trinketHasCacheFlag:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function trinketHasCacheFlag(trinketType: "
            },
            {
              "kind": "Reference",
              "text": "TrinketType",
              "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
            },
            {
              "kind": "Content",
              "text": ", cacheFlag: "
            },
            {
              "kind": "Reference",
              "text": "CacheFlag",
              "canonicalReference": "isaac-typescript-definitions!CacheFlag:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trinketType",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "cacheFlag",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "trinketHasCacheFlag"
        },
        {
          "kind": "Interface",
          "canonicalReference": "isaacscript-common!TrinketSituation:interface",
          "docComment": "/**\n * This is used by the `temporarilyRemoveTrinkets` and related helper functions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TrinketSituation "
            }
          ],
          "releaseTag": "Public",
          "name": "TrinketSituation",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!TrinketSituation#numSmeltedTrinkets:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numSmeltedTrinkets: "
                },
                {
                  "kind": "Reference",
                  "text": "int",
                  "canonicalReference": "!int:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "numSmeltedTrinkets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!TrinketSituation#trinketType1:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trinketType1: "
                },
                {
                  "kind": "Reference",
                  "text": "TrinketType",
                  "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trinketType1",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!TrinketSituation#trinketType2:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trinketType2: "
                },
                {
                  "kind": "Reference",
                  "text": "TrinketType",
                  "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trinketType2",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "isaacscript-common!TrinketSituation#trinketTypeRemoved:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trinketTypeRemoved: "
                },
                {
                  "kind": "Reference",
                  "text": "TrinketType",
                  "canonicalReference": "isaac-typescript-definitions!TrinketType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trinketTypeRemoved",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "isaacscript-common!TSTLClass:type",
          "docComment": "/**\n * This is a type representing a user-created class from TypeScript code.\n *\n * This type is used by the save data manager to when copying, serializing, and deserializing.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TSTLClass = "
            },
            {
              "kind": "Reference",
              "text": "LuaMap",
              "canonicalReference": "!LuaMap:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "AnyNotNil",
              "canonicalReference": "!AnyNotNil:type"
            },
            {
              "kind": "Content",
              "text": ", unknown> & {\n    readonly __tstlClassBrand: symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TSTLClass",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!twoDimensionalSort:function(1)",
          "docComment": "/**\n * Helper function to sort a two-dimensional array by the first element.\n *\n * For example:\n * ```ts\n * const myArray = [[1, 2], [2, 3], [3, 4]];\n * myArray.sort(twoDimensionalSort);\n * ```\n *\n * From: https://stackoverflow.com/questions/16096872/how-to-sort-2-dimensional-array-by-column-value\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function twoDimensionalSort<T>(a: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "-1 | 0 | 1"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "twoDimensionalSort"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!UI_HEART_WIDTH:var",
          "docComment": "/**\n * This is the number of draw coordinates that each heart spans on the UI in the upper left hand corner.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "UI_HEART_WIDTH = "
            },
            {
              "kind": "Content",
              "text": "12"
            }
          ],
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "UI_HEART_WIDTH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!unpause:function(1)",
          "docComment": "/**\n * Helper function to put things back to normal after the `pause` function was used.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function unpause(): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "unpause"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!unregisterHotkey:function(1)",
          "docComment": "/**\n * Helper function to remove a hotkey created with the `registerHotkey` function.\n *\n * @param keyboardOrFunc - Equal to the value that you passed when initially registering the hotkey.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function unregisterHotkey(keyboardOrFunc: "
            },
            {
              "kind": "Reference",
              "text": "Keyboard",
              "canonicalReference": "isaac-typescript-definitions!Keyboard:enum"
            },
            {
              "kind": "Content",
              "text": " | (() => "
            },
            {
              "kind": "Reference",
              "text": "Keyboard",
              "canonicalReference": "isaac-typescript-definitions!Keyboard:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined)"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "keyboardOrFunc",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "unregisterHotkey"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!upgradeMod:function(1)",
          "docComment": "/**\n * Use this function to enable the custom callbacks and other optional features provided by `isaacscript-common`.\n *\n * For example:\n * ```ts\n * const modVanilla = RegisterMod(\"My Mod\", 1);\n * const mod = upgradeMod(modVanilla);\n *\n * // Subscribe to vanilla callbacks.\n * mod.AddCallback(ModCallback.POST_UPDATE, postUpdate);\n *\n * // Subscribe to custom callbacks.\n * mod.AddCallbackCustom(ModCallbackCustom.POST_ITEM_PICKUP, postItemPickup);\n * ```\n *\n * @param modVanilla - The mod object returned by the `RegisterMod` function.\n *\n * @returns The upgraded mod object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function upgradeMod(modVanilla: "
            },
            {
              "kind": "Reference",
              "text": "Mod",
              "canonicalReference": "isaac-typescript-definitions!~__global.Mod:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ModUpgraded",
              "canonicalReference": "isaacscript-common!ModUpgraded:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "modVanilla",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "upgradeMod"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!useActiveItemTemp:function(1)",
          "docComment": "/**\n * Helper function to use an active item without showing an animation, keeping the item, or adding any costumes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useActiveItemTemp(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": ", collectibleType: "
            },
            {
              "kind": "Reference",
              "text": "CollectibleType",
              "canonicalReference": "isaac-typescript-definitions!CollectibleType:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "collectibleType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "useActiveItemTemp"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!validateCustomEnum:function(1)",
          "docComment": "/**\n * Helper function to check every value of a custom enum for -1. Will throw an run-time error if any -1 values are found. This is helpful because many methods of the Isaac class return -1 if they fail.\n *\n * For example:\n * ```ts\n * enum EntityTypeCustom {\n *   FOO = Isaac.GetEntityTypeByName(\"Foo\"),\n * }\n *\n * validateCustomEnum(\"EntityTypeCustom\", EntityTypeCustom);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function validateCustomEnum(transpiledEnumName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnumName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "validateCustomEnum"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!validateEnumContiguous:function(1)",
          "docComment": "/**\n * Helper function to validate if every value in an enum is contiguous, starting at 0.\n *\n * This is useful to automate checking large enums for typos.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function validateEnumContiguous<T>(transpiledEnumName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", transpiledEnum: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "transpiledEnumName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "transpiledEnum",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "validateEnumContiguous"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!vectorEquals:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function vectorEquals(vector1: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", vector2: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vector1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "vector2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "vectorEquals"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!VectorOne:var",
          "docComment": "/**\n * This is a safer version of the `Vector.One` constant. (Other mods can mutate `Vector.One`, so it is not safe to use.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VectorOne: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "VectorOne",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!vectorToDirection:function(1)",
          "docComment": "/**\n * Helper function for finding out which way a vector is pointing.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function vectorToDirection(vector: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Direction",
              "canonicalReference": "isaac-typescript-definitions!Direction:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "vectorToDirection"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!vectorToString:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function vectorToString(vector: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ", round?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vector",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "round",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "vectorToString"
        },
        {
          "kind": "Variable",
          "canonicalReference": "isaacscript-common!VectorZero:var",
          "docComment": "/**\n * This is a safer version of the `Vector.Zero` constant. (Other mods can mutate `Vector.Zero`, so it is not safe to use.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VectorZero: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "VectorZero",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!willMysteriousPaperRevive:function(1)",
          "docComment": "/**\n * Assuming that we are on the frame of fatal damage, this function returns whether or not Mysterious Paper would rotate to Missing Poster on the frame that the \"Game Over\" screen would appear (which would subsequently save the player from fatal damage).\n *\n * Mysterious Paper rotates between the 4 items on every frame, in order. The formula for whether Mysterious Paper be Missing Power is: `gameFrameCount % 4 === 3`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function willMysteriousPaperRevive(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "willMysteriousPaperRevive"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!willPlayerRevive:function(1)",
          "docComment": "/**\n * The `EntityPlayer.WillPlayerRevive` method does not properly account for Mysterious Paper, so use this helper function instead for more robust revival detection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function willPlayerRevive(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "willPlayerRevive"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!willReviveFromHeartbreak:function(1)",
          "docComment": "/**\n * Helper function to determine if the player will be revived by the Heartbreak collectible if they take fatal damage. This is contingent on the character that they are playing as and the amount of broken hearts that they already have.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function willReviveFromHeartbreak(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "willReviveFromHeartbreak"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!willReviveFromSpiritShackles:function(1)",
          "docComment": "/**\n * Helper function to determine if the Spirit Shackles item is in an enabled state. (It can be either enabled or disabled.)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function willReviveFromSpiritShackles(player: "
            },
            {
              "kind": "Reference",
              "text": "EntityPlayer",
              "canonicalReference": "isaac-typescript-definitions!~__global.EntityPlayer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "player",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "willReviveFromSpiritShackles"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!worldPositionToGridPosition:function(1)",
          "docComment": "/**\n * Helper function to convert a world position `Vector` to a grid position `Vector`.\n *\n * In this context, the grid position of the top-left wall is \"Vector(-1, -1)\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function worldPositionToGridPosition(worldPos: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "worldPos",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "worldPositionToGridPosition"
        },
        {
          "kind": "Function",
          "canonicalReference": "isaacscript-common!worldPositionToGridPositionFast:function(1)",
          "docComment": "/**\n * Helper function to convert a world position `Vector` to a grid position `Vector`.\n *\n * In this context, the grid position of the top-left wall is \"Vector(-1, -1)\".\n *\n * This is similar to the `worldPositionToGridPosition` function, but the values are not rounded.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function worldPositionToGridPositionFast(worldPos: "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "!Vector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "worldPos",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "worldPositionToGridPositionFast"
        }
      ]
    }
  ]
}

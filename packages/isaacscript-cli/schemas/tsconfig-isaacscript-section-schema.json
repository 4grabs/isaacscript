{
  "$ref": "#/definitions/IsaacScriptTSConfig",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "CustomStageTSConfig": {
      "additionalProperties": false,
      "description": "This is the format of a custom stage in the \"isaacscript\" section of the \"tsconfig.json\" file.\n\nThe contents of this interface are used to create a \"tsconfig-isaacscript-section-schema.json\" schema with the \"ts-json-schema-generator\" library.\n\nThe contents of this interface are validated at run-time against the schema using the Ajv library.\n\nThe `CustomStageLua` interface extends this, adding room metadata.",
      "properties": {
        "backdrop": {
          "additionalProperties": false,
          "description": "An object containing the paths to the backdrop for the stage. (A backdrop is the graphics for the walls and floor.) Mandatory.",
          "properties": {
            "corners": {
              "description": "An array of strings that represent the graphic files for the stage's corners. You must have at least one string in this array, but you can specify more than one to randomly add extra variety (like the vanilla stages do).\n\nFor an example of this, see the vanilla file \"resources/gfx/backdrop/01_basement.png\". (In the vanilla file, they concatenate both variations together into one PNG file and put it in the top right hand corner. The corners are shown in the top right hand corner of the file, with two different variations concatenated together. However, for the custom stages feature, you must separate each corner variation into a separate file (and put it in a different file from the walls).",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "lFloors": {
              "description": "An array of strings that represent the graphic files that are used for the floors in L rooms.\n\nYou must have at least one string in this array, but you can specify more than one to randomly add extra variety (like the vanilla stages do).\n\nFor an example of this, see the vanilla file \"resources/gfx/backdrop/01_lbasementfloor.png\".",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "nFloors": {
              "description": "An array of strings that represent the graphic files that are used for the floors in narrow rooms. (The \"n\" stands for \"narrow\").\n\nYou must have at least one string in this array, but you can specify more than one to randomly add extra variety (like the vanilla stages do).\n\nFor an example of this, see the vanilla file \"resources/gfx/backdrop/01_basement_nfloor.png\".",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "prefix": {
              "description": "The beginning of the path that leads to the backdrop graphics. For example:\n\n```sh gfx/backdrop/revelations/revelations_ ```",
              "type": "string"
            },
            "suffix": {
              "description": "The end of the path that leads to the backdrop graphics. In most cases, this will be \".png\".",
              "type": "string"
            },
            "walls": {
              "description": "An array of strings that represent the graphic files for the stage's walls.\n\nYou must have at least one string in this array, but you can specify more than one to randomly add extra variety (like the vanilla stages do).\n\nFor an example of this, see the vanilla file \"resources/gfx/backdrop/01_basement.png\". (In the vanilla file, they concatenate all four variations together into one PNG file. However, for the custom stages feature, you must separate each wall variation into a separate file.)",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "prefix",
            "suffix",
            "nFloors",
            "lFloors",
            "walls",
            "corners"
          ],
          "type": "object"
        },
        "baseStage": {
          "description": "An integer between 2 and 13, corresponding to the `LevelStage` enum. This is the number of the stage that will be warped to and used as a basis for the stage by the level generation algorithm. Mandatory.\n\n(It is not possible to use Basement 1 as a base due to conflicts with the `Game.SetStage` method.)",
          "type": "number"
        },
        "baseStageType": {
          "description": "An integer between 0 and 5, corresponding to the `StageType` enum. This is the number of the stage type that will be warped to and used as a basis for the stage by the level generation algorithm. Mandatory.",
          "type": "number"
        },
        "name": {
          "description": "The name of the custom stage. Mandatory.",
          "type": "string"
        },
        "roomVariantPrefix": {
          "description": "An arbitrarily chosen prefix in the range of 101-999. Mandatory.",
          "type": "number"
        },
        "xmlPath": {
          "description": "Path to the XML file that contains the rooms for the custom stage (created with Basement Renovator). Mandatory.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "xmlPath",
        "roomVariantPrefix",
        "baseStage",
        "baseStageType",
        "backdrop"
      ],
      "type": "object"
    },
    "IsaacScriptTSConfig": {
      "additionalProperties": false,
      "description": "This is the format of the \"isaacscript\" section of the \"tsconfig.json\" file.\n\nWe use this interface to automatically generate the schema using the \"ts-json-schema-generator\" library.",
      "properties": {
        "customStages": {
          "items": {
            "$ref": "#/definitions/CustomStageTSConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  }
}

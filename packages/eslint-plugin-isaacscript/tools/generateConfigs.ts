// Generates the files in the "src/configs" directory.

import { TSESLint } from "@typescript-eslint/utils";
import fs from "fs";
import path from "path";
import { PLUGIN_NAME } from "./constants";
import {
  formatWithPrettier,
  getAlphabeticalRuleEntries,
  getAutoGeneratedComment,
  getFullRuleName,
  isRecommendedRule,
  RuleDefinition,
} from "./utils";

interface LinterConfigRules {
  [name: string]:
    | TSESLint.Linter.RuleLevel
    | TSESLint.Linter.RuleLevelAndOptions;
}

interface LinterConfig extends TSESLint.Linter.Config {
  extends?: string | string[];
  plugins?: string[];
}

const DEFAULT_RULE_LEVEL = "error";
const RULE_ENTRIES = getAlphabeticalRuleEntries();
const CONFIGS_DIRECTORY_PATH = path.join(__dirname, "..", "src", "configs");

const BASE_CONFIG: LinterConfig = {
  plugins: [PLUGIN_NAME],
  rules: {
    // The "@typescript-eslint/member-ordering" rule will conflict with the
    // "isaacscript/member-ordering" rule.
    "@typescript-eslint/member-ordering": "off",

    // The ESLint "eqeqeq" rule will conflict with the "isaacscript/eqeqeq-fix" rule.
    eqeqeq: "off",

    // The ESLint "no-template-curly-in-string" rule will conflict with the
    // "isaacscript/no-template-curly-in-string-fix" rule.
    "no-template-curly-in-string": "off",

    // The ESLint "no-useless-return" rule will conflict with the
    // "isaacscript/no-useless-return-no-fix" rule.
    "no-useless-return": "off",
  },
};

export function generateConfigs(): void {
  all();
  recommended();
}

function all() {
  const allRules = RULE_ENTRIES.reduce<LinterConfigRules>(
    (config, entry) => reducer(config, entry),
    {},
  );
  const allConfig: LinterConfig = {
    ...BASE_CONFIG,
    rules: {
      ...BASE_CONFIG.rules,
      ...allRules,
    },
  };
  writeConfig("all", allConfig);
}

function recommended() {
  const recommendedRules = RULE_ENTRIES.filter((entry) =>
    isRecommendedRule(entry[1]),
  ).reduce<LinterConfigRules>((config, entry) => reducer(config, entry), {});
  const recommendedConfig: LinterConfig = {
    ...BASE_CONFIG,
    rules: {
      ...BASE_CONFIG.rules,
      ...recommendedRules,
    },
  };
  writeConfig("recommended", recommendedConfig);
}

function writeConfig(name: string, config: LinterConfig) {
  const comment = getAutoGeneratedComment("configs");
  const code = `export const ${name} = ${JSON.stringify(config)};`;
  const combined = comment + code;
  const content = formatWithPrettier(combined, "typescript");

  const fileName = `${name}.ts`;
  const filePath = path.join(CONFIGS_DIRECTORY_PATH, fileName);
  fs.writeFileSync(filePath, content);
}

/** Reduces records to key/value pairs. */
function reducer(
  config: LinterConfigRules,
  entry: [string, RuleDefinition],
): LinterConfigRules {
  const [ruleName, rule] = entry;
  const fullRuleName = getFullRuleName(ruleName);
  const ruleLevelRaw =
    rule.meta.docs === undefined || rule.meta.docs.recommended === false
      ? DEFAULT_RULE_LEVEL
      : rule.meta.docs.recommended;
  const ruleLevel = ruleLevelRaw as "error" | "warn";
  config[fullRuleName] = ruleLevel;

  return config;
}
